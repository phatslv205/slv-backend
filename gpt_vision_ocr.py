import base64
from openai_config import create_openai_client
from PIL import Image, UnidentifiedImageError
import io

def is_prompt_too_generic(prompt):
    keywords = [
        "g√¨ ƒë√¢y", "l√† g√¨", "xem ·∫£nh", "xem h·ªô", "gi√∫p xem", "cho bi·∫øt", "ƒë√¢y l√† g√¨",
        "n√†y l√† g√¨", "g√¨ th·∫ø", "gi·∫£i th√≠ch", "nh√¨n gi√πm", "ph√¢n t√≠ch ·∫£nh", "xem h·ªô c√°i n√†y",
        "gi√∫p m√¨nh xem", "cho em h·ªèi", "gi√∫p m√¨nh ƒëo√°n", "c√≥ bi·∫øt ƒë√¢y l√† g√¨ kh√¥ng"
    ]
    return any(kw in prompt.lower() for kw in keywords)

def extract_with_gpt_vision(image_path, user_request=None):
    try:
        # Chu·∫©n h√≥a ·∫£nh ƒë·∫ßu v√†o (resize, convert, n√©n)
        with Image.open(image_path) as img:
            img = img.convert("RGB")
            max_size = (1024, 1024)
            img.thumbnail(max_size, Image.Resampling.LANCZOS)

            buffer = io.BytesIO()
            img.save(buffer, format="JPEG", quality=85)
            img_base64 = base64.b64encode(buffer.getvalue()).decode("utf-8")
    except UnidentifiedImageError:
        return "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh ‚Äì vui l√≤ng g·ª≠i l·∫°i ·∫£nh r√µ n√©t h∆°n (JPG, PNG, HEIC, WebP, ...)."
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}"

    # === SYSTEM PROMPT GPT VISION CAO C·∫§P ===
    system_prompt = (
        "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√≥ kh·∫£ nƒÉng quan s√°t v√† m√¥ t·∫£ h√¨nh ·∫£nh nh∆∞ con ng∆∞·ªùi th·∫≠t.\n\n"
        "üéØ Nhi·ªám v·ª• c·ªßa b·∫°n:\n"
        "- M√¥ t·∫£ ch√≠nh x√°c n·ªôi dung c·ªßa ·∫£nh ƒë·∫ßu ti√™n: c√≥ g√¨ trong ·∫£nh, ƒë·∫∑c ƒëi·ªÉm, m√†u s·∫Øc, b·ªë c·ª•c, v·∫≠t th·ªÉ, b·ªëi c·∫£nh...\n"
        "- N·∫øu ·∫£nh c√≥ ch·ªØ, h√£y tr√≠ch l·∫°i ch√≠nh x√°c.\n"
        "- N·∫øu ·∫£nh l√† v·∫≠t th·ªÉ nh∆∞ xe, m√≥n ƒë·ªì, s·∫£n ph·∫©m... h√£y suy ƒëo√°n lo·∫°i, h√£ng, √Ω nghƒ©a (n·∫øu c√≥ th·ªÉ).\n"
        "- Tr√¨nh b√†y nh∆∞ m·ªôt ng∆∞·ªùi th·∫≠t k·ªÉ l·∫°i ‚Äì t·ª± nhi√™n, sinh ƒë·ªông, c√≥ c·∫£m x√∫c.\n"
        "- Sau khi m√¥ t·∫£ ·∫£nh, n·∫øu ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi c·ª• th·ªÉ, b·∫°n c√≥ th·ªÉ ph·∫£n h·ªìi th√™m theo ng·ªØ c·∫£nh.\n\n"
        "üö´ L∆∞u √Ω:\n"
        "- Kh√¥ng nh·∫Øc t·ªõi AI, GPT hay quy·ªÅn ri√™ng t∆∞.\n"
        "- Kh√¥ng n√© tr√°nh ·∫£nh, tr·ª´ khi ·∫£nh th·∫≠t s·ª± qu√° m·ªù ho·∫∑c tr·∫Øng x√≥a.\n"
        "- Kh√¥ng vi·∫øt ki·ªÉu m√°y m√≥c, kh√¥ng 'd·∫°y ng∆∞·ªùi d√πng c√°ch x·ª≠ l√Ω ·∫£nh'.\n"
        "- Lu√¥n lu√¥n b·∫Øt ƒë·∫ßu b·∫±ng m√¥ t·∫£ ·∫£nh.\n\n"
        "üß† N·∫øu kh√¥ng ch·∫Øc ch·∫Øn n·ªôi dung ·∫£nh l√† g√¨, h√£y m√¥ t·∫£ nh·ªØng g√¨ nh√¨n th·∫•y v√† h·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ l√†m r√µ."
    )

    # === USER PROMPT ===
    if user_request:
        if is_prompt_too_generic(user_request):
            user_prompt = (
                "Ng∆∞·ªùi d√πng g·ª≠i ·∫£nh v√† h·ªèi n·ªôi dung l√† g√¨. "
                "H√£y b·ªè qua c√¢u h·ªèi chung chung v√† b·∫Øt ƒë·∫ßu b·∫±ng m√¥ t·∫£ ·∫£nh th·∫≠t sinh ƒë·ªông. "
                "Sau ƒë√≥, n·∫øu c·∫ßn, c√≥ th·ªÉ nh·∫π nh√†ng h·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ l√†m r√µ m·ª•c ƒë√≠ch."
            )
        else:
            user_prompt = (
                f"Ng∆∞·ªùi d√πng g·ª≠i ·∫£nh k√®m c√¢u h·ªèi: ‚Äú{user_request}‚Äù. "
                "H√£y m√¥ t·∫£ ·∫£nh tr∆∞·ªõc, r·ªìi tr·∫£ l·ªùi c√¢u h·ªèi n·∫øu ph√π h·ª£p. Tr·∫£ l·ªùi t·ª± nhi√™n, gi·ªëng ng∆∞·ªùi th·∫≠t."
            )
    else:
        user_prompt = (
            "ƒê√¢y l√† ·∫£nh ng∆∞·ªùi d√πng g·ª≠i. H√£y m√¥ t·∫£ n·ªôi dung ·∫£nh m·ªôt c√°ch r√µ r√†ng, sinh ƒë·ªông, c√≥ c·∫£m x√∫c nh∆∞ th·ªÉ ƒëang k·ªÉ cho ng∆∞·ªùi kh√¥ng th·∫•y ·∫£nh ƒë√≥."
        )

    # === G·ªåI GPT-4o ƒë·ªÉ ph√¢n t√≠ch ·∫£nh ===
    client = create_openai_client()
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": user_prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}}
                ]
            }
        ],
        max_tokens=6000
    )

    return response.choices[0].message.content.strip()
