const editor = CodeMirror.fromTextArea(document.getElementById("codeInput"), { mode: "javascript", theme: "monokai", lineNumbers: true, lineWrapping: true, indentUnit: 4, tabSize: 4 }); const counter = document.getElementById("counter"); const warnScript = document.getElementById("warning-script"); const warnComment = document.getElementById("warning-comment"); const warnLong = document.getElementById("warning-long"); const lineScript = document.getElementById("line-script"); const lineComment = document.getElementById("line-comment"); const MAX_LINES = 100; const DANGER_LINES = 500; const skippedLines = new Set(); let activeMarker = null; function findRealComment(line) { let inSingle = false, inDouble = false, inBacktick = false; for (let i = 0; i < line.length; i++) { const c = line[i], next2 = line.slice(i, i + 2), next4 = line.slice(i, i + 4); if (c === '"' && !inSingle && !inBacktick) inDouble = !inDouble; if (c === "'" && !inDouble && !inBacktick) inSingle = !inSingle; if (c === "`") inBacktick = !inBacktick; if (!inSingle && !inDouble && !inBacktick) { if (next2 === "//") return { index: i, length: line.length - i }; if (next4 === "<!--") return { index: i, length: line.length - i }; if (next2 === "/*") { const end = line.indexOf("*/", i + 2); return { index: i, length: (end !== -1 ? end - i + 2 : line.length - i) }; } } } return null; } function highlightLine(lineIndex, chStart = 0, chEnd = null) { editor.scrollIntoView({ line: lineIndex, ch: 0 }); if (activeMarker) activeMarker.clear(); const line = editor.getLine(lineIndex); const endCh = chEnd !== null ? chEnd : line.length; activeMarker = editor.markText( { line: lineIndex, ch: chStart }, { line: lineIndex, ch: endCh }, { className: "error-line" } ); editor.setSelection( { line: lineIndex, ch: chStart }, { line: lineIndex, ch: endCh } ); editor.focus(); } editor.on("change", () => { const code = editor.getValue(); const lines = code.split("\n"); const lineCount = lines.length; const wordCount = code.trim().split(/\s+/).filter(Boolean).length; counter.textContent = `Dòng: ${lineCount} / ${MAX_LINES} — Từ: ${wordCount}`; counter.classList.toggle("text-red-500", lineCount > MAX_LINES); counter.classList.toggle("font-semibold", lineCount > MAX_LINES); counter.classList.toggle("text-gray-600", lineCount <= MAX_LINES); warnLong.classList.toggle("hidden", lineCount <= DANGER_LINES); warnScript.classList.add("hidden"); warnComment.classList.add("hidden"); if (activeMarker) activeMarker.clear(); let hasError = false; for (let i = 0; i < lines.length; i++) { if (skippedLines.has(i)) continue; const line = lines[i]; const matchScript = line.match(/<\s*\/?\s*script\s*>/i); if (matchScript) { warnScript.classList.remove("hidden"); warnScript.innerHTML = `Dòng <b id="line-script">${i + 1}</b>: Phát hiện thẻ &lt;script&gt;`; highlightLine(i, matchScript.index, matchScript.index + matchScript[0].length); hasError = true; break; } const matchComment = findRealComment(line); if (matchComment) { warnComment.classList.remove("hidden"); warnComment.innerHTML = `Dòng <b id="line-comment">${i + 1}</b>: Phát hiện chú thích (// hoặc &lt;!--)`; highlightLine(i, matchComment.index, matchComment.index + matchComment.length); hasError = true; break; } } const skipButton = document.querySelector('button[onclick="skipLine()"]'); if (!hasError) { warnScript.classList.remove("hidden"); warnScript.innerHTML = `✅ Đoạn code đã sẵn sàng.`; warnComment.classList.add("hidden"); skipButton.classList.add("hidden"); } else { skipButton.classList.remove("hidden"); } }); window.skipLine = function () { const cursor = editor.getCursor(); skippedLines.add(cursor.line); editor.setCursor({ line: 0, ch: 0 }); editor.focus(); editor.setValue(editor.getValue()); };