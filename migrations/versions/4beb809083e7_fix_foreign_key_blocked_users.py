"""fix foreign key blocked_users

Revision ID: 4beb809083e7
Revises: 
Create Date: 2025-06-09 00:46:15.861321

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4beb809083e7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('blocked_users', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('blocked_users_user_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('blocked_users_blocked_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['blocked_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('blocked_users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('blocked_users_blocked_id_fkey'), 'user', ['blocked_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('blocked_users_user_id_fkey'), 'user', ['user_id'], ['id'])

    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('fullname', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bio', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('school', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('birthday', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('vip_gpt', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('solves', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_solve_date', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ads_used_today', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('vip_until_gpt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('vip_until_solver_edu', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('vip_until_lite', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('vip_gpt_ai', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('vip_solver_edu', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('vip_ai_lite', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lite_usage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lite_date', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('last_lite_free_date', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('privacy', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('user_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
