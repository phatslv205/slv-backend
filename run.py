import eventlet
eventlet.monkey_patch()
from app import app, socketio
import os
import sys
import json
import bcrypt
import re
import requests
import imaplib
import email
from email.header import decode_header
import base64
import openai
import fitz  # PyMuPDF
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from flask import Response
from openai_config import call_gpt_viet
from openai import OpenAI
from dotenv import load_dotenv
from flask import url_for
import random
from extensions import db
from models.user import User
from sqlalchemy import text
from random import choices
from extensions import db, migrate, socketio, login_manager
@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, user_id)
from flask_login import login_user
from flask_migrate import Migrate
from sqlalchemy import and_, or_, func
from models.transaction import Transaction
from sqlalchemy import func
from models.friend import Friend
from models.message import Message
from models.leaderboard import NoiTuLeaderboard
from models.saved_chats import SavedChat
from models.leaderboard import update_leaderboard
from models.smartdoc import SmartDoc
from flask import request, send_file, render_template, session
from docx import Document
from models.daily_usage_stats import DailyUsageStats,update_daily_usage
from models.blocked_user_log import BlockedUserLog
from models.dev_chat_history import DevChatHistory
from models.feedback import Feedback
from models.user_memory import UserMemoryItem
from flask_login import login_required
from models.daily_usage_stats import finalize_daily_stats
from models.noi_tu_game_history import NoiTuGameHistory
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import date
from models.image_history import ImageHistory
from flask_login import current_user
import datetime as dt
from datetime import datetime, timedelta, timezone
from app import app, db
from models.chat_history import ChatSession
import os, openai, tempfile
from openai_config import AI_PERSONALITIES
GPT35_KEYS = os.getenv("GPT35_KEYS", "").split(",")
GPT4O_KEYS = os.getenv("GPT4O_KEYS", "").split(",")
ALL_KEYS = [key.strip() for key in GPT35_KEYS + GPT4O_KEYS if key.strip()]
if not ALL_KEYS:
    raise Exception("Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ API key n√†o trong GPT35_KEYS ho·∫∑c GPT4O_KEYS")
openai.api_key = random.choice(ALL_KEYS)
from config import Config, OPENAI_KEYS
from models import db  
from sqlalchemy.orm.attributes import flag_modified
from sqlalchemy.orm import Session
from models.friend_request import FriendRequest
from flask_socketio import SocketIO, join_room, emit
from flask_socketio import SocketIO, emit, join_room
from flask_socketio import emit 
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
from utils_shared import normalize_package
from pytz import timezone
from zoneinfo import ZoneInfo          
VN_TZ = ZoneInfo("Asia/Ho_Chi_Minh")   
UTC_TZ = ZoneInfo("UTC")
from datetime import timedelta,timezone
from flask import request, jsonify
from werkzeug.utils import secure_filename
from flask import request, session, redirect, render_template
from gpt_vision_ocr import extract_with_gpt_vision
from openai_config import call_gpt_lite


def reset_image_quota_if_needed(user):
    now = datetime.now()
    if not user.image_quota_reset_at or user.image_quota_reset_at.date() < now.date():
        user.image_quota_today = 10
        user.image_quota_reset_at = now
        db.session.commit()

def generate_image_from_prompt(prompt_text):
    try:
        client = create_openai_client()
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt_text,
            size="1024x1024",
            n=1
        )
        image_url = response.data[0].url
        if not image_url:
            return None

        img_data = requests.get(image_url).content
        filename = f"img_{uuid.uuid4().hex[:8]}.png"
        save_path = os.path.join("static", "images", "uploads", filename)

        with open(save_path, "wb") as f:
            f.write(img_data)

        return f"/static/images/uploads/{filename}"

    except Exception:
        return None


def rewrite_prompt_for_image(user_text):
    forbidden_keywords = [
        "g∆∞∆°ng m·∫∑t", "gh√©p m·∫∑t", "g∆∞∆°ng c·ªßa t√¥i", "·∫£nh c·ªßa t√¥i",
        "d·ª±a tr√™n ·∫£nh", "d·ª±a v√†o ·∫£nh", "·∫£nh th·∫≠t", "h√¨nh th·∫≠t",
        "·∫£nh ch·ª•p", "photo of me", "real face", "real photo", "combine with my face"
    ]

    lower_text = user_text.lower()
    if any(keyword in lower_text for keyword in forbidden_keywords):
        return None

    if re.search(r"(ph√©p to√°n|c√¢u to√°n|b√†i to√°n|ƒë·ªÅ to√°n|to√°n h·ªçc|to√°n l·ªõp)", user_text, re.IGNORECASE):
        user_text += (
            "\nüëâ Y√™u c·∫ßu: T·∫°o ·∫£nh m·ªôt b·∫£ng tr·∫Øng ƒë·∫πp c√≥ 3 ph√©p to√°n r√µ r√†ng nh∆∞:\n"
            "- 8 + 4 = ?\n"
            "- 6 √ó 7 = ?\n"
            "- 9 ‚àí 3 = ?\n"
            "Tr√¨nh b√†y nh∆∞ gi·∫£ng b√†i, b·ªë c·ª•c s·∫°ch s·∫Ω, √°nh s√°ng t·ªët."
        )

    system_instruction = (
        "B·∫°n l√† chuy√™n gia vi·∫øt prompt cho AI v·∫Ω h√¨nh ·∫£nh (DALL¬∑E). "
        "Vi·∫øt l·∫°i m√¥ t·∫£ th√†nh prompt ti·∫øng ANH ng·∫Øn g·ªçn, b·∫Øt ƒë·∫ßu b·∫±ng danh t·ª´ m√¥ t·∫£ ch·ªß th·ªÉ ho·∫∑c c·∫£nh v·∫≠t.\n"
        "- KH√îNG ƒë∆∞·ª£c n√≥i g√¨ ngo√†i prompt.\n"
        "- KH√îNG gi·∫£i th√≠ch, KH√îNG ch√†o h·ªèi, KH√îNG gi·ªõi thi·ªáu b·∫£n th√¢n.\n"
        "- KH√îNG ƒë∆∞·ª£c vi·∫øt: 'I'm here to help' hay 'I can help you'.\n"
        "- Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 1 d√≤ng prompt b·∫±ng ti·∫øng Anh m√¥ t·∫£ ·∫£nh th·∫≠t ƒë·∫πp, c·∫£m x√∫c, b·ªë c·ª•c r√µ, √°nh s√°ng t·ªët."
    )

    try:
        client = create_openai_client(model="gpt-4o")
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_instruction},
                {"role": "user", "content": user_text}
            ],
            temperature=0.7
        )
        prompt = response.choices[0].message.content.strip()
        if not prompt or "i'm here" in prompt.lower() or prompt.lower().startswith("i ") or len(prompt) < 15:
            return None
        return prompt
    except Exception:
        return None


def run_auto_approval():
    while True:
        auto_approve_transactions()
        time.sleep(60)
def cleanup_old_chats():
    folder = "chat_history"
    max_age = 24 * 60 * 60  # 24 gi·ªù
    now = time.time()

    for filename in os.listdir(folder):
        path = os.path.join(folder, filename)
        if os.path.isfile(path):
            if now - os.path.getmtime(path) > max_age:
                os.remove(path)

from datetime import datetime

def save_chat_sql(user_id, session_id, history):
    if len(history) < 2:
        return  # Kh√¥ng c√≥ g√¨ m·ªõi ƒë·ªÉ l∆∞u

    last_two = history[-2:]

    for msg in last_two:
        role = msg["role"]
        content = msg.get("content")
        image_url = msg.get("image_url")

        # ‚ö†Ô∏è N·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh nh∆∞ng kh√¥ng c√≥ n·ªôi dung ‚Üí g·∫Øn nh√£n ƒë·∫∑c bi·ªát ƒë·ªÉ hi·ªÉn th·ªã fallback
        if role == "user" and not content and image_url:
            content = "__image_only__"

        # ‚ùå N·∫øu kh√¥ng c√≥ ·∫£nh v√† kh√¥ng c√≥ n·ªôi dung th√¨ b·ªè qua lu√¥n (kh√¥ng l∆∞u d√≤ng tr·ªëng)
        if not content and not image_url:
            continue

        chat = ChatHistory(
            user_id=user_id,
            session_id=session_id,
            role=role,
            content=content,
            timestamp=datetime.utcnow(),
            image_url=image_url,
            reply_to=msg.get("reply_to"),
            is_saved=False 
        )
        db.session.add(chat)

    db.session.commit()


OTP_FILE = "otp_codes.json"


def now_vn():
    return datetime.utcnow() + timedelta(hours=7)



UPLOAD_FOLDER = 'static/images/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

import time
from image_cleaner import clean_old_images
import os
import time
def clean_old_images():
    folder = 'static/images/uploads'
    now = time.time()
    threshold = 7 * 86400  # 7 ng√†y

    for filename in os.listdir(folder):
        file_path = os.path.join(folder, filename)
        if os.path.isfile(file_path):
            if now - os.path.getmtime(file_path) > threshold:
                os.remove(file_path)
from openai_config import create_openai_client
import smtplib
from email.mime.text import MIMEText
def send_otp_email(to_email, otp_code):
    subject = "M√£ x√°c th·ª±c OTP"
    body = f"M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: {otp_code}\nTh·ªùi h·∫°n hi·ªáu l·ª±c: 5 ph√∫t."
    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = "SolverViet <your_email@gmail.com>"  # thay b·∫±ng email th·∫≠t
    msg["To"] = to_email

    try:
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        server.login("your_email@gmail.com", "your_app_password")
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        return False

def send_user_otp_email(to_email, otp_code):
    subject = "M√£ x√°c th·ª±c OTP t·ª´ SolverViet"

    html =f"""
<html>
<body style="font-family: Arial, sans-serif; color: #333; background-color: #f4f6f8; padding: 0; margin: 0;">
    <div style="max-width: 500px; margin: auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        
        <div style="text-align: center; margin-bottom: 20px;">
            <img src="https://i.ibb.co/Z2hCr6B/logo-solverviet.png" alt="SolverViet" style="width: 80px;"/>
        </div>
        
        <h2 style="color: #2e7d32; text-align: center;">X√°c th·ª±c t√†i kho·∫£n SolverViet</h2>
        <p>Xin ch√†o,</p>
        <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x√°c th·ª±c ƒëƒÉng nh·∫≠p ho·∫∑c thao t√°c quan tr·ªçng t·ª´ b·∫°n.</p>
        
        <p style="font-size: 16px;"><strong>M√£ OTP c·ªßa b·∫°n l√†:</strong></p>
        
        <div style="font-size: 26px; font-weight: bold; color: #d32f2f; background-color: #fff3f3; border: 1px dashed #d32f2f; padding: 12px 20px; display: inline-block; border-radius: 6px;">
            {otp_code}
        </div>
        
        <p style="margin-top: 20px;">M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>.</p>
        
        <p style="color: #e53935; font-weight: bold;">‚ö†Ô∏è Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai, k·ªÉ c·∫£ ng∆∞·ªùi t·ª± x∆∞ng l√† t·ª´ SolverViet.</p>
        
        <hr style="margin: 20px 0;">
        
        <p style="font-size: 13px; color: gray;">
            N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá h·ªó tr·ª£.
        </p>
        <p style="margin-top: 20px;">Tr√¢n tr·ªçng,<br><strong>SolverViet üáªüá≥</strong></p>
    </div>
</body>
</html>
"""


    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = f"SolverViet <{os.getenv('EMAIL_ADDRESS')}>"
    msg["To"] = to_email
    msg.attach(MIMEText(html, "html", "utf-8"))

    try:
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        server.login(os.getenv("EMAIL_ADDRESS"), os.getenv("EMAIL_PASSWORD"))
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        return False


import unicodedata
import random
import string

def generate_otp():
    from random import randint
    return str(random.randint(100000, 999999))


TELEGRAM_TOKEN = "7580016404:AAHoWnvRElJD3BXkZyxZQ4A4z34qXB-3s54"
TELEGRAM_CHAT_ID = "6894067779"
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, data=data)
    except Exception:
        pass
#H√ÄM G·ª¨I EMAIL
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from ip_blocker import record_ip, is_ip_blocked
from flask import get_flashed_messages
from flask import Flask, render_template, request, redirect, url_for, session, flash, get_flashed_messages
REQUESTS_FILE = "requests.json"
from flask import Flask, render_template, request, session, redirect, url_for
import time
import threading
from flask import flash 
import uuid
# === Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o sys.path ƒë·ªÉ import c√°c module n·ªôi b·ªô ===
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

# ‚úÖ IMPORT c√°c h√†m x·ª≠ l√Ω qu·∫£n l√Ω ng∆∞·ªùi d√πng
from admin_utils import is_vip
def generate_unique_referral_code(length=8):
    """Sinh m√£ gi·ªõi thi·ªáu duy nh·∫•t, kh√¥ng tr√πng."""
    while True:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        if not User.query.filter_by(referral_code=code).first():
            return code
def load_user_messages(user_id):
    inbox_path = f"user_data/{user_id}_inbox.txt"
    if os.path.exists(inbox_path):
        with open(inbox_path, "r", encoding="utf-8") as f:
            return [msg.strip() for msg in f.read().split("---\n\n") if msg.strip()]
    return []
def cap_nhat_trang_thai_vip(user: User):
    now = datetime.utcnow()
    user.vip_gpt_ai = bool(user.vip_until_gpt and now <= user.vip_until_gpt)
    user.vip_ai_lite = bool(user.vip_until_lite and now <= user.vip_until_lite)
    return {
        "vip_gpt_ai": user.vip_gpt_ai,
        "vip_ai_lite": user.vip_ai_lite,
    }
# ===== IMPORT TO√ÄN B·ªò =====
from flask import Flask
from config import Config
from extensions import db
# ====== FLASK APP ======
app = Flask(__name__)
socketio = SocketIO(app, async_mode="threading")  
app.config.from_object(Config)
db.init_app(app)
migrate.init_app(app, db)
app.secret_key = 'b@o_m@t_2025_üî•' 
DATA_FILE = 'friends_data.json'
login_manager.init_app(app)
app.secret_key = Config.SECRET_KEY
app.config['SECRET_KEY'] = Config.SECRET_KEY
app.permanent_session_lifetime = timedelta(days=30)
# Job 15 ph√∫t: kh√¥ng c·∫ßn app context
from flask import render_template, request, redirect, abort, session
def is_admin():
    return session.get("is_admin") is True   
from functools import wraps
def admin_only(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not is_admin():
            return redirect("/admin_login") 
        return f(*args, **kwargs)
    return decorated_function
@app.route("/admin/daily_stats")
@admin_only
def daily_stats():
    page = request.args.get("page", 1, type=int)
    per_page = 20
    pagination = DailyUsageStats.query.order_by(DailyUsageStats.date.desc()).paginate(page=page, per_page=per_page)
    return render_template("admin_daily_stats.html", pagination=pagination, stats=pagination.items)
def delete_old_stats():
    threshold = datetime.utcnow().date() - timedelta(days=180)
    deleted = DailyUsageStats.query.filter(DailyUsageStats.date < threshold).delete()
    db.session.commit()
@app.route("/admin/delete_stat/<stat_id>", methods=["POST"])
@admin_only
def delete_stat(stat_id):
    stat = DailyUsageStats.query.get(stat_id)
    if stat:
        db.session.delete(stat)
        db.session.commit()
    return redirect(url_for("daily_stats"))

from sqlalchemy import or_, func, String
@socketio.on("join_admin")
def join_admin():
    if session.get("is_admin"):
        join_room("admin_dashboard")
def get_time_slot(dt):
    return dt.strftime("%H:00")
@app.route("/admin_users")
@admin_only
def admin_users():
    PER_PAGE = 200
    page   = request.args.get("page", 1, type=int)
    search = request.args.get("search", "").strip().lower()
    base_q = User.query
    if search:
        base_q = base_q.filter(
            func.lower(User.username).like(f"%{search}%") |
            func.lower(User.fullname).like(f"%{search}%") |
            func.lower(User.user_id.cast(String)).like(f"%{search}%")
        )
    total_users = base_q.count()
    active_users = base_q.filter_by(online=True).count()
    gpt_users = base_q.filter(User.vip_gpt.isnot(None)).count()
    blocked_users = base_q.filter_by(over_quota_block=True).count()
    heavy_users = base_q.filter(User.gpt_usage_today > 100).count()
    stats_today = DailyUsageStats.query.filter_by(date=date.today()).first()
    if not stats_today:
        stats_today = DailyUsageStats(slv_count=0, lite_count=0)
    base_q = base_q.order_by(
        User.over_quota_block.desc(),
        (User.gpt_usage_today >= 200).desc(),
        User.online.desc(),
        User.user_id.asc()
    )
    today = now_vn().strftime("%Y-%m-%d")
    now = now_vn()
    expired_users = User.query.filter(
        or_(
            and_(User.vip_gpt.isnot(None), User.vip_until_gpt < now),
            and_(User.vip_ai_lite == True, User.vip_until_lite < now)
        )
    ).all()

    for u in expired_users:
        if u.vip_until_gpt and u.vip_until_gpt < now:
            u.vip_gpt = None
            u.vip_until_gpt = None
        if u.vip_ai_lite and u.vip_until_lite and u.vip_until_lite < now:
            u.vip_ai_lite = False
            u.vip_until_lite = None
    db.session.commit()
    lite_users = User.query.filter(
        User.vip_ai_lite == True,
        User.vip_until_lite > now_vn()
    ).all()
    for u in lite_users:
        if u.lite_date != today:
            u.lite_usage = 0
            u.lite_date = today
    db.session.commit()
    users_paginated = base_q.paginate(page=page, per_page=PER_PAGE)
    users = users_paginated.items
    users_data = []
    for user in users:
        u = {
            "username": user.username,
            "fullname": user.fullname,
            "ai_personality": user.ai_personality or "Kh√¥ng c√≥",
            "bio": user.bio,
            "user_id": user.user_id,
            "referral_code": user.referral_code or "‚Äî",
            "online": getattr(user, "online", False),
            "is_blocked": getattr(user, "is_blocked", False),
            "vip_lite_display": user.vip_until_lite.strftime("%Y-%m-%d %H:%M:%S") if user.vip_until_lite else "Kh√¥ng c√≥",
            "vip_gpt_display": user.vip_until_gpt.strftime("%Y-%m-%d %H:%M:%S") if user.vip_until_gpt else "Kh√¥ng c√≥",
            "vip_gpt": user.vip_gpt or "",
            "over_quota_block": getattr(user, "over_quota_block", False),
            "over_quota_block_at": user.over_quota_block_at,
            "quota_alert": (  user.vip_gpt in ["15day", "30day"] and not user.gpt_unlimited and user.gpt_usage_today >= 200),
        }
        gpt_type = user.vip_gpt
        used = getattr(user, "gpt_usage_today", 0) or 0

        if getattr(user, "vip_ai_lite", False) and getattr(user, "vip_until_lite", None):
            lite_used = getattr(user, "lite_usage", 0)
            lite_limit = getattr(user, "vip_lite_daily_limit", 70)
            u["gpt_remaining"] = "None"
            u["lite_remaining"] = f"{lite_limit - lite_used}/{lite_limit}"
        elif gpt_type == "5day":
            u["gpt_remaining"] = f"{100 - used}/100"
            u["lite_remaining"] = "Kh√¥ng c√≥"
        elif gpt_type in ["15day", "30day"]:
            u["gpt_remaining"] = "‚àû"
            u["lite_remaining"] = "Kh√¥ng c√≥"
        else:
            u["gpt_remaining"] = "Kh√¥ng c√≥"
            u["lite_remaining"] = "Kh√¥ng c√≥"

        if gpt_type == "5day":
            quota_remain = 100 - used
            u["gpt_quota"] = f"{quota_remain}/100"
            u["quota_alert"] = False
        elif gpt_type in ("15day", "30day") and not getattr(user, "gpt_unlimited", False):
            quota_remain = 200 - used
            u["gpt_quota"] = f"{quota_remain}/200"
            if quota_remain <= 0 and not user.over_quota_block:
                user.over_quota_block = True
                user.over_quota_block_at = now_vn()
                db.session.commit()
                socketio.emit("update_quota_alert")
    
                u["over_quota_block"] = True
                u["over_quota_block_at"] = user.over_quota_block_at
                u["quota_alert"] = False
            else:
                u["quota_alert"] = quota_remain <= 0
        else:
            u["gpt_quota"] = "‚àû" if getattr(user, "gpt_unlimited", False) else "N/A"
            u["quota_alert"] = False

        u["gpt_usage_today"] = user.gpt_usage_today
        u["lite_usage"] = user.lite_usage

        users_data.append(u)
    alert_users = User.query.filter(
        or_(
            User.over_quota_block == True,
            User.gpt_usage_today >= 200
        )
    ).order_by(User.gpt_usage_today.desc()).limit(50).all()

    return render_template(
        "admin_users.html",
        alert_users=alert_users,
        timedelta=timedelta,
        users=users_data,
        user_count=users_paginated.total,
        pagination=users_paginated,
        search=search,
        stats_today=stats_today,
        stats={
            "total": total_users,
            "active": active_users,
            "gpt": gpt_users,
            "blocked": blocked_users,
            "heavy": heavy_users,
        }
    )
import pytz, threading, time
from datetime import timezone
def auto_unblock_loop():
    with app.app_context():
        while True:
            users = User.query.filter_by(over_quota_block=True).all()
            now_utc = datetime.now(pytz.UTC)
            count_unblocked = 0

            for user in users:
                block_time = user.over_quota_block_at
                if not block_time:
                    continue

                # ƒê·∫£m b·∫£o c√≥ timezone (n·∫øu b·ªã thi·∫øu)
                if block_time.tzinfo is None:
                    block_time = pytz.timezone("Asia/Ho_Chi_Minh").localize(block_time).astimezone(pytz.UTC)
                else:
                    block_time = block_time.astimezone(pytz.UTC)

                # T√≠nh th·ªùi ƒëi·ªÉm c·∫ßn m·ªü kh√≥a
                unblock_time = block_time + timedelta(days=1)

                if now_utc >= unblock_time:
                    user.over_quota_block = False
                    user.over_quota_block_at = None
                    user.gpt_usage_today = 0
                    db.session.commit()
                    count_unblocked += 1

                    socketio.emit("user_usage_update", {
                        "user_id": user.user_id,
                        "username": user.username,
                        "gpt_usage": user.gpt_usage_today,
                        "lite_usage": user.lite_usage,
                        "over_quota_block": user.over_quota_block,
                        "vip_gpt": user.vip_gpt or "",
                        "vip_lite": bool(user.vip_ai_lite),
                        "quota_alert": False
                    }, room="admin_dashboard")

            time.sleep(10)

@app.route("/admin_users/quota_alert")
@admin_only
def quota_alert_partial():
    alert_users = User.query.filter(
        (User.gpt_usage_today >= 200) | (User.over_quota_block == True)
    ).limit(50).all()
    return render_template("admin/_quota_alert_partial.html", alert_users=alert_users, timedelta=timedelta)                                                                                                                                                                                                                                                                                                                       
from sqlalchemy import and_
from sqlalchemy.sql import cast
from sqlalchemy.types import Date
from pytz import timezone
@app.route("/admin_users/block_chat_quota", methods=["POST"])
@admin_only
def block_chat_quota():
    username = request.form.get("username")
    block    = request.form.get("block_chat") == "1"

    user = User.query.filter_by(username=username).first()
    if user:
        user.over_quota_block = block
        user.over_quota_block_at = now_vn() if block else None
        log_added = False  
        if block and user.gpt_usage_today > 0: 
            block_time = user.over_quota_block_at.astimezone(timezone("Asia/Ho_Chi_Minh"))
            socketio.emit("update_quota_alert")
            time_slot = get_time_slot(block_time)
            existing_log = BlockedUserLog.query.filter(
                and_(
                    BlockedUserLog.user_id == user.user_id,
                    BlockedUserLog.time_slot == time_slot,
                    cast(BlockedUserLog.block_time, Date) == block_time.date()
                )
            ).first()
            if not existing_log:
                log = BlockedUserLog(
                    user_id=user.user_id,
                    username=user.username,
                    block_time=block_time,
                    time_slot=time_slot
                )
                db.session.add(log)
                db.session.flush()  
                log_added = True
        if not block:
            user.gpt_usage_today = 0
        db.session.commit()
        socketio.emit("user_usage_update", {
            "user_id": user.user_id,
            "username": user.username,
            "gpt_usage": user.gpt_usage_today,
            "lite_usage": user.lite_usage,
            "vip_gpt": user.vip_gpt or "",
            "vip_lite": bool(user.vip_ai_lite),
            "over_quota_block": user.over_quota_block,
            "over_quota_block_at": user.over_quota_block_at.isoformat() + "+07:00" if user.over_quota_block_at else None,
            "quota_alert": (
                user.vip_gpt in ["15day", "30day"]
                and not user.gpt_unlimited
                and user.gpt_usage_today >= 200
            )
        }, room="admin_dashboard")
    return "", 204

@app.route("/admin_users/auto_unblock_quota")
@admin_only
def auto_unblock_quota():
    expired_time = now_vn() - timedelta(hours=24)
    users = User.query.filter(
        User.over_quota_block == True,
        User.over_quota_block_at != None,
        User.over_quota_block_at < expired_time
    ).all()
    count = 0
    for user in users:
        user.over_quota_block = False
        user.over_quota_block_at = None
        user.gpt_usage_today = 0
        count += 1
        socketio.emit("user_usage_update", {
            "user_id": user.user_id,
            "username": user.username,
            "gpt_usage": user.gpt_usage_today,
            "lite_usage": user.lite_usage,
            "over_quota_block": user.over_quota_block,
            "vip_gpt": user.vip_gpt or "",
            "vip_lite": bool(user.vip_ai_lite),
            "quota_alert": False
        }, room="admin_dashboard")
    db.session.commit()
    return f"‚úÖ ƒê√£ g·ª° ch·∫∑n t·ª± ƒë·ªông {count} ng∆∞·ªùi d√πng sau 24h."

def parse_dt(s):
    if not s or s.lower() in ["none", "kh√¥ng c√≥"]:
        return None
    s = s.strip()
    try:
        if len(s) == 10:
            s += " 23:59:59"
        return datetime.strptime(s, "%Y-%m-%d %H:%M:%S")
    except:
        return None
def parse_vip_duration(type_str):
    now = datetime.now()
    if type_str == "5day":
        return now + timedelta(days=4, hours=23, minutes=59, seconds=59)
    elif type_str == "15day":
        return now + timedelta(days=14, hours=23, minutes=59, seconds=59)
    elif type_str == "30day":
        return now + timedelta(days=29, hours=23, minutes=59, seconds=59)
    elif type_str == "7day":  
        return now + timedelta(days=6, hours=23, minutes=59, seconds=59)
    return None

@app.route("/admin_users/update", methods=["POST"])
@admin_only
def admin_users_update():
    old_name = request.form.get("username")
    new_name = request.form.get("new_username", old_name)

    vip_gpt = request.form.get("vip_gpt", "").strip()
    vip_lite = request.form.get("vip_lite", "").strip()

    vip_gpt_type = request.form.get("vip_gpt_type", "").strip()
    vip_lite_type = request.form.get("vip_lite_type", "").strip()

    gpt_unlimited = request.form.get("gpt_unlimited") == "on"

    user = User.query.filter_by(username=old_name).first()
    if user:
        if new_name != old_name:
            user.username = new_name

        # üéØ G√≥i GPT
        if vip_gpt_type:
            gpt_time = parse_vip_duration(vip_gpt_type)
        else:
            gpt_time = parse_dt(vip_gpt)

        # üéØ G√≥i Lite
        if vip_lite_type == "none":
            lite_time = None
        elif vip_lite_type:
            lite_time = parse_vip_duration(vip_lite_type)
        else:
            lite_time = parse_dt(vip_lite)

        # ‚ùó N·∫øu c·∫£ GPT v√† Lite ƒë·ªÅu ƒë∆∞·ª£c set th√¨ v·∫´n ∆∞u ti√™n GPT
        if gpt_time and lite_time:
            lite_time = None

        user.vip_until_gpt = gpt_time
        user.vip_gpt = vip_gpt_type or None
        user.vip_gpt_ai = bool(gpt_time)

        user.vip_until_lite = lite_time
        user.vip_ai_lite = bool(lite_time)
        if lite_time:
            user.lite_usage = 0
        db.session.commit()
 
    return redirect("/admin_users")

@app.route("/admin_users/toggle_block", methods=["POST"])
@admin_only
def admin_toggle_block():
    username = request.form.get("username")
    if not username:
        return "Thi·∫øu t√™n ng∆∞·ªùi d√πng", 400

    user = User.query.filter_by(username=username).first()
    if not user:
        return "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng", 404

    # ‚úÖ ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i block
    user.is_blocked = not getattr(user, "is_blocked", False)
    db.session.commit()

    return redirect("/admin_users")


def get_user_type():
    user_id = session.get("user_id")
    if not user_id:
        return "guest"

    user = User.query.filter_by(user_id=user_id).first()

    if not user:
        return "guest"

    try:
        if user.vip_until and datetime.strptime(user.vip_until, "%Y-%m-%d").date() >= datetime.now().date():
            return "vip"
    except:
        pass

    return "logged_in"


def check_lite_usage(user):
    MAX_FREE = 15
    MID_LIMIT = 5
    DAILY_LIMIT = 30
    now = now_vn()
    today = now.strftime("%Y-%m-%d")

    username = session.get("username")
    if not username:
        usage = session.get("lite_usage", 0)
        if usage >= MAX_FREE:
            return False
        session["lite_usage"] = usage + 1
        return True

    user = User.query.filter_by(username=username).first()
    if not user:
        return False

    verified = user.is_verified or False
    rolls_left = user.ai_personality_rolls_left or 0
    free_uses = user.free_gpt_uses or 0

    # ‚úÖ G√≥i GPT kh√¥ng gi·ªõi h·∫°n
    try:
        if user.vip_until_gpt and now <= datetime.strptime(user.vip_until_gpt, "%Y-%m-%d %H:%M:%S"):
            return True
    except:
        pass

    # ‚úÖ V·ª´a x√°c th·ª±c xong th√¨ cho qua l∆∞·ª£t ƒë·∫ßu
    if session.pop("just_verified", False):
        return True

    # ‚úÖ N·∫øu ch∆∞a x√°c th·ª±c ‚Üí ch·ªâ 5 l∆∞·ª£t ƒë·∫ßu (tr·ª´ ai_personality_rolls_left)
    if not verified:
        if rolls_left <= 0:
            return "require_verification"
        user.ai_personality_rolls_left = rolls_left - 1
        user = db.session.merge(user) 
        db.session.commit()

        socketio.emit("user_usage_update", {
            "user_id": user.user_id,
            "username": user.username,
            "gpt_usage": user.gpt_usage_today,
            "free_gpt_uses": user.free_gpt_uses,
            "rolls_left": user.ai_personality_rolls_left,
            "vip_gpt": user.vip_gpt or "",
            "vip_lite": bool(user.vip_ai_lite)
        }, room="admin_dashboard")

        return True

    # ‚úÖ N·∫øu ƒë√£ x√°c th·ª±c ‚Üí 15 l∆∞·ª£t mi·ªÖn ph√≠ (tr·ª´ free_gpt_uses)
    if verified and free_uses > 0:
        user.free_gpt_uses = free_uses - 1
        user = db.session.merge(user)
        db.session.commit()

        socketio.emit("user_usage_update", {
            "user_id": user.user_id,
            "username": user.username,
            "gpt_usage": user.gpt_usage_today,
            "free_gpt_uses": user.free_gpt_uses,
            "rolls_left": user.ai_personality_rolls_left,
            "vip_gpt": user.vip_gpt or "",
            "vip_lite": bool(user.vip_ai_lite)
        }, room="admin_dashboard")

        return True

    # ‚úÖ N·∫øu ƒë√£ mua g√≥i Lite ‚Üí 50 l∆∞·ª£t/ng√†y
    try:
        if user.vip_until_lite and now <= user.vip_until_lite:
            if user.lite_date != today:
                user.lite_usage = 0
                user.lite_date = today
            usage = user.lite_usage or 0
            if usage < 70:
                user.lite_usage = usage + 1
                user = db.session.merge(user)
                db.session.commit()

                socketio.emit("user_usage_update", {
                    "user_id": user.user_id,
                    "username": user.username,
                    "gpt_usage": user.gpt_usage_today,
                    "lite_usage": user.lite_usage,
                    "free_gpt_uses": user.free_gpt_uses,
                    "rolls_left": user.ai_personality_rolls_left,
                    "vip_gpt": user.vip_gpt or "",
                    "vip_lite": bool(user.vip_ai_lite)
                }, room="admin_dashboard")

                return True
            else:
                return False
    except:
        pass
    if verified:
        has_lite = user.vip_until_lite and now <= user.vip_until_lite
        has_slv = user.vip_until_gpt and now <= user.vip_until_gpt
        if not has_lite and not has_slv:
            if user.daily_fallback_date != today:
                user.daily_fallback_date = today
                user.daily_fallback_uses = 0

            if user.daily_fallback_uses >= DAILY_LIMIT:
                return False

            user.daily_fallback_uses += 1
            user = db.session.merge(user)
            db.session.commit()

            socketio.emit("user_usage_update", {
                "user_id": user.user_id,
                "username": user.username,
                "daily_fallback_uses": user.daily_fallback_uses,
                "free_gpt_uses": user.free_gpt_uses,
                "rolls_left": user.ai_personality_rolls_left,
                "vip_gpt": user.vip_gpt or "",
                "vip_lite": bool(user.vip_ai_lite)
            }, room="admin_dashboard")

            return True

def check_gpt_usage(user):
    today = today_str()  # d√πng gi·ªù VN chu·∫©n
    gpt_until = user.vip_until_gpt
    gpt_type = user.vip_gpt

    if not gpt_until or not gpt_type:
        return False
    if now_vn() > gpt_until:
        return False

    if user.gpt_unlimited:
        return True

    if gpt_type in ["15day", "30day"]:
        # üîÅ Reset n·∫øu qua ng√†y
        if user.gpt_usage_date != today:
            user.gpt_usage_today = 0
            user.gpt_usage_date = today
        return True

    if gpt_type == "5day":
        if user.gpt_usage_date != today:
            user.gpt_usage_today = 0
            user.gpt_usage_date = today

        if user.gpt_usage_today >= 100:
            return False
        return True

    return False
def get_al_usage():
    return session.get("al_uses", 0)
def increment_al_usage():
    session["al_uses"] = get_al_usage() + 1
# ====== USER MANAGEMENT ======#
def get_username():
    return session.get("username")
def is_admin():
    return session.get("is_admin") is True
def update_solves(username):
    user = User.query.filter_by(username=username).first()
    if user:
        user.solves += 1
        db.session.commit()
def get_today():
    return datetime.now().strftime('%Y-%m-%d')

def get_solve_today(username):
    today = get_today()
    if username == "admin":
        return 0  # Admin kh√¥ng b·ªã gi·ªõi h·∫°n

    user = User.query.filter_by(username=username).first()
    if not user:
        return 0

    if not user.last_solve_date:
        user.last_solve_date = today
        user.solves = 0
        user.ads_used_today = 0
        db.session.commit()
    elif user.last_solve_date != today:
        if user.solves < 10:
            user.solves = max(0, user.solves - 5)
        else:
            user.solves = 0
        user.last_solve_date = today
        user.ads_used_today = 0
        db.session.commit()

    return user.solves
#==========B·∫¢O TR√å H·ªÜ TH·ªêNG==========#
def is_maintenance(feature):
    try:
        with open("maintenance_config.json", "r") as f:
            config = json.load(f)
            return config.get("all") or config.get(feature, False)
    except:
        return False
@app.route("/check_maintenance")
def check_maintenance():
    feature = request.args.get("feature", "all")
    return jsonify({"maintenance": is_maintenance(feature)})
@app.route("/maintenance")
def maintenance_page():
    return render_template("maintenance.html")


@app.route("/admin/bao-tri", methods=["GET"])
@admin_only
def bao_tri_router():
    return redirect("/admin/bao-tri-all")
    
@app.route("/admin/bao-tri-all", methods=["GET", "POST"])
@admin_only
def bao_tri_all():
    try:
        with open("maintenance_config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {
            "all": False,
            "gpt_chat": False,
            "chat_lite": False,
            "chat_ai_lite": False,
            "chat_ai_lite_daily": False,
            "home": False
        }

    if request.method == "POST":
        feature = request.form.get("feature")

        if feature and feature in config:
            # Toggle t·ª´ng ph·∫ßn c·ª• th·ªÉ
            config[feature] = not config[feature]
            flash(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£o tr√¨ cho ph·∫ßn: {feature}", "success")
        else:
            # Toggle to√†n h·ªá th·ªëng n·∫øu kh√¥ng c√≥ ph·∫ßn c·ª• th·ªÉ
            config["all"] = not config.get("all", False)
            flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫£o tr√¨ to√†n b·ªô h·ªá th·ªëng.", "success")

        with open("maintenance_config.json", "w") as f:
            json.dump(config, f, indent=2)

        return redirect("/admin/bao-tri-all")

    is_on = config.get("all", False)
    return render_template("bao_tri_all.html", is_on=is_on, config=config)

# ====== LOGIN / REGISTER / LOGOUT ======
import secrets
from flask import request, render_template, redirect, url_for, session
from datetime import datetime

@app.route("/login", defaults={"rid": None}, methods=["GET", "POST"])
@app.route("/login/<rid>", methods=["GET", "POST"])
def login(rid):
    if request.method == "GET" and rid is None:
        new_rid = secrets.token_urlsafe(6)  
        return redirect(url_for("login", rid=new_rid, message=request.args.get("message")))

    message = request.args.get("message")

    if request.method == "POST":
        username = request.form.get("username", "").strip()
        password = request.form.get("password", "")

        user = User.query.filter_by(username=username).first()

        if user:
            if getattr(user, "is_blocked", False):
                error = ("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng g·ª≠i khi·∫øu n·∫°i t·∫°i "
                         "<a href='/appeal' style='color:#4ea6ff;'>ƒë√¢y</a>.")
                return render_template("login.html", error=error, rid=rid)

            # TODO: n·∫øu d√πng hash m·∫≠t kh·∫©u, thay so s√°nh n√†y b·∫±ng check hash
            if user.password == password:
                if getattr(user, "wants_verification", False) and not getattr(user, "is_verified", False):
                    otp_code = generate_otp()
                    user.otp_code = otp_code
                    send_user_otp_email(user.email, otp_code)
                    session["pending_user"] = username
                    session["otp_sent"] = True
                    db.session.commit()
                    return redirect("/verify-otp")
                user.online = True
                user.last_seen = datetime.utcnow()
                login_user(user)
                session.permanent = True
                session["username"] = user.username
                session["user_id"] = user.user_id          
                session["user_uuid"] = user.user_id         
                session["vip_until_gpt"] = getattr(user, "vip_until_gpt", None)
                session["al_uses"] = 0 
                db.session.commit()
                if getattr(user, "vip_gpt_ai", False):
                    session["just_logged_in"] = True
                return redirect(url_for("home_page"))
        return render_template("login.html", error="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.", rid=rid)
    return render_template("login.html", message=message, rid=rid)

from sqlalchemy.exc import IntegrityError
EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
ADMIN_ALERT_EMAIL = EMAIL_ADDRESS

def normalize_gmail(email):
    email = email.strip().lower()
    if email.endswith("@gmail.com"):
        local, domain = email.split("@")
        local = local.split("+")[0].replace(".", "")
        return f"{local}@{domain}"
    return email

@app.route("/register", defaults={"rid": None}, methods=["GET", "POST"])
@app.route("/register/<rid>", methods=["GET", "POST"])
def register(rid):
    if request.method == "GET" and rid is None:
        new_rid = secrets.token_urlsafe(6)
        return redirect(url_for("register", rid=new_rid))

    if request.method == "POST":
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if ip and ',' in ip:
            ip = ip.split(',')[0].strip()

        username = request.form.get("username", "").strip().lower()
        email = request.form.get("email", "").strip()
        normalized_email = normalize_gmail(email)
        fullname = request.form.get("fullname", "").strip()
        password = request.form.get("password")
        confirm_password = request.form.get("confirm_password")
        ai_personality = request.form.get("ai_personality", "").strip()
        referral_code_used = request.form.get("referral_code", "").strip()
        want_verification = 'want_verification' in request.form
        existing_user = User.query.filter_by(normalized_email=normalized_email).first()
        if existing_user:
            return render_template("register.html", rid=rid, error="Gmail n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o t√†i kho·∫£n!")

        final_personality = ai_personality or "SLV"

        new_user = User(
            username=username,
            password=password,
            fullname=fullname,
            email=email,
            normalized_email=normalized_email,
            is_verified=False,
            wants_verification=want_verification,
            referral_code_used=referral_code_used,
            free_gpt_uses=5,
            ai_personality=final_personality,
            referral_code=generate_unique_referral_code()
        )

        db.session.add(new_user)
        try:
            db.session.commit()
        except IntegrityError:
            db.session.rollback()
            return render_template("register.html", rid=rid, error="Email n√†y ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!")

        # Ghi l·∫°i IP
        count = record_ip(ip)
        if session.get("username") != "admin" and count >= 3:
            message = f"""
<b>C·∫£nh b√°o ƒëƒÉng k√Ω SPAM</b>
üî¢ IP: <code>{ip}</code>
üïí Ng√†y: {datetime.now().strftime('%Y-%m-%d')}</code>
üë§ Username: <code>{username}</code>
üìß Email: <code>{email}</code>
üí• S·ªë l·∫ßn t·∫°o t√†i kho·∫£n: {count} (h·∫°n m·ª©c: 3)
            """
            send_telegram_message(message.strip())
            send_spam_alert_email(ip, username, email, count)

        return redirect(url_for("login", rid=secrets.token_urlsafe(6)))

    return render_template("register.html", rid=rid)

def send_spam_alert_email(ip, username, email, count):
    subject = "‚ö†Ô∏è C·∫£nh b√°o SPAM: IP t·∫°o nhi·ªÅu t√†i kho·∫£n"
    body = f"""
[SPAM PH√ÅT HI·ªÜN]
üî¢ IP: {ip}
üïí Ng√†y: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üë§ Username: {username}
üìß Email: {email}
üí• S·ªë l·∫ßn t·∫°o t√†i kho·∫£n: {count} (h·∫°n m·ª©c: 3)
"""

    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = EMAIL_ADDRESS
    msg["To"] = ADMIN_ALERT_EMAIL

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)
    except Exception:
        pass
@app.route("/random_ai_personality", methods=["POST"])
def random_ai_personality():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"success": False, "message": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    user = User.query.filter_by(user_id=user_id).first()
    if not user:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."})

    from openai_config import AI_PERSONALITIES
    chosen = random.choice(AI_PERSONALITIES)

    user.ai_personality = chosen
    db.session.commit()

    return jsonify({"success": True, "new_ai": chosen})


from models.user import User
from extensions import db

from openai_config import AI_PERSONALITIES
@app.route("/save_reward_info", methods=["POST"])
def save_reward_info():
    if "username" not in session:
        return jsonify(success=False, message="Ch∆∞a ƒëƒÉng nh·∫≠p.")

    data = request.get_json()
    fullname = data.get("fullname", "").strip()
    stk = data.get("stk", "").strip()
    bank = data.get("bank", "").strip()

    if not fullname or not stk or not bank:
        return jsonify(success=False, message="Thi·∫øu th√¥ng tin.")

    user = User.query.filter_by(username=session["username"]).first()
    if not user:
        return jsonify(success=False, message="Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.")

    user.reward_fullname = fullname
    user.reward_stk = stk
    user.reward_bank = bank
    db.session.commit()
    return jsonify(success=True)
def generate_userinfo_slug():
    return str(uuid.uuid4()) 
@app.route("/user-info", methods=["GET"])
def redirect_user_info():
    slug = generate_userinfo_slug()  # uuid
    return redirect(f"/profileSecureGate/{slug}")
# Cho 2 URL d√πng chung 1 handler
@app.route("/profileSecureGate/<slug>", methods=["GET", "POST"])
@app.route("/user-info", methods=["GET", "POST"])
def user_info(slug=None):
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")
    if request.method == "GET" and slug is None:
        new_slug = str(uuid.uuid4())
        return redirect(url_for("user_info", slug=new_slug))

    if request.method == "POST":
        # l·∫•y d·ªØ li·ªáu form v√† c·∫≠p nh·∫≠t
        email = request.form.get("email")
        password = request.form.get("new_password")
        fullname = request.form.get("fullname")
        birthyear = request.form.get("birthyear")
        ai_personality = request.form.get("ai_personality")

        if email: user.email = email
        if password: user.password = password
        if fullname: user.fullname = fullname
        if birthyear: user.birthyear = birthyear

        if ai_personality and user.vip_gpt and user.vip_gpt.startswith("SLV"):
            user.ai_personality = ai_personality

        avatar = request.files.get("avatar")
        if avatar and avatar.filename:
            filename = secure_filename(f"{username}_avatar.png")
            path = os.path.join("static/images/avatars", filename)
            avatar.save(path)
            user.avatar_url = f"/static/images/avatars/{filename}"

        db.session.commit()
        flash("ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", "success")

        # Sau khi l∆∞u, lu√¥n ƒë∆∞a ng∆∞·ªùi d√πng v·ªÅ URL c√≥ slug m·ªõi
        back_slug = slug or str(uuid.uuid4())
        return redirect(url_for("user_info", slug=back_slug))
    
    # request.method == GET v·ªõi slug ƒë√£ c√≥
    return render_template(
        "user_info.html",
        user=user,
        username=user.username,
        now=datetime.now(),
        personalities=AI_PERSONALITIES,
        slug=slug,  # n·∫øu template c√≥ d√πng
    )

@app.route("/user-form-fragment")
def user_form_fragment():
    user = User.query.filter_by(username=session["username"]).first()
    return render_template("user_form.html", user=user, now=datetime.now(), username=user.username)
@app.route("/user-info-popup", methods=["GET"])
def user_info_popup():
    username = session.get("username")
    if not username:
        return "Unauthorized", 403

    user = User.query.filter_by(username=username).first()
    if not user:
        return "User not found", 404

    now = datetime.utcnow()
    current_plan = "Kh√¥ng c√≥"
    days_left = 0

    if user.vip_gpt_ai and user.vip_until_gpt and user.vip_until_gpt > now:
        current_plan = f"SLV ({user.vip_gpt})"
        days_left = (user.vip_until_gpt.date() - now.date()).days
    elif user.vip_ai_lite and user.vip_until_lite and user.vip_until_lite > now:
        current_plan = "Lite"
        days_left = (user.vip_until_lite.date() - now.date()).days

    return render_template(
        "user_info_popup.html",
        user=user,
        personalities=AI_PERSONALITIES,
        current_plan=current_plan,
        days_left=days_left
    )

@app.route("/update_user_info", methods=["POST"])
def update_user_info():
    username = session.get("username")
    if not username:
        return jsonify({"success": False, "error": "Ch∆∞a ƒëƒÉng nh·∫≠p"}), 401

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y user"}), 404

    data = request.get_json()
    email = data.get("email")
    password = data.get("password")
    fullname = data.get("fullname")
    ai_personality = data.get("ai_personality")

    if email: user.email = email
    if password: user.password = password
    if fullname: user.fullname = fullname

    # Ch·ªâ cho ƒë·ªïi t√≠nh c√°ch AI n·∫øu user ƒëang c√≥ g√≥i SLV
    if ai_personality and user.vip_gpt and user.vip_gpt.startswith("SLV"):
        user.ai_personality = ai_personality

    db.session.commit()
    return jsonify({"success": True})

def get_current_user():
    username = session.get("username")
    if not username:
        return None
    return User.query.filter_by(username=username).first()
@app.route("/get_chat_history")
def get_chat_history():
    session_id = request.args.get("session_id")
    user = get_current_user()

    if not user or not session_id:
        return jsonify({"error": "Unauthorized"}), 401

    # Tr·∫£ to√†n b·ªô l·ªãch s·ª≠ theo ƒë√∫ng th·ª© t·ª±
    all_messages = ChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=session_id
    ).order_by(ChatHistory.timestamp.asc()).all()

    result = [
    {
        "role": m.role,
        "content": m.content,
        "image_url": m.image_url,
        "reply_to": m.reply_to  # ‚úÖ TH√äM D√íNG N√ÄY
    }
    for m in all_messages
]


    return jsonify({
        "history": result,
        "too_long": len(all_messages) > 50  # Optional: c·∫£nh b√°o n·∫øu d√†i
    })
MAX_CHAT_SESSIONS = 70


@app.route("/save_chat", methods=["POST"])
def save_chat():
    user_id = session.get("user_id") or session.get("anonymous_id")
    session_id = session.get("chat_session_id")
    data = request.get_json()
    custom_title = data.get("title", "").strip()

    if not user_id or not session_id:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y phi√™n chat"})

    # ‚ö†Ô∏è Gi·ªõi h·∫°n 70 ƒëo·∫°n chat ƒë√£ l∆∞u
    MAX_SAVED_CHATS = 70
    saved_count = SavedChat.query.filter_by(user_id=user_id).count()
    if saved_count >= MAX_SAVED_CHATS:
        return jsonify({
            "success": False,
            "error": f"B·∫°n ch·ªâ ƒë∆∞·ª£c l∆∞u t·ªëi ƒëa {MAX_SAVED_CHATS} ƒëo·∫°n chat. Vui l√≤ng x√≥a b·ªõt ƒë·ªÉ l∆∞u m·ªõi."
        })

    # üì• L·∫•y l·ªãch s·ª≠ chat hi·ªán t·∫°i
    history = ChatHistory.query.filter_by(
        user_id=user_id,
        session_id=session_id
    ).order_by(ChatHistory.timestamp.asc()).all()

    if not history:
        return jsonify({"success": False, "error": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ l∆∞u"})

    # üîÑ Chuy·ªÉn th√†nh format JSON
    messages = []
    for m in history:
        raw = m.image_url
        parsed_urls = []

        if raw:
            try:
                parsed_urls = json.loads(raw)
                if not isinstance(parsed_urls, list):
                    parsed_urls = [parsed_urls]
            except:
                parsed_urls = [raw.strip().strip('"').lstrip("/")]

        messages.append({
            "role": m.role,
            "content": m.content,
            "image_url": parsed_urls
        })

    # üíæ L∆∞u v√†o b·∫£ng SavedChat
    saved = SavedChat(
        id=str(uuid.uuid4()),
        user_id=user_id,
        session_id=session_id,
        title=custom_title or f"ƒêo·∫°n chat l√∫c {datetime.now().strftime('%H:%M %d/%m/%Y')}",
        messages=messages
    )
    db.session.add(saved)

    # ‚úÖ ƒê√°nh d·∫•u ƒëo·∫°n chat n√†y l√† ƒë√£ l∆∞u
    for m in history:
        m.is_saved = True

    db.session.commit()

    return jsonify({"success": True})

@app.route("/saved_chats", methods=["GET"])
def get_saved_chats():
    user_id = session.get("user_id") or session.get("anonymous_id")
    if not user_id:
        return jsonify({"success": False, "data": []})

    # ‚ùå B·ªè gi·ªõi h·∫°n limit(10) ƒë·ªÉ tr·∫£ v·ªÅ to√†n b·ªô
    saved = SavedChat.query.filter_by(user_id=user_id)\
        .order_by(SavedChat.created_at.desc())\
        .all()

    return jsonify({
        "success": True,
        "data": [
            {
                "id": chat.id,
                "title": chat.title,
                "created_at": chat.created_at.strftime("%d/%m/%Y"),
            }
            for chat in saved
        ]
    })

def strip_dangerous_tags(html):
    if not html:
        return ""
    # Escape c√°c th·∫ª nguy hi·ªÉm
    tags = ["button", "input", "svg", "form", "style", "script", "iframe", "object", "embed", "link"]
    for tag in tags:
        html = re.sub(f"<{tag}([^>]*)>", r"&lt;" + tag + r"\1&gt;", html, flags=re.IGNORECASE)
        html = re.sub(f"</{tag}>", r"&lt;/" + tag + r"&gt;", html, flags=re.IGNORECASE)
    return html
def remove_ai_image_note(html):
    if not html:
        return ""
    # Xo√° to√†n b·ªô <svg>...</svg>
    html = re.sub(r"<svg.*?</svg>", "", html, flags=re.DOTALL|re.IGNORECASE)
    # Xo√° lu√¥n d√≤ng 'AI v·ª´a t·∫°o ·∫£nh n√†y'
    html = re.sub(r"AI v·ª´a t·∫°o ·∫£nh n√†y", "", html, flags=re.IGNORECASE)
    return html.strip()
@app.route("/shared_chat/<chat_id>")
def shared_chat(chat_id):
    chat = db.session.get(SavedChat, chat_id)
    if not chat:
        return abort(404)

    def clean_image_url(urls):
        if not urls:
            return []
        if isinstance(urls, str):
            try:
                urls = json.loads(urls)
                if not isinstance(urls, list):
                    urls = [urls]
            except:
                urls = [urls]
        result = []
        for url in urls:
            if isinstance(url, str) and url.strip() != "":
                url = url.strip().strip('"').lstrip("/")
                result.append(f"/{url}")
        return result

    for msg in chat.messages:
        msg["image_url"] = clean_image_url(msg.get("image_url"))
        msg["content"] = remove_ai_image_note(msg.get("content", ""))
        msg["content"] = strip_dangerous_tags(msg.get("content", ""))


    return render_template("shared_chat.html", chat=chat, user_id=chat.user_id)


@app.route("/saved_chat/<chat_id>")
def view_saved_chat(chat_id):
    user_id = session.get("user_id") or session.get("anonymous_id")
    saved = SavedChat.query.filter_by(id=chat_id, user_id=user_id).first()
    if not saved:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y ƒëo·∫°n chat."})

    def clean_image_url(urls):
        if not urls:
            return []
        if isinstance(urls, str):
            try:
                urls = json.loads(urls)
                if not isinstance(urls, list):
                    urls = [urls]
            except:
                urls = [urls]
        result = []
        for url in urls:
            if isinstance(url, str) and url.strip() != "":
                url = url.strip().strip('"').lstrip("/")
                result.append(f"/{url}")
        return result

    cleaned_messages = []
    for msg in saved.messages:
        msg["image_url"] = clean_image_url(msg.get("image_url"))
        cleaned_messages.append(msg)

    return jsonify({
        "success": True,
        "title": saved.title,
        "created_at": saved.created_at.strftime("%Y-%m-%d"),
        "messages": cleaned_messages
    })

@app.route("/delete_saved_chat/<chat_id>", methods=["DELETE"])
def delete_saved_chat(chat_id):
    try:
        user_id = session.get("user_id")
        if not user_id:
            return jsonify({"success": False, "error": "Kh√¥ng c√≥ user_id trong session"})

        # üîç T√¨m ƒëo·∫°n chat ƒë√£ l∆∞u
        saved = SavedChat.query.filter_by(id=chat_id, user_id=user_id).first()
        if not saved:
            return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y ƒëo·∫°n chat ƒë√£ l∆∞u"})

        # üßπ B1: X√≥a h·∫≥n c√°c tin nh·∫Øn trong ChatHistory thu·ªôc session n√†y
        ChatHistory.query.filter_by(user_id=user_id, session_id=saved.session_id).delete()

        # üßπ B2: X√≥a c√°c ·∫£nh thu·ªôc ƒëo·∫°n chat n√†y
        upload_folder = os.path.abspath(os.path.join("static", "images", "uploads", user_id))
        print("[DEBUG] Th∆∞ m·ª•c uploads:", upload_folder)

        for msg in saved.messages:
            raw_urls = msg.get("image_url", [])

            if isinstance(raw_urls, str):
                try:
                    raw_urls = json.loads(raw_urls)
                except:
                    raw_urls = [raw_urls]
            elif not isinstance(raw_urls, list):
                raw_urls = [raw_urls]

            for url in raw_urls:
                try:
                    relative_path = url.replace("/static/", "", 1)
                    abs_path = os.path.abspath(os.path.join("static", relative_path))

                    if abs_path.startswith(upload_folder) and os.path.isfile(abs_path):
                        print("[üßπ] ƒêang x√≥a ·∫£nh:", abs_path)
                        os.remove(abs_path)
                    else:
                        print(f"‚ùå Kh√¥ng x√≥a ·∫£nh: {abs_path} (kh√¥ng ƒë√∫ng th∆∞ m·ª•c ho·∫∑c kh√¥ng t·ªìn t·∫°i)")
                except Exception as e:
                    print(f"‚ùå Kh√¥ng th·ªÉ x√≥a ·∫£nh '{url}':", e)

        # üßπ B3: X√≥a kh·ªèi b·∫£ng SavedChat
        db.session.delete(saved)
        db.session.commit()

        return jsonify({"success": True})

    except Exception as e:
        return jsonify({"success": False, "error": str(e)})



#X√ìA AVTR
@app.route("/user-info/delete-avatar", methods=["POST"])
def delete_avatar():
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    if user.avatar_url and user.avatar_url != "/static/logos/logo.png":
        try:
            os.remove(user.avatar_url.replace("/", os.sep)[1:])
        except:
            pass
    user.avatar_url = "/static/logos/logo.png"

    db.session.commit()

    flash("·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ m·∫∑c ƒë·ªãnh!", "info")
    return redirect("/user-info")

#========ROUTE X√ÅC TH·ª∞C T√ÄI KHO·∫¢N==========#
@app.route("/verify-otp", methods=["GET", "POST"])
def verify_otp():
    username = session.get("pending_user") or session.get("username")
    if not username:
        return redirect(url_for("login"))

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect(url_for("login"))

    if user.is_verified:
        return redirect(url_for("home_page"))

    # ‚úÖ GET: ch·ªâ hi·ªÉn th·ªã form, kh√¥ng g·ª≠i l·∫°i OTP n·ªØa
    if request.method == "GET":
        return render_template(
            "verify_otp.html",
            username=username,
            method="email",
            error="",
            user=user
        )

    # ‚úÖ POST: x·ª≠ l√Ω OTP
    if request.method == "POST":
        otp_input = request.form.get("otp")
        if otp_input == user.otp_code:
            user.is_verified = True
            user.otp_code = None
            user.wants_verification = True

            if user.email_temp and user.email_temp != user.email:
                user.email = user.email_temp
                user.email_temp = None

            if (user.free_gpt_uses or 0) <= 5:
                user.free_gpt_uses = (user.free_gpt_uses or 0) + 10

            db.session.commit()

            session["username"] = username
            session["user_id"] = user.user_id
            session["is_verified"] = True
            session.pop("pending_user", None)
            session.pop("otp_sent", None)

            for key in ["chat_history", "chat_ai_lite", "chat_ai_lite_history"]:
                session.pop(key, None)

            session["just_verified"] = True
            session.modified = True

            return redirect(url_for("home_page"))

        return render_template(
            "verify_otp.html",
            username=username,
            method="email",
            error="‚ùå Sai m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.",
            user=user
        )
    return render_template(
        "verify_otp.html",
        username=username,
        method="email",
        error="",
        user=user
    )

@app.route("/resend-otp", methods=["POST"])
def resend_otp():
    username = session.get("pending_user") or session.get("username")
    if not username:
        return Response(json.dumps({
            "status": "error",
            "message": "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."
        }, ensure_ascii=False), content_type="application/json")

    user = User.query.filter_by(username=username).first()
    if not user:
        return Response(json.dumps({
            "status": "error",
            "message": "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."
        }, ensure_ascii=False), content_type="application/json")

    email = user.email
    otp = str(random.randint(100000, 999999))
    user.otp_code = otp
    db.session.commit()
    success = send_user_otp_email(email, otp)

    if success:
        return Response(json.dumps({
            "status": "ok",
            "message": "‚úÖ ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c qua email."
        }, ensure_ascii=False), content_type="application/json")
    else:
        return Response(json.dumps({
            "status": "error",
            "message": "‚ùå G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau."
        }, ensure_ascii=False), content_type="application/json")

@app.route("/logout")
def logout():
    username = session.get("username")

    if username:
        user = User.query.filter_by(username=username).first()
        if user:
            user.online = False
            db.session.commit()

    if session.get("admin"):
        session.pop("admin", None)
        return redirect("/admin_login")

    session.pop("username", None)
    session.pop("user_id", None)
    return redirect("/login")

#KH√îI PH·ª§C T√ÄI KHO·∫¢N 
def generate_forgot_pass_slug():
    return str(uuid.uuid4())
@app.route("/forgot-password", methods=["GET"])
def redirect_forgot_password():
    slug = generate_forgot_pass_slug()
    return redirect(f"/forgotPassBridge/{slug}")
@app.route("/forgotPassBridge/<slug>", methods=["GET", "POST"])
def forgot_password(slug):
    if request.method == "POST":
        input_text = request.form["username"].strip().lower()

        # ‚úÖ T√¨m user theo username ho·∫∑c email
        user = User.query.filter(
            (User.username.ilike(input_text)) | (User.email.ilike(input_text))
        ).first()

        if not user:
            return render_template("forgot_password.html", error="T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")

        if not user.is_verified:
            return render_template("forgot_password.html", error="Ch·ª©c nƒÉng n√†y ch·ªâ h·ªó tr·ª£ t√†i kho·∫£n ƒë√£ x√°c th·ª±c.")

        # ‚úÖ T·∫°o v√† g·ª≠i m√£ OTP
        otp_code = generate_otp()
        send_user_otp_email(user.email, otp_code)

        # ‚úÖ Ghi tr·ª±c ti·∫øp v√†o user.otp_code
        user.otp_code = otp_code
        db.session.commit()

        # ‚úÖ L∆∞u session
        session["reset_user"] = user.username
        return redirect("/reset-password")

    return render_template("forgot_password.html")

@app.route("/change-email", methods=["GET", "POST"])
def change_email():
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    avatar_filename = user.avatar_filename or "default.png"
    avatar_url = url_for("static", filename=f"avatars/{avatar_filename}")

    if not user.is_verified and not user.can_change_email_once:
        flash("T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a x√°c th·ª±c v√† ƒë√£ ƒë·ªïi email 1 l·∫ßn. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.", "danger")
        return redirect("/user-info")

    if request.method == "POST":
        new_email = request.form.get("new_email", "").strip()

        if not new_email or "@" not in new_email:
            flash("Email kh√¥ng h·ª£p l·ªá!", "danger")
            return redirect("/change-email")

        user.email_temp = new_email
        user.is_verified = False
        user.otp_code = generate_otp()

        db.session.commit()

        send_otp_email(new_email, user.otp_code)

        flash("ƒê√£ g·ª≠i m√£ x√°c nh·∫≠n ƒë·∫øn email m·ªõi! Vui l√≤ng ki·ªÉm tra v√† x√°c th·ª±c l·∫°i.", "info")
        return redirect("/verify-otp")

    return render_template("change_email.html", avatar_url=avatar_url)

@app.route("/reset-password", methods=["GET", "POST"])
def reset_password():
    session_username = session.get("reset_user")
    if not session_username:
        return redirect("/forgot-password")

    session_username = session_username.strip().lower()

    if request.method == "POST":
        input_username = request.form["username"].strip().lower()
        otp = request.form["otp"].strip()
        new_password = request.form["new_password"]
        confirm = request.form["confirm_password"]

        user = User.query.filter_by(username=session_username).first()
        avatar_url = user.avatar_url if user and user.avatar_url else "/static/logos/logo.png"

        if input_username != session_username:
            return render_template("reset_password.html", error="‚ö†Ô∏è T√™n t√†i kho·∫£n kh√¥ng kh·ªõp.", avatar_url=avatar_url)

        if not user or user.otp_code != otp:
            return render_template("reset_password.html", error="‚ö†Ô∏è M√£ OTP kh√¥ng ƒë√∫ng.", avatar_url=avatar_url)

        if new_password != confirm:
            return render_template("reset_password.html", error="‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.", avatar_url=avatar_url)

        if len(new_password) < 8:
            return render_template("reset_password.html", error="‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i t·ª´ 8 k√Ω t·ª± tr·ªü l√™n.", avatar_url=avatar_url)

        # ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† xo√° OTP
        user.password = new_password
        user.otp_code = None
        user.online = True
        db.session.commit()

        session.pop("reset_user", None)

        # ‚úÖ T·ª± ƒëƒÉng nh·∫≠p l·∫°i
        session["username"] = user.username
        session["user_id"] = user.user_id
        session["vip_until_gpt"] = user.vip_until_gpt
        session["vip_ai_lite"] = user.vip_ai_lite
        session["vip_until_lite"] = user.vip_until_lite or ""
        session["al_uses"] = 0

        return redirect("/")

    # ‚úÖ Tr∆∞·ªùng h·ª£p GET: ch·ªâ t√¨m user ƒë·ªÉ l·∫•y avatar
    user = User.query.filter_by(username=session_username).first()
    avatar_url = user.avatar_url if user and user.avatar_url else "/static/logos/logo.png"
    return render_template("reset_password.html", avatar_url=avatar_url)

def generate_change_pass_slug():
    return str(uuid.uuid4())
@app.route("/change-password", methods=["GET"])
def redirect_change_password():
    slug = generate_change_pass_slug()
    return redirect(f"/changePassX7vault/{slug}")
@app.route("/changePassX7vault/<slug>", methods=["GET", "POST"])
def change_password(slug):
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")
    avatar_url = user.avatar_url or "/static/logos/logo.png"
    if request.method == "POST":
     
        current_password = request.form.get("current_password")
        new_password = request.form.get("new_password")
        confirm_password = request.form.get("confirm_password")

        if user.password != current_password:
            return render_template("change_password.html", error="‚ö†Ô∏è M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.")

        if new_password != confirm_password:
            return render_template("change_password.html", error="‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.")

        if len(new_password) < 8:
            return render_template("change_password.html", error="‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i t·ª´ 8 k√Ω t·ª± tr·ªü l√™n.")

        user.password = new_password
        db.session.commit()

        return redirect("/")

    return render_template("change_password.html", avatar_url=avatar_url)



# TRANG CH·ª¶
from sqlalchemy import distinct
from models import Message, User  # ƒë·∫£m b·∫£o ƒë√£ import model Message

@app.route("/")
def home_page():
    if is_maintenance("home"):
        return render_template("maintenance.html")

    username = session.get("username")

    # N·∫øu ch∆∞a login, v·∫´n cho hi·ªÉn th·ªã trang ch·ªß (home), nh∆∞ng d∆∞·ªõi d·∫°ng "kh√°ch"
    if not username:
        return render_template("app.html", user=None)

    user = User.query.filter_by(username=username).first()
    if not user:
        if not session.get("reloading_after_restore"):
            session["reloading_after_restore"] = True
            time.sleep(0.3)
            return redirect("/")
        else:
            session.pop("reloading_after_restore", None)
            return render_template("login.html", error="‚ö†Ô∏è D·ªØ li·ªáu t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")

    if user.is_blocked:
        session.clear()
        return render_template("login.html", error="üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng g·ª≠i khi·∫øu n·∫°i t·∫°i <a href='/appeal' style='color:#4ea6ff;'>ƒë√¢y</a>.")

    session.pop("reloading_after_restore", None)
    session.pop("just_logged_in", None)

    return render_template("app.html", user=user)



#T·ªîNG QU√ÅT
from flask import render_template, request, session, redirect, abort
login_attempts = {}

@app.route("/solverviet_control_x2025")
@admin_only
def admin_panel():
    feedback_count = count_feedback_entries()
    return render_template("admin.html",feedback_count=feedback_count)
@app.route("/admin/check_tu", methods=["POST"])
@admin_only
def admin_check_tu_trong_tu_dien():
    data = request.get_json()
    tu = data.get("tu", "").strip()

    def normalize(text):
        return unicodedata.normalize("NFC", text.lower().strip())

    try:
        with open("viet_dictionary.json", "r", encoding="utf-8") as f:
            dic = json.load(f)

        normalized_keys = {normalize(k): k for k in dic.keys()}
        tu_norm = normalize(tu)
        exists = tu_norm in normalized_keys

        return jsonify({"exists": exists})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def count_feedback_entries():
    try:
        with open("feedback_log.txt", "r", encoding="utf-8") as f:
            blocks = f.read().split("---\n\n")
            return sum(1 for block in blocks if block.strip())
    except FileNotFoundError:
        return 0
import pyotp
from flask import Flask, request, session, redirect, render_template

# ---- Route 1: admin_login - ki·ªÉm tra 4 tr∆∞·ªùng ----
@app.route("/admin_login", methods=["GET", "POST"])
def admin_login():
    ip = request.remote_addr
    login_attempts.setdefault(ip, 0)

    if login_attempts[ip] >= 5:
        return "‚ö†Ô∏è You have entered incorrectly too many times. Please try again later.", 429

    if request.method == "POST":
        username = request.form.get("username", "")
        password = request.form.get("password", "")
        code1 = request.form.get("backdoor_code", "")
        code2 = request.form.get("backdoor_code2", "")

        ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "")
        ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "")
        BACKDOOR_CODE = os.getenv("BACKDOOR_CODE", "")
        BACKDOOR_CODE2 = os.getenv("BACKDOOR_CODE2", "")

        if (username == ADMIN_USERNAME and password == ADMIN_PASSWORD and
            code1 == BACKDOOR_CODE and code2 == BACKDOOR_CODE2):
            session["admin_otp_ready"] = True
            session["admin_last_active"] = time.time()
            return "OK"

        else:
            login_attempts[ip] += 1
            return "‚ùå Invalid credentials.", 403

    return render_template("admin_login.html")

@app.route("/admin_prepare_secret")
def admin_prepare_secret():
    hint_map = {
        "ADMIN_SECRET_CODE_1": "üî∫",
        "ADMIN_SECRET_CODE_2": "üåô",
        "ADMIN_SECRET_CODE_3": "üí°",
        "ADMIN_SECRET_CODE_4": "üîí",
        "ADMIN_SECRET_CODE_5": "üß†",
    }

    pool = []
    for key, hint in hint_map.items():
        val = os.getenv(key)
        if val:
            pool.append({"code": val, "hint": hint})

    if not pool:
        return jsonify({"error": "No codes found"}), 500

    selected = random.choice(pool)
    session["expected_secret_code"] = selected["code"]
    return jsonify(hint=selected["hint"])

@app.route("/admin_secret_entry", methods=["POST"])
def admin_secret_entry():
    data = request.get_json()
    code_input = data.get("code", "").strip()
    expected = session.get("expected_secret_code", "")

    if code_input == expected:
        session["is_admin"] = True
        session["admin_last_active"] = time.time()
        return jsonify(success=True)
    return jsonify(success=False)

@app.route("/admin_2fa", methods=["POST"])
def admin_2fa():
    if not session.get("admin_otp_ready"):
        return "Phi√™n x√°c th·ª±c kh√¥ng h·ª£p l·ªá.", 403

    code = request.form.get("otp", "").strip()
    secret = os.getenv("ADMIN_2FA_SECRET")

    if not secret:
        return "‚ùå SECRET kh√¥ng t·ªìn t·∫°i", 500

    totp = pyotp.TOTP(secret)

    if totp.verify(code, valid_window=1):
        session.pop("admin_otp_ready", None)
        session["is_admin"] = True
        return redirect("/solverviet_control_x2025")
    else:
        return "‚ùå M√£ x√°c th·ª±c sai", 403

@app.route("/verify_user_info", methods=["POST"])
def verify_user_info():
    data = request.get_json()
    username = data.get("username", "").strip()
    user_id = data.get("user_id", "").strip()
    user = User.query.filter_by(username=username, user_id=user_id).first()
    return jsonify({"valid": bool(user)})

def send_upgrade_email(to_email, username, package, amount, method, note, created_at, txn_id):
    from flask import url_for
    import smtplib
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText

    email_user = os.getenv("EMAIL_ADDRESS")
    email_pass = os.getenv("EMAIL_PASSWORD")
    BASE_URL = os.getenv("BASE_URL", "http://127.0.0.1:5000")

    approve_path = url_for('admin_review') + f"?txn_id={txn_id}"
    approve_link = "https://solverviet.com/admin/review"
    msg = MIMEMultipart()
    msg['From'] = email_user
    msg['To'] = to_email
    msg['Subject'] = " Y√™u c·∫ßu n√¢ng c·∫•p g√≥i m·ªõi t·ª´ ng∆∞·ªùi d√πng"

    body = f"""
    <h3> Y√™u c·∫ßu n√¢ng c·∫•p m·ªõi</h3>
    <p><b> User:</b> {username}</p>
    <p><b> G√≥i:</b> {package} ({amount})</p>
    <p><b> Ph∆∞∆°ng th·ª©c:</b> {method}</p>
    <p><b> Ghi ch√∫:</b> {note}</p>
    <p><b> Th·ªùi gian:</b> {created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
    <br>
    <p><b>Link duy·ªát:</b> <a href="{approve_link}" target="_blank">{approve_link}</a></p>
    <p>Ho·∫∑c copy th·ªß c√¥ng: {approve_link}</p>
    """

    msg.attach(MIMEText(body, 'html'))

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(email_user, email_pass)
            server.send_message(msg)
    except Exception:
        pass

@app.route("/upgradeWaguri_9d7s2x4kP1tY0mVn6cQ8hR5eB3aZxLw_fJ7k", methods=["GET", "POST"])
def upgrade():
    username = session.get("username")
    if not username:
        return redirect(url_for("login"))

    user = User.query.filter_by(username=username).first()
    if not user:
        return render_template("upgrade.html", error="‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.")

    if request.method == "POST":
        package = request.form["package"]
        note = request.form["note"]
        referral_code_input = request.form.get("referral_code", "").strip().upper()

        # ‚úÖ ∆Øu ti√™n m√£ ƒë√£ l∆∞u, n·∫øu ch∆∞a c√≥ th√¨ d√πng m√£ v·ª´a nh·∫≠p
        referral_code = user.referral_code_used or referral_code_input

        # ‚úÖ N·∫øu user ch∆∞a t·ª´ng nh·∫≠p m√£ ‚Üí l∆∞u l·∫°i vƒ©nh vi·ªÖn
        if referral_code and not user.referral_code_used:
            user.referral_code_used = referral_code

        # ‚úÖ G·∫Øn m√£ v√†o ghi ch√∫ ƒë·ªÉ admin d·ªÖ nh√¨n
        if referral_code:
            note += f" | M√£ gi·ªõi thi·ªáu: {referral_code}"

        method = request.form.get("method", "Kh√¥ng r√µ")

        if not note.strip():
            return render_template("upgrade.html", error="‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ giao d·ªãch ho·∫∑c ghi ch√∫.")

        now = now_vn()
        has_gpt = user.vip_until_gpt and user.vip_until_gpt > now
        has_lite = user.vip_until_lite and user.vip_until_lite > now

        if package.startswith("vip_gpt") and has_lite:
            return render_template("upgrade.html", error="üö´ B·∫°n ƒëang d√πng g√≥i AI Lite. Kh√¥ng th·ªÉ mua th√™m g√≥i GPT c√πng l√∫c.")
        if package == "vip_ai_lite" and has_gpt:
            return render_template("upgrade.html", error="üö´ B·∫°n ƒëang d√πng g√≥i GPT. Kh√¥ng th·ªÉ mua th√™m g√≥i AI Lite c√πng l√∫c.")

        # ‚úÖ T·∫°o ID giao d·ªãch
        created_at = now
        txn_id = f"txn_{int(now.timestamp())}_{random.randint(1000,9999)}"
        session["last_txn_id"] = txn_id

        package_display = {
            "vip_gpt_5d": "49K",
            "vip_gpt_15d": "109K",
            "vip_gpt_30d": "149K",
            "vip_ai_lite": "25K"
        }
        amount = package_display.get(package, "Kh√¥ng r√µ")

        # ‚úÖ L∆∞u giao d·ªãch
        txn = Transaction(
            txn_id=txn_id,
            username=username,
            amount=amount,
            package=package,
            method=method,
            note=note,
            referral_code=referral_code,
            status="pending",
            created_at=created_at
        )
        db.session.add(txn)
        db.session.commit()  # ‚ö†Ô∏è commit c·∫£ giao d·ªãch v√† c·∫≠p nh·∫≠t m√£ gi·ªõi thi·ªáu

        # ‚úÖ G·ª≠i email cho admin
        try:
            send_upgrade_email(
                to_email=os.getenv("ADMIN_EMAIL"),
                username=username,
                package=package,
                amount=amount,
                method=method,
                note=note,
                created_at=created_at,
                txn_id=txn_id 
            )
        except Exception as e:
            pass
        try:
            send_telegram_message(
                f"üîî <b>Y√™u c·∫ßu n√¢ng c·∫•p m·ªõi</b>\n"
                f"üë§ User: <code>{username}</code>\n"
                f"üí≥ G√≥i: {package} ({amount})\n"
                f"üè¶ Ph∆∞∆°ng th·ª©c: {method}\n"
                f"üìù Ghi ch√∫: <code>{note}</code>\n"
                f"üïí Th·ªùi gian: {created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚û°Ô∏è V√†o trang admin ƒë·ªÉ duy·ªát: {url_for('admin_review', _external=True)}"
            )
        except:
            pass

        return render_template(
            "upgrade.html",
            success=True,
            txn_id=txn_id,
            flash_message="‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n! B·∫°n s·∫Ω ƒë∆∞·ª£c duy·ªát trong v√≤ng 5 ph√∫t."
        )
    display_name = user.fullname if user and user.fullname else username
    now = now_vn()
    vip_gpt_active = user.vip_until_gpt and user.vip_until_gpt > now
    vip_lite_active = user.vip_until_lite and user.vip_until_lite > now

    return render_template(
        "upgrade.html",
        fullname=display_name,
        username=username,
        user_id=user.user_id if user else "",
        vip_gpt_active=vip_gpt_active,
        vip_lite_active=vip_lite_active,
        user=user
    )
from flask import jsonify
import logging
log = logging.getLogger('werkzeug')

@app.route("/check_status")
def check_status():
    log.setLevel(logging.ERROR) 
    txn_id = session.get("last_txn_id")
    if not txn_id:
        return jsonify({"status": "none"})
    from models.transaction import Transaction
    txn = Transaction.query.filter_by(txn_id=txn_id).first()
    if txn:
        return jsonify({
            "status": txn.status,
            "package": txn.package,
            "method": txn.method,
            "created_at": txn.created_at.strftime("%Y-%m-%d %H:%M:%S")
        })
    else:
        return jsonify({"status": "not_found"})

def grant_vip(username, package, method=""):
    user = User.query.filter_by(username=username).first()
    if not user:
        return " Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i."

    now = datetime.utcnow()
    message = " G√≥i ƒë√£ ƒë∆∞·ª£c c·∫•p th√†nh c√¥ng!"

    gpt_vip_until = user.vip_until_gpt or now
    lite_vip_until = user.vip_until_lite or now

    if package in ["vip_gpt_5d", "vip_gpt_15d", "vip_gpt_30d"]:
        if lite_vip_until > now:
            return "B·∫°n ƒëang c√≥ g√≥i Lite. Kh√¥ng th·ªÉ mua g√≥i SLV. Vui l√≤ng ƒë·ª£i h·∫øt h·∫°n ho·∫∑c li√™n h·ªá nh√† ph√°t tri·ªÉn."
        days_map = {
            "vip_gpt_5d": (5, "5day"),
            "vip_gpt_15d": (15, "15day"),
            "vip_gpt_30d": (30, "30day")
        }

        duration, gpt_type = days_map[package]

        user.vip_gpt_ai = True
        user.vip_gpt = gpt_type
        new_vip = (now + timedelta(days=duration)).replace(hour=23, minute=59, second=59, microsecond=0)
        user.vip_until_gpt = new_vip

        if gpt_type == "5day":
            user.gpt_usage_today = 0
            user.gpt_usage_date = now.strftime("%Y-%m-%d")
            user.gpt_unlimited = False

        user.vip_until_lite = None
        user.vip_ai_lite = None
        user.vip_lite_daily_limit = None
        user.lite_usage = None
        user.lite_date = None
    elif package == "vip_ai_lite":
        if gpt_vip_until > now:
            return "B·∫°n ƒëang c√≥ g√≥i SLV. Kh√¥ng th·ªÉ mua g√≥i Lite. Vui l√≤ng ƒë·ª£i h·∫øt h·∫°n ho·∫∑c li√™n h·ªá nh√† ph√°t tri·ªÉn."

        # ‚úÖ Lu√¥n c·∫•p g√≥i Lite m·ªõi n·∫øu h·ª£p l·ªá
        new_vip = (now + timedelta(days=7)).replace(hour=23, minute=59, second=59, microsecond=0)
        user.vip_ai_lite = True
        user.vip_until_lite = new_vip
        user.vip_lite_daily_limit = 50
        user.lite_usage = 0
        user.lite_date = now.strftime("%Y-%m-%d")
    else:
        return "G√≥i kh√¥ng h·ª£p l·ªá."

    try:
        db.session.commit()
        return message
    except Exception as e:
        db.session.rollback()
        return " L·ªói khi l∆∞u d·ªØ li·ªáu."


def review_authenticated_only(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('review_authenticated'):
            return redirect('/admin/review/auth')
        return f(*args, **kwargs)
    return decorated_function
import os, smtplib, time
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import pyotp
from flask import session, redirect, request, render_template, abort, url_for
EMAIL_USER = os.getenv("EMAIL_ADDRESS")      
EMAIL_PASS = os.getenv("EMAIL_PASSWORD")   
def send_payment_success_email(to_email: str, username: str, user_id: str, plan_name: str,
                               amount: str, txn_id: str,
                               effective_at: datetime, expire_at: datetime):
    if not (EMAIL_USER and EMAIL_PASS):
        raise RuntimeError("Missing EMAIL_ADDRESS/EMAIL_PASSWORD")

    subject = f"Thanh to√°n th√†nh c√¥ng ‚Ä¢ {plan_name} ‚Ä¢ SolverViet"
    body = f"""
    <div style="font-family:Segoe UI,Arial,sans-serif;color:#111;line-height:1.6">
      <h2 style="margin:0 0 8px;color:#0ea5e9;">SolverViet</h2>
      <p><b>Xin ch√†o {username}</b> (ID: {user_id}),</p>
      <p>Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng.</p>

      <div style="border:1px solid #eee;border-radius:10px;padding:14px;margin:12px 0;background:#fafafa">
        <p style="margin:6px 0;"><b>G√≥i:</b> {plan_name} ({amount})</p>
        <p style="margin:6px 0;"><b>M√£ giao d·ªãch:</b> {txn_id}</p>
        <p style="margin:6px 0;"><b>Ng√†y hi·ªáu l·ª±c:</b> {effective_at.strftime("%d/%m/%Y")}</p>
        <p style="margin:6px 0;"><b>Ng√†y h·∫øt h·∫°n:</b> {expire_at.strftime("%d/%m/%Y")}</p>
      </div>

      <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa SolverViet! üíô</p>
      <hr style="margin:20px 0;">

      <h3 style="color:#0ea5e9;">English Version</h3>
      <p><b>Hello {username}</b> (ID: {user_id}),</p>
      <p>Your transaction has been successfully approved.</p>

      <div style="border:1px solid #eee;border-radius:10px;padding:14px;margin:12px 0;background:#fafafa">
        <p style="margin:6px 0;"><b>Plan:</b> {plan_name} ({amount})</p>
        <p style="margin:6px 0;"><b>Transaction ID:</b> {txn_id}</p>
        <p style="margin:6px 0;"><b>Effective Date:</b> {effective_at.strftime("%d/%m/%Y")}</p>
        <p style="margin:6px 0;"><b>Expiry Date:</b> {expire_at.strftime("%d/%m/%Y")}</p>
      </div>

      <p>Thank you for choosing SolverViet! üíô</p>
    </div>
    """

    msg = MIMEMultipart()
    msg["From"] = EMAIL_USER
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "html"))

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(EMAIL_USER, EMAIL_PASS)
        server.send_message(msg)
import os
import pyotp
import time
from flask import session, redirect, request, render_template
@app.route("/admin/review", methods=["GET", "POST"])
def admin_review():
    if request.method == "POST":
        code = request.form.get("code")
        secret = os.getenv("ADMIN_2FA_SECRET")
        if not secret:
            return render_template("login.html", error="System validation failed. Contact administrator for access.")
        totp = pyotp.TOTP(secret)
        if totp.verify(code):
            session['review_authenticated'] = True
            session['review_last_active'] = time.time()
        else:
            abort(403)

    if (not session.get("review_authenticated")
        or time.time() - session.get("review_last_active", 0) > 300):
        session.pop("review_authenticated", None)
        return render_template("admin_review.html", txs=[])

    session['review_last_active'] = time.time()
    txs = Transaction.query.filter_by(status="pending").order_by(Transaction.created_at.desc()).all()
    return render_template("admin_review.html", txs=txs)

@app.route("/admin/review/requests")
@review_authenticated_only
def get_review_requests():
    txs = Transaction.query.filter_by(status="pending").order_by(Transaction.created_at.desc()).all()
    return render_template("admin/_requests_table.html", txs=txs)

@app.route("/admin/approve/<txn_id>")
@review_authenticated_only
def approve_transaction(txn_id):
    tx = Transaction.query.filter_by(txn_id=txn_id, status="pending").first()
    if not tx:
        return redirect(url_for("admin_review"))

    tx.status = "approved"
    db.session.commit()

    package = normalize_package(tx.package)
    method = tx.method
    username = tx.username
    result = grant_vip(username, package, method)
    if isinstance(result, str) and result.startswith("‚ùå"):
        return redirect(url_for("admin_review"))

    user = User.query.filter_by(username=username).first()
    if user and user.email:
        now = now_vn()
        if package == "vip_gpt_5d":
            days, plan_name = 5, "SLV 5 ng√†y"
        elif package == "vip_gpt_15d":
            days, plan_name = 15, "SLV 15 ng√†y"
        elif package == "vip_gpt_30d":
            days, plan_name = 30, "SLV 30 ng√†y"
        elif package == "vip_ai_lite":
            days, plan_name = 7, "AI Lite 7 ng√†y"
        else:
            days, plan_name = 0, package

        effective_at = now
        expire_at = (now + timedelta(days=days)).replace(hour=23, minute=59, second=59, microsecond=0)
        try:
            send_payment_success_email(
                to_email=user.email,
                username=username,
                user_id=user.user_id,  
                plan_name=plan_name,
                amount=tx.amount,
                txn_id=tx.txn_id,
                effective_at=effective_at,
                expire_at=expire_at
            )
        except Exception:
            pass

    return redirect(url_for("admin_review"))

@app.route("/admin/reject/<txn_id>")
@review_authenticated_only
def reject_transaction(txn_id):
    tx = Transaction.query.filter_by(txn_id=txn_id, status="pending").first()
    if not tx:
        return redirect(url_for("admin_review"))

    tx.status = "rejected"
    db.session.commit()
    return redirect(url_for("admin_review"))

def is_follow_up(msg):
    msg = msg.lower().strip()
    follow_keywords = ["b√†i", "ph·∫ßn", "ti·∫øp", "ti·∫øp theo", "ti·∫øp t·ª•c", "r·ªìi sao", "c√¢u", "n·ªØa", "b nh√©", "c th√¨ sao"]
    return any(kw in msg for kw in follow_keywords) and len(msg.split()) <= 6

#=====B·∫†N B√à=====#
@app.route("/unblock_user", methods=["POST"])
def unblock_user():
    username = session.get("username")
    data = request.get_json()
    target = data.get("target")

    if not username or not target:
        return jsonify({"status": "error", "message": "Thi·∫øu d·ªØ li·ªáu"})

    user = User.query.filter_by(username=username).first()
    target_user = User.query.filter_by(username=target).first()

    if not user or not target_user:
        return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y user"})

    if target_user in user.blocked_users:
        user.blocked_users.remove(target_user)
        db.session.commit()
        return jsonify({"status": "success"})

    return jsonify({"status": "error", "message": "User ch∆∞a b·ªã ch·∫∑n"})

@app.route("/blocked_users")
def get_blocked_users():
    username = session.get("username")
    if not username:
        return jsonify([])

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify([])

    blocked_list = [u.username for u in user.blocked_users]
    return jsonify(blocked_list)


@app.route("/block_user", methods=["POST"])
def block_user():
    username = session.get("username")
    data = request.get_json()
    target = data.get("target")

    if not username or not target:
        return jsonify({"status": "error", "message": "Thi·∫øu d·ªØ li·ªáu"})

    user = User.query.filter_by(username=username).first()
    target_user = User.query.filter_by(username=target).first()

    if not user or not target_user:
        return jsonify({"status": "error", "message": "User kh√¥ng t·ªìn t·∫°i"})

    if target_user not in user.blocked_users:
        user.blocked_users.append(target_user)
        db.session.commit()

    return jsonify({"status": "success"})


@app.route("/chat/delete/<friend>", methods=["POST"])
def delete_chat(friend):
    username = session.get("username")
    if not username:
        return jsonify({"success": False, "error": "Ch∆∞a ƒëƒÉng nh·∫≠p"})

    from models.message import Message
    data = request.get_json()
    mode = data.get("mode", "one_side")

    if mode == "one_side":
        msgs = Message.query.filter(
            db.or_(
                db.and_(Message.sender == username, Message.receiver == friend),
                db.and_(Message.sender == friend, Message.receiver == username)
            )
        ).all()
        count_marked = 0
        for msg in msgs:
            deleted = msg.deleted_for or []
            if username not in deleted:
                deleted.append(username)
                msg.deleted_for = deleted
                count_marked += 1
        db.session.commit()
        return jsonify({"success": True})

    # ------------------- BOTH SIDE -----------------------
    msgs = Message.query.filter(
        db.or_(
            db.and_(Message.sender == username, Message.receiver == friend),
            db.and_(Message.sender == friend, Message.receiver == username)
        )
    ).all()
    if not msgs:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y ƒëo·∫°n chat."})

    deleted_images = 0
    deleted_voices = 0

    for msg in msgs:
        if msg.image_urls:
            for url in msg.image_urls:
                try:
                    image_path = os.path.join(app.root_path, url.strip("/"))
                    if os.path.exists(image_path):
                        os.remove(image_path)
                        deleted_images += 1
                except Exception:
                    pass

        if msg.voice_url:
            try:
                voice_path = os.path.join(app.root_path, msg.voice_url.strip("/"))
                if os.path.exists(voice_path):
                    os.remove(voice_path)
                    deleted_voices += 1
            except Exception:
                pass

        db.session.delete(msg)

    db.session.commit()

    socketio.emit("chat_deleted_notice", {
        "from": username,
        "to": friend
    }, room=f"user_{friend}")

    return jsonify({"success": True})

@app.route("/update_privacy", methods=["POST"])
def update_privacy():
    username = session.get("username")
    if not username:
        return jsonify({"success": False, "error": "Ch∆∞a ƒëƒÉng nh·∫≠p."})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."})

    data = request.get_json()
    user.privacy = {
        "hide_online": data.get("hide_online", False),
        "hide_avatar": data.get("hide_avatar", False),
        "hide_bio":    data.get("hide_bio", False),     
        "hide_all":    data.get("hide_all", False),
        "blocked_users": data.get("blocked_users", []),
    }

    db.session.commit()
    return jsonify({"success": True})


@app.route("/get_profile")
def get_profile():
    username = session.get("username")
    if not username:
        return jsonify({})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({})

    return jsonify({
        "fullname": user.fullname or "",
        "bio": user.bio or "",
        "privacy": user.privacy or {}
    })

@app.route("/update_profile", methods=["POST"])
def update_profile():
    data = request.json
    username = session.get("username")
    if not username:
        return jsonify({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user"})

    user.fullname = data.get("fullname", "")
    user.bio = data.get("bio", "")
    user.bio_updated_at = datetime.utcnow()

    db.session.commit()

    return jsonify({"success": True})

def is_friend(user_id_1, user_id_2):
    return Friend.query.filter(
        or_(
            and_(Friend.user_id == user_id_1, Friend.friend_id == user_id_2),
            and_(Friend.user_id == user_id_2, Friend.friend_id == user_id_1)
        )
    ).first() is not None

@app.route('/users/search')
def users_search():
    query = request.args.get('q', '').strip().lower()
    current_username = session.get("username", "").lower()

    if not query:
        return jsonify([])

    current_user = User.query.filter_by(username=current_username).first()
    if not current_user:
        return jsonify([])

    all_users = (
        User.query
        .filter(func.lower(User.username) != current_username)
        .filter(
            or_(
                func.lower(User.username).like(f"%{query}%"),
                func.lower(User.fullname).like(f"%{query}%"),
                func.lower(User.user_id).like(f"%{query}%"),
            )
        )
        .all()
    )

    visible_users = []
    for u in all_users:
        hide_all = u.privacy.get("hide_all") if u.privacy else False

        if hide_all and not is_friend(current_user.user_id, u.user_id):
            continue  # üî• B·ªè qua user ƒëang ·∫©n danh n·∫øu ch∆∞a l√† b·∫°n

        visible_users.append(u)

    return jsonify([
    {
        'username': u.username,
        'name': u.fullname or u.username,
        'fullname': u.fullname,
        'user_id': u.user_id,
        'online': u.online,
        'is_friend': is_friend(current_user.user_id, u.user_id),
        'last_seen': u.last_seen.strftime("%Y-%m-%d %H:%M:%S") if u.last_seen else "",
        'avatar_url': u.avatar_url or '/static/logos/logo.png'
    }
            for u in visible_users
        ])

def auto_offline():
    timeout = datetime.utcnow() - timedelta(minutes=5)
    users_to_update = User.query.filter(User.last_seen < timeout, User.online == True).all()

    for user in users_to_update:
        user.online = False

    db.session.commit()

@app.before_request
def update_last_seen_and_protect_admin():
    ua = request.headers.get("User-Agent", "")
    path = request.path

    # ‚úÖ N·∫øu l√† c√°c route duy·ªát (review/approve/reject)
    if path.startswith("/admin/review") or path.startswith("/admin/approve") or path.startswith("/admin/reject"):
        if session.get("review_authenticated"):
            return  # Cho ph√©p n·∫øu ƒë√£ x√°c th·ª±c
        else:
            return  # Cho ph√©p truy c·∫≠p giao di·ªán ƒë·ªÉ nh·∫≠p m√£ x√°c th·ª±c

    # üö´ C√°c route admin kh√°c y√™u c·∫ßu Electron ho·∫∑c admin login ho·∫∑c key app th·∫≠t
    if path.startswith("/admin") or path.startswith("/solverviet_control"):
        admin_key = request.headers.get("X-Admin-App-Key", "")
        is_valid_electron = "Electron" in ua
        is_valid_key = admin_key == "SLV_ADMIN_2025"
        is_admin_login = session.get("is_admin")

        if not (is_valid_electron or is_valid_key or is_admin_login):
            return "‚õî Access denied. Internal use only.", 403

        # ‚è± Ki·ªÉm tra timeout session admin
        if is_admin_login:
            last_active = session.get("admin_last_active", 0)
            now = time.time()
            if now - last_active > 1800:
                session.clear()
                return redirect("/admin_login")
            else:
                session["admin_last_active"] = now

    # üë§ C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng th∆∞·ªùng
    username = session.get("username")
    if username:
        try:
            user = User.query.filter_by(username=username).first()
            if user:
                user.online = True
                user.last_seen = datetime.utcnow()
                db.session.commit()
        except Exception as e:
            pass

@app.route("/friends")
def friends_page():
    current_username = session.get("username")
    if not current_username:
        return redirect("/login")
    
    current_user = User.query.filter_by(username=current_username).first()
    if not current_user:
        return redirect("/login")

    auto_offline()
 
    friend_links = Friend.query.filter(
        (Friend.user_id == current_user.user_id) | (Friend.friend_id == current_user.user_id)
    ).all()

    friend_list = []
    seen = set()  

    for link in friend_links:
        friend_id = link.friend_id if link.user_id == current_user.user_id else link.user_id
        friend = User.query.filter_by(user_id=friend_id).first()

        if not friend or friend.username in seen:
            continue
        seen.add(friend.username)

        display_name = friend.fullname or friend.username
        show_bio = not (friend.privacy and friend.privacy.get("hide_bio"))
        online, status_text = get_status(friend.last_seen)
        friend_list.append({
            "username": friend.username,
            "name": friend.fullname,
            "display_name": display_name,
            "fullname": friend.fullname,
            "avatar_url": friend.avatar_url or "/static/logos/logo.png",
            "bio": friend.bio if show_bio else "",
            "last_message": "...",
            "online": online,
            "friend_status": status_text
        })
    
    # Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
    display_name = current_user.fullname or current_user.username
    user_avatar = current_user.avatar_url or url_for('static', filename='logos/logo.png')
    is_online = current_user.online
    user_id = current_user.user_id
    bio = current_user.bio or ""

    show_bio = True 

    pending_invites = FriendRequest.query.filter_by(to_user_id=current_user.user_id).count()

    return render_template("friends.html",
        friends=friend_list,
        username=current_username,
        fullname=display_name,
        user_avatar=user_avatar,
        is_online=is_online,
        bio=bio if show_bio else "",
        current_user=current_user,
        user_id=user_id,
        pending_invites=pending_invites  
    )


def load_messages():
    messages_by_chat = {}

    all_msgs = Message.query.order_by(Message.timestamp).all()
    for msg in all_msgs:
        if msg.chat_key not in messages_by_chat:
            messages_by_chat[msg.chat_key] = []

        # L·ªçc ·∫£nh m·∫•t
        valid_images = [
            img for img in msg.image_urls or []
            if os.path.exists("." + img)
        ]

        messages_by_chat[msg.chat_key].append({
            "sender": msg.sender,
            "content": msg.content,
            "image_urls": valid_images,
            "timestamp": msg.timestamp.strftime("%Y-%m-%d %H:%M:%S")
        })

    return messages_by_chat

def save_messages(data):
    Message.query.delete()

    for chat_key, msgs in data.items():
        for m in msgs:
            sender = m.get("sender", "")
            u1, u2  = chat_key.split("__")
            receiver = u2 if u1 == sender else u1

            vn_time   = datetime.strptime(m["timestamp"], "%Y-%m-%d %H:%M:%S")
            utc_time  = vn_time.replace(tzinfo=VN_TZ).astimezone(UTC_TZ).replace(tzinfo=None)

            new_msg = Message(
                chat_key = chat_key,
                sender   = sender,
                receiver = receiver,
                content  = m.get("content", ""),
                image_urls = m.get("image_urls", []),
                voice_url  = m.get("voice_url"),           
                timestamp  = utc_time
            )
            db.session.add(new_msg)
    db.session.commit()

def get_status(last_seen):
    if not last_seen:
        return False, "offline"

    now = datetime.utcnow()
    delta = now - last_seen

    if delta < timedelta(minutes=5):
        return True, "ƒêang ho·∫°t ƒë·ªông"
    elif delta < timedelta(hours=1):
        minutes = int(delta.total_seconds() // 60)
        return False, f"ƒê√£ offline {minutes} ph√∫t tr∆∞·ªõc"
    elif delta < timedelta(hours=24):
        hours = int(delta.total_seconds() // 3600)
        return False, f"ƒê√£ offline {hours} gi·ªù tr∆∞·ªõc"
    else:
        return False, "ƒê√£ offline"

@app.route("/chat/send/<username>", methods=["POST"])
def send_message(username):
    current_username = session.get("username")
    if not current_username:
        return jsonify({"error": "Not logged in"}), 403

    sender = User.query.filter_by(username=current_username).first()
    receiver = User.query.filter_by(username=username).first()

    if not sender or not receiver:
        return jsonify({"error": "User not found"}), 404

    # Ki·ªÉm tra b·ªã ch·∫∑n
    if sender in receiver.blocked_users:
        return jsonify({"success": False, "error": "B·∫†N ƒê√É B·ªä CH·∫∂N"})

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông
    sender.last_seen = datetime.utcnow()
    db.session.commit()

    # Nh·∫≠n d·ªØ li·ªáu g·ª≠i
    text = request.form.get("text", "").strip()
    images = request.files.getlist("images")
    voice_file = request.files.get("voice")
    reply_raw = request.form.get("reply_to")
    reply_to = None

    if reply_raw:
        try:
            raw = json.loads(reply_raw)
            reply_id = raw.get("id")
            try:
                reply_msg = Message.query.get(int(reply_id)) if reply_id is not None else None
                reply_sender = User.query.filter_by(username=reply_msg.sender).first() if reply_msg else None
            except Exception:
                reply_msg = None

            if reply_msg:
                if reply_msg.unsent:
                    reply_text = "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi."
                elif reply_msg.content:
                    reply_text = reply_msg.content
                elif reply_msg.image_urls:
                    reply_text = "[·∫£nh]"
                elif reply_msg.voice_url:
                    reply_text = "[voice]"
                else:
                    reply_text = "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i."

                reply_to = {
                    "id": reply_msg.id,
                    "sender": reply_msg.sender,
                    "text": reply_text,
                    "unsent": reply_msg.unsent,
                    "fullname": reply_sender.fullname if reply_sender and reply_sender.fullname else reply_msg.sender
                }
                reply_user = User.query.filter_by(username=reply_msg.sender).first()
                reply_to["fullname"] = reply_user.fullname if reply_user and reply_user.fullname else reply_msg.sender
            else:
                reply_to = {
                    "id": int(reply_id),
                    "sender": raw.get("sender"),
                    "text": "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i.",
                    "unsent": False
                }
                fallback_user = User.query.filter_by(username=raw.get("sender")).first()
                reply_to["fullname"] = fallback_user.fullname if fallback_user and fallback_user.fullname else raw.get("sender")

        except Exception:
            reply_to = None

    image_urls = []
    voice_url = None

    # X·ª≠ l√Ω ·∫£nh
    for image in images:
        if image and image.filename:
            ext = image.filename.rsplit(".", 1)[-1].lower()
            if ext in ["png", "jpg", "jpeg", "gif"]:
                filename = f"{uuid.uuid4().hex}.{ext}"
                save_path = os.path.join("static", "images", "uploads", filename)
                os.makedirs(os.path.dirname(save_path), exist_ok=True)
                try:
                    image.save(save_path)
                    start_time = time.time()
                    while not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
                        if time.time() - start_time > 2.0:
                            raise Exception("File save timeout")
                        time.sleep(0.05)
                    image_urls.append(f"/static/images/uploads/{filename}")
                except Exception:
                    pass

    # X·ª≠ l√Ω voice
    if voice_file and voice_file.filename:
        ext = voice_file.filename.rsplit(".", 1)[-1].lower()
        if ext in ["mp3", "wav", "m4a", "ogg", "webm"]:
            filename = f"{uuid.uuid4().hex}.{ext}"
            save_path = os.path.join("static", "voices", filename)
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            try:
                voice_file.save(save_path)
                start_time = time.time()
                while not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
                    if time.time() - start_time > 2.0:
                        raise Exception("Voice save timeout")
                    time.sleep(0.05)
                voice_url = f"/static/voices/{filename}"
            except Exception:
                pass

    # X·ª≠ l√Ω video
    video_file = request.files.get("video")
    video_url = None
    if video_file and video_file.filename:
        ext = video_file.filename.rsplit(".", 1)[-1].lower()
        if ext in ["mp4", "webm", "mov", "avi", "mkv"]:
            filename = f"{uuid.uuid4().hex}.{ext}"
            save_path = os.path.join("static", "videos", filename)
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            try:
                video_file.save(save_path)
                start_time = time.time()
                while not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
                    if time.time() - start_time > 2.0:
                        raise Exception("Video save timeout")
                    time.sleep(0.05)
                video_url = f"/static/videos/{filename}"
            except Exception:
                pass

    if not text and not image_urls and not voice_url and not video_url:
        return jsonify({"error": "No content"}), 400

    # T·∫°o chat_key
    chat_key_1 = f"{current_username}__{username}"
    chat_key_2 = f"{username}__{current_username}"
    chat_key = chat_key_1 if current_username < username else chat_key_2

    # L∆∞u v√†o PostgreSQL
    msg = Message(
        chat_key=chat_key,
        sender=current_username,
        receiver=username,
        content=text if text else None,
        image_urls=image_urls,
        voice_url=voice_url,
        video_url=video_url,
        timestamp=datetime.utcnow() + timedelta(hours=7),
        read=False,
        reply_to=reply_to
    )

    db.session.add(msg)
    db.session.commit()

    # Emit ƒë·∫øn ng∆∞·ªùi nh·∫≠n
    socketio.emit("private_message", {
        "from": current_username,
        "to": username,
        "text": msg.content,
        "image_urls": msg.image_urls,
        "voice_url": msg.voice_url,
        "video_url": msg.video_url,
        "time": msg.timestamp.strftime("%H:%M"),
        "reply_to": reply_to,
    }, room=f"user_{username}")

    socketio.emit("new_unread_message", {
        "from": current_username
    }, room=f"user_{username}")

    return jsonify({
        "success": True,
        "message": {
            "sender": msg.sender,
            "text": msg.content,
            "image_urls": msg.image_urls,
            "voice_url": msg.voice_url,
            "video_url": msg.video_url,
            "time": msg.timestamp.strftime("%H:%M"),
            "time_full": msg.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "reply_to": reply_to
        }
    })


@app.route("/chat/<username>", methods=["GET"])
def chat(username):
    from models.message import Message
    current_username = session.get("username")
    if not current_username:
        return redirect("/login")
    current_user = User.query.filter_by(username=current_username).first()
    friend_user = User.query.filter_by(username=username).first()

    if not friend_user:
        return "User not found", 404

    current_user.last_seen = datetime.utcnow()
    current_user.online = True
    db.session.commit()

    chat_key_1 = f"{current_username}__{username}"
    chat_key_2 = f"{username}__{current_username}"
    chat_key = chat_key_1 if current_username < username else chat_key_2

    messages = Message.query.filter_by(chat_key=chat_key).order_by(Message.timestamp).all()
    now = datetime.now(VN_TZ) 
    messages_list = []
    for msg in messages:
        if msg.deleted_for and current_username in msg.deleted_for:
            continue

        vn_time = msg.timestamp.replace(tzinfo=VN_TZ)

        days_since = (now - vn_time).days
        days_left  = 30 - days_since if days_since >= 25 else None
        reply_data = None
        if isinstance(msg.reply_to, dict):
            reply_data = msg.reply_to.copy()
            reply_msg_id = reply_data.get("id")

            if reply_msg_id:
                try:
                    real_id = int(reply_msg_id)
                    reply_msg = Message.query.get(real_id)
                    if not reply_msg:
                        reply_data["text"] = "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i."
                    else:
                        reply_sender = User.query.filter_by(username=reply_msg.sender).first()
                        reply_data["fullname"] = reply_sender.fullname if reply_sender and reply_sender.fullname else reply_msg.sender

                        if reply_msg.unsent:
                            reply_data["text"] = "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi."
                        else:
                            reply_data["text"] = reply_msg.content or "[·∫¢nh/voice]"
                            if not reply_msg.content and not reply_msg.image_urls and not reply_msg.voice_url:
                                reply_data["text"] = "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i."
                except Exception:
                    reply_data["text"] = "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i."
            else:
                reply_data["text"] = "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i."
        messages_list.append({
            "id":         msg.id,
            "sender":     msg.sender,
            "text":       "(ƒë√£ thu h·ªìi)" if msg.unsent else msg.content,
            "image_urls": [] if msg.unsent else (msg.image_urls or []),
            "voice_url": None if msg.unsent else msg.voice_url,
            "video_url":  None if msg.unsent else msg.video_url, 
            "unsent":     msg.unsent,
            "time":       vn_time.strftime("%H:%M"),
            "time_full":  vn_time.strftime("%Y-%m-%d %H:%M:%S"),
            "days_left":  days_left,
            "reply_to": reply_data
        })

    friend_name = friend_user.fullname or friend_user.username
    hide_online = friend_user.privacy.get("hide_online", False) if friend_user.privacy else False

    if hide_online:
        online = False
        status_text = ""
    else:
        online, status_text = get_status(friend_user.last_seen)

    return render_template("chat.html",
        username=current_username,
        friend_username=username,
        current_user=current_user,
        friend=friend_user,
        friend_name=friend_name,
        friend_status=status_text,
        messages=messages_list,
        online=online,
        hide_online=hide_online
    )

@app.route("/upload_video", methods=["POST"])
def upload_video():
    video_file = request.files.get("video")
    if not video_file or not video_file.filename:
        return jsonify({"error": "No video uploaded"}), 400

    ext = video_file.filename.rsplit(".", 1)[-1].lower()
    if ext not in ["mp4", "webm", "mov", "avi", "mkv"]:
        return jsonify({"error": "Invalid video format"}), 400

    filename = f"{uuid.uuid4().hex}.{ext}"
    save_path = os.path.join("static", "videos", filename)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    try:
        video_file.save(save_path)
        start_time = time.time()
        while not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
            if time.time() - start_time > 2.0:
                raise Exception("Video save timeout")
            time.sleep(0.05)

        return jsonify({"success": True, "url": f"/static/videos/{filename}"})

    except Exception as e:
        return jsonify({"error": "Failed to save video"}), 500

@app.route("/chat/unsend/<msg_id>", methods=["POST"])
def unsend_message(msg_id):
    current_username = session.get("username")
    if not current_username:
        return jsonify({"success": False, "error": "Not logged in"}), 403

    msg = Message.query.get(msg_id)
    if not msg or msg.sender != current_username:
        return jsonify({"success": False, "error": "Not allowed"}), 403

    # Xo√° ·∫£nh/voice n·∫øu c√≥
    if msg.image_urls:
        for url in msg.image_urls:
            try:
                path = os.path.join(app.root_path, url.strip("/"))
                if os.path.exists(path):
                    os.remove(path)
            except Exception:
                pass

    if msg.voice_url:
        try:
            path = os.path.join(app.root_path, msg.voice_url.strip("/"))
            if os.path.exists(path):
                os.remove(path)
        except Exception:
            pass

    msg.content = None
    msg.image_urls = []
    msg.voice_url = None
    msg.unsent = True

    db.session.commit()

    socketio.emit("message_unsent", {
        "msg_id": msg_id,
        "from": current_username,
        "to": msg.receiver
    }, room=f"user_{msg.receiver}")

    socketio.emit("message_unsent", {
        "msg_id": msg_id,
        "from": current_username,
        "to": msg.receiver
    }, room=f"user_{msg.sender}")

    return jsonify({"success": True})


@app.route("/api/album-images")
def api_album_images():
    current_username = session.get("username")
    friend_username = request.args.get("friend")

    if not current_username or not friend_username:
        return jsonify([])

    messages_data = load_messages()
    chat_key_1 = f"{current_username}__{friend_username}"
    chat_key_2 = f"{friend_username}__{current_username}"
    chat_key = chat_key_1 if chat_key_1 in messages_data else chat_key_2

    chat_history = messages_data.get(chat_key, [])
    image_list = []

    for msg in chat_history:
        for img in msg.get("image_urls", []):
            full_path = os.path.join(".", img.lstrip("/"))
            if os.path.exists(full_path):
                image_list.append({"url": img})

    return jsonify(image_list[::-1])
@app.route("/admin/cleanup_chats_30_days")
def cleanup_old_chats():
    env_admin = os.getenv("ADMIN_USERNAME")
    if not (session.get("is_admin") or session.get("username") == env_admin):
        return "Unauthorized", 403

    messages = load_messages()
    removed_chats = []
    removed_images = []

    now = datetime.now()
    cutoff = now - timedelta(days=30)

    for chat_key in list(messages.keys()):
        chat_history = messages[chat_key]
        if not chat_history:
            continue

        # Ki·ªÉm tra n·∫øu t·∫•t c·∫£ tin nh·∫Øn ƒë·ªÅu c≈© h∆°n 30 ng√†y
        all_old = True
        for msg in chat_history:
            try:
                msg_time = datetime.strptime(msg["time_full"], "%Y-%m-%d %H:%M:%S")
                if msg_time > cutoff:
                    all_old = False
                    break
            except:
                all_old = False  # N·∫øu kh√¥ng c√≥ time_full h·ª£p l·ªá th√¨ b·ªè qua xo√°

        if all_old:
            # Xo√° ·∫£nh li√™n quan
            for msg in chat_history:
                for img_url in msg.get("image_urls", []):
                    img_path = os.path.join(".", img_url.lstrip("/"))
                    if os.path.exists(img_path):
                        os.remove(img_path)
                        removed_images.append(img_url)

            # Xo√° ƒëo·∫°n chat
            removed_chats.append(chat_key)  
            del messages[chat_key]

    save_messages(messages)

    return f"‚úÖ ƒê√£ xo√° {len(removed_chats)} ƒëo·∫°n chat & {len(removed_images)} ·∫£nh sau 30 ng√†y."
@app.route("/delete_old_chats")
def delete_old_chats():
    messages_data = load_messages()
    now = datetime.now()
    deleted = 0

    for key in list(messages_data.keys()):
        new_messages = []
        for msg in messages_data[key]:
            time_full = msg.get("time_full")
            if time_full:
                msg_time = datetime.strptime(time_full, "%Y-%m-%d %H:%M:%S")
                if now - msg_time < timedelta(days=30):
                    new_messages.append(msg)
                else:
                    # N·∫øu c√≥ ·∫£nh th√¨ x√≥a ·∫£nh
                    for img in msg.get("image_urls", []):
                        img_path = img.lstrip("/")
                        if os.path.exists(img_path):
                            os.remove(img_path)
                    deleted += 1
            else:
                new_messages.append(msg)  # gi·ªØ l·∫°i tin c≈© kh√¥ng c√≥ time_full
        messages_data[key] = new_messages

    save_messages(messages_data)
    return f"ƒê√£ xo√° {deleted} tin nh·∫Øn c≈© h∆°n 30 ng√†y."
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_username():
    # L·∫•y username hi·ªán t·∫°i, v√≠ d·ª• t·ª´ session
    return session.get('username')

@app.route('/friends/request', methods=['POST'])
def send_friend_request():
    current_username = session.get("username")
    to_username = request.json.get('to_user')

    if not current_username or not to_username:
        return jsonify({'success': False, 'message': 'Thi·∫øu th√¥ng tin'}), 400
    if current_username == to_username:
        return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi cho ch√≠nh m√¨nh'}), 400

    from_user = User.query.filter_by(username=current_username).first()
    to_user = User.query.filter_by(username=to_username).first()

    if not from_user or not to_user:
        return jsonify({'success': False, 'message': 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'}), 404

    # ƒê√£ l√† b·∫°n b√®
    existing = Friend.query.filter_by(user_id=from_user.user_id, friend_id=to_user.user_id).first()
    if existing:
        return jsonify({'success': False, 'message': 'ƒê√£ l√† b·∫°n b√®'}), 400

    # ƒê√£ g·ª≠i l·ªùi m·ªùi
    already_sent = FriendRequest.query.filter_by(from_user_id=from_user.user_id, to_user_id=to_user.user_id).first()
    if already_sent:
        return jsonify({'success': False, 'message': 'ƒê√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥'}), 400

    fr = FriendRequest(from_user_id=from_user.user_id, to_user_id=to_user.user_id)
    db.session.add(fr)
    db.session.commit()
    return jsonify({'success': True, 'message': 'ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n'})


@app.route('/friends/requests', methods=['GET'])
def get_friend_requests():
    current_username = session.get("username")
    current_user = User.query.filter_by(username=current_username).first()

    if not current_user:
        return jsonify([])

    requests = FriendRequest.query.filter_by(to_user_id=current_user.user_id).all()
    results = []
    for r in requests:
        from_user = User.query.filter_by(user_id=r.from_user_id).first()
        if from_user:
            results.append({
                'from_username': from_user.username,
                'from_name': from_user.fullname
            })

    return jsonify(results)

@app.route('/friends/remove', methods=['POST'])
def remove_friend():
    current_username = session.get("username")
    target_username = request.json.get('target_user')

    if not current_username or not target_username:
        return jsonify({'success': False, 'message': 'Thi·∫øu th√¥ng tin'}), 400

    current_user = User.query.filter_by(username=current_username).first()
    target_user = User.query.filter_by(username=target_username).first()

    if not current_user or not target_user:
        return jsonify({'success': False, 'message': 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'}), 404

    # ‚ùå X√≥a c·∫£ 2 chi·ªÅu
    Friend.query.filter_by(user_id=current_user.user_id, friend_id=target_user.user_id).delete()
    Friend.query.filter_by(user_id=target_user.user_id, friend_id=current_user.user_id).delete()

    db.session.commit()

    return jsonify({'success': True, 'message': f'ƒê√£ xo√° b·∫°n v·ªõi {target_username}'})

@app.route('/friends/requests/accept', methods=['POST'])
def accept_friend_request():
    current_username = session.get("username")
    from_username = request.json.get('from_user')

    if not current_username or not from_username:
        return jsonify({'success': False, 'message': 'Thi·∫øu th√¥ng tin'}), 400

    current_user = User.query.filter_by(username=current_username).first()
    from_user = User.query.filter_by(username=from_username).first()

    if not current_user or not from_user:
        return jsonify({'success': False, 'message': 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'}), 404

    already_friends = Friend.query.filter_by(user_id=current_user.user_id, friend_id=from_user.user_id).first()
    if already_friends:
        return jsonify({'success': False, 'message': 'ƒê√£ l√† b·∫°n b√®'}), 400

    # ‚úÖ Th√™m 2 chi·ªÅu
    db.session.add(Friend(user_id=current_user.user_id, friend_id=from_user.user_id))
    db.session.add(Friend(user_id=from_user.user_id, friend_id=current_user.user_id))

    # ‚úÖ Xo√° l·ªùi m·ªùi k·∫øt b·∫°n
    FriendRequest.query.filter_by(from_user_id=from_user.user_id, to_user_id=current_user.user_id).delete()

    db.session.commit()

    return jsonify({'success': True, 'message': 'ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi', 'from_username': from_username, 'from_name': from_user.fullname})

@app.route('/friends/requests/reject', methods=['POST'])
def reject_friend_request():
    current_username = session.get("username")
    from_username = request.json.get('from_user')

    if not current_username or not from_username:
        return jsonify({'success': False, 'message': 'Thi·∫øu th√¥ng tin'}), 400

    current_user = User.query.filter_by(username=current_username).first()
    from_user = User.query.filter_by(username=from_username).first()

    if not current_user or not from_user:
        return jsonify({'success': False, 'message': 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'}), 404

    req = FriendRequest.query.filter_by(from_user_id=from_user.user_id, to_user_id=current_user.user_id).first()
    if not req:
        return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ l·ªùi m·ªùi t·ª´ ng∆∞·ªùi n√†y'}), 400

    db.session.delete(req)
    db.session.commit()

    return jsonify({'success': True, 'message': 'ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi'})


@app.route("/friends/list", methods=["GET"])
def get_friends_list():
    current_username = session.get("username")
    if not current_username:
        return jsonify([])

    current_user = User.query.filter_by(username=current_username).first()
    if not current_user:
        return jsonify([])

    now = datetime.utcnow()
    result = []

    friend_links = Friend.query.filter(
        (Friend.user_id == current_user.user_id) | (Friend.friend_id == current_user.user_id)
    ).all()

    seen = set()

    for link in friend_links:
        friend_id = link.friend_id if link.user_id == current_user.user_id else link.user_id
        friend = User.query.filter_by(user_id=friend_id).first()
        if not friend or friend.username in seen:
            continue
        seen.add(friend.username)

        # ------ tr·∫°ng th√°i online ------
        last_active = friend.last_seen
        is_online = (now - last_active) < timedelta(seconds=60) if last_active else False

        # ------ x√°c ƒë·ªãnh chat_key ------
        chat_key_1 = f"{current_username}__{friend.username}"
        chat_key_2 = f"{friend.username}__{current_username}"
        chat_key = chat_key_1 if current_username < friend.username else chat_key_2

        # ------ ƒê·∫øm tin nh·∫Øn CH∆ØA ƒë·ªçc g·ª≠i t·ªõi current user ------
        unread = Message.query.filter_by(
            chat_key=chat_key,
            receiver=current_username,
            read=False
        ).count()

        # ------ Ki·ªÉm tra tin ch∆∞a ƒë·ªçc m·ªõi nh·∫•t c√≥ ph·∫£i ch·ªâ 1 ·∫£nh ------
        image_only = False
        if unread:
            newest = Message.query.filter_by(
                        chat_key=chat_key,
                        receiver=current_username,
                        read=False
                     ).order_by(Message.timestamp.desc()).first()
            if newest and newest.image_urls and not newest.content:
                image_only = len(newest.image_urls) == 1

        # ------ G·ªôp v√†o k·∫øt qu·∫£ ------
        show_bio = not (friend.privacy and friend.privacy.get("hide_bio"))

        result.append({
            "username": friend.username,
            "display_name": friend.fullname or friend.username,
            "name": friend.fullname or friend.username,
            "bio": friend.bio if show_bio else "",
            "unread": unread,
            "image_only": image_only,
            "is_online": is_online,
            "avatar_url": friend.avatar_url or "/static/logos/logo.png",
            "hide_avatar": friend.privacy.get("hide_avatar") if friend.privacy else False,
            "chat_key": chat_key
        })

    return jsonify(result)
@app.route("/chat/mark_read/<username>", methods=["POST"])
def mark_messages_as_read(username):
    current_username = session.get("username")
    if not current_username:
        return jsonify({"error": "Not logged in"}), 403

    chat_key_1 = f"{current_username}__{username}"
    chat_key_2 = f"{username}__{current_username}"
    chat_key = chat_key_1 if current_username < username else chat_key_2

    # ‚úÖ C·∫≠p nh·∫≠t t·∫•t c·∫£ tin g·ª≠i t·ªõi current_user v√† ch∆∞a ƒë·ªçc
    Message.query.filter_by(chat_key=chat_key, receiver=current_username, read=False).update({"read": True})
    db.session.commit()

    return jsonify({"success": True})

@app.route("/chat/unread_status")
def unread_status():
    username = session.get("username")
    if not username:
        return jsonify({})

    unread = Message.query.filter_by(receiver=username, read=False).all()
    return jsonify({m.sender: True for m in unread})


@app.route("/rename", methods=["POST"])
def rename_friend():
    current_username = session.get("username")
    if not current_username:
        return "Unauthorized", 403
    
    data = request.get_json()
    target = data.get("target_username")
    nickname = data.get("nickname", "").strip()

    user_data = load_data()
    user_data.setdefault(current_username, {}).setdefault("nicknames", {})

    if nickname:
        user_data[current_username]["nicknames"][target] = nickname
    else:
        user_data[current_username]["nicknames"].pop(target, None)

    save_data(user_data)
    return "OK"





@app.route("/upload_image", methods=["POST"])
def upload_image():
      # ‚úÖ N·∫øu ƒë√£ h·∫øt l∆∞·ª£t d√πng th·ª≠ AI To√°n ‚Üí ch·∫∑n l·∫°i
    if session.get("username") != "admin":
        user_type = get_user_type()
        if user_type != "vip":
            if not check_lite_usage():
                return jsonify({
                    "reply": "‚ö†Ô∏è B·∫°n ƒë√£ d√πng h·∫øt 10 l∆∞·ª£t AI mi·ªÖn ph√≠. Vui l√≤ng n√¢ng c·∫•p VIP ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng."
                })

    image = request.files.get("image")
    if image:
        filename = secure_filename(image.filename)
        save_path = os.path.join("static", "images", "uploads", filename)
        image.save(save_path)

        try:
            solution_raw = extract_with_gpt_vision(save_path)
            session["last_ai_math_answer"] = solution_raw
            return jsonify({"reply": str (solution_raw)})
        except Exception as e:
            return jsonify({"reply": "‚ö†Ô∏è ·∫¢nh c√≥ v√†i chi ti·∫øt h∆°i m·ªù,Anh/Ch·ªã c√≥ th·ªÉ ch·ª•p l·∫°i r√µ h∆°n r·ªìi g·ª≠i l·∫°i gi√∫p em nh√©."})
    else:
        return jsonify({"reply": "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ·∫£nh n√†o."})




@app.route("/upload_pdf", methods=["POST"])
def upload_pdf():
    file = request.files.get("pdf")
    if not file:
        return jsonify({"reply": "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c file PDF."})

    pdf_text = ""
    try:
        with fitz.open(stream=file.read(), filetype="pdf") as doc:
            for page in doc:
                pdf_text += page.get_text()

        reply = call_gpt_viet(pdf_text)

        reply = "‚úèÔ∏è R·ªìi nha, em b·∫Øt ƒë·∫ßu gi·∫£i t·ª´ng c√¢u cho anh/ch·ªã n√®!\n\n" + reply
        reply += "\n\nüí¨ N·∫øu c·∫ßn em gi·∫£i ti·∫øp b√†i kh√°c th√¨ c·ª© g·ª≠i th√™m ·∫£nh ho·∫∑c g√µ ti·∫øp nh√©!"
        return jsonify({"reply": reply})
    except Exception as e:
        return jsonify({"reply": "‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF. Vui l√≤ng th·ª≠ l·∫°i v·ªõi file kh√°c."})
@app.route("/update_ai_personality", methods=["POST"])
def update_ai_personality():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"success": False})
    
    user = User.query.filter_by(user_id=user_id).first()
    if not user or not user.vip_gpt or not user.vip_gpt.startswith("SLV"):
        return jsonify({"success": False, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi t√≠nh c√°ch AI."})

    new_personality = request.form.get("personality", "").strip()
    user.ai_personality = new_personality
    db.session.commit()
    return jsonify({"success": True})

#==========GPT==========#
def generate_obfuscated_slug():
    part1 = "0x" + secrets.token_hex(4)      
    part2 = secrets.token_hex(3)            
    part3 = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))  # obaq1267
    return f"{part1}-{part2}-?{part3}"
@app.route("/solvervietAIwatch", methods=["GET"])
def redirect_to_fancy_slug():
    # N·∫øu ƒë√£ c√≥ slug v√† session_id ‚Üí gi·ªØ nguy√™n, kh√¥ng reset
    slug_data = session.get("slug_to_session")
    if slug_data and "slug" in slug_data and "session_id" in slug_data:
        return redirect(f"/solvervietAIwatch/{slug_data['slug']}")
    
    # N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
    chat_session_id = str(uuid.uuid4())
    fancy_slug = generate_obfuscated_slug()
    session["chat_session_id"] = chat_session_id
    session["slug_to_session"] = {
        "slug": fancy_slug,
        "session_id": chat_session_id
    }

    return redirect(f"/solvervietAIwatch/{fancy_slug}")
@app.route("/solvervietAIwatch/<chat_uuid>", methods=["GET"])
def gpt_chat(chat_uuid):
    print("== SESSION SLUG ==", session.get("slug_to_session"))
    print("== CHAT SESSION ID ==", session.get("chat_session_id"))
    if is_maintenance("gpt_chat"):
        return render_template("gpt_chat.html",
            user_id=None,
            username=None,
            user_vip_gpt=False,
            user_vip_al=False,
            user_lite_exhausted=False,
            is_vip_chat=False,
            is_verified=False,
            chat_history=[],
            chat_id=None,
            chat_title="",
            is_maintenance=True,
            user=None  
        )

    cleanup_old_chats()

    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    if user.is_blocked:
        session.clear()
        return render_template("login.html", error= "üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒëƒÉng xu·∫•t. N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng <a href='/appeal' style='color:#4ea6ff;'>li√™n h·ªá h·ªó tr·ª£</a>.")

    now = datetime.utcnow()

    # ‚úÖ ∆Øu ti√™n g√≥i GPT n·∫øu c√≤n h·∫°n
    is_vip = False
    if username == "admin":
        is_vip = True
    elif user.vip_until_gpt and user.vip_until_gpt >= now:
        is_vip = True

    # ‚ùó N·∫øu kh√¥ng c√≥ g√≥i GPT ‚Üí ki·ªÉm tra AI Lite
    if not is_vip and user.vip_until_lite and user.vip_until_lite >= now:
        return redirect("/chat_lite")

    # ‚úÖ Ch·∫∑n n·∫øu l√† g√≥i 5 ng√†y v√† ƒë√£ h·∫øt 100 l∆∞·ª£t (tr·ª´ khi gpt_unlimited)
    if is_vip and user.vip_gpt == "5day" and not user.gpt_unlimited:
        usage_today = user.gpt_usage_today or 0
        usage_date = user.gpt_usage_date or ""
        today = now.strftime("%Y-%m-%d")
        if usage_date != today:
            usage_today = 0  # reset l·∫°i
        if usage_today >= 100:
            return render_template("gpt_chat.html",
                user_id=user.user_id, 
                username=user.username,
                user_vip_gpt=True,
                user_vip_al=True,
                user_lite_exhausted=False,
                is_vip_chat=False,
                is_verified=user.is_verified,
                chat_history=[],
                chat_id=None,
                chat_title=""
            )

    # ‚úÖ Ki·ªÉm tra x√°c th·ª±c v√† gi·ªõi h·∫°n Lite
    lite_used = user.lite_usage or 0
    is_verified = user.is_verified
    lite_exhausted = not is_verified and lite_used >= 5

    # üñºÔ∏è L·∫•y to√†n b·ªô ·∫£nh tr∆∞·ªõc ƒë·ªÉ d√πng map
    image_logs = ImageHistory.query.filter_by(user_id=user.user_id).order_by(ImageHistory.created_at).all()
    image_map = {log.message_index: log.image_url for log in image_logs}

    # üóÇ Chat history
    chat_history = []
    slug_data = session.get("slug_to_session")
    if slug_data and slug_data.get("slug") == chat_uuid:
        session_id = slug_data["session_id"]
    else:
        session_id = str(uuid.uuid4())
        session["slug_to_session"] = {
            "slug": chat_uuid,
            "session_id": session_id
        }

    session["chat_session_id"] = session_id

    history_records = ChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=session_id
    ).order_by(ChatHistory.timestamp).all()

    for idx, record in enumerate(history_records):
        if idx in image_map:
            chat_history.append({
                "role": "user",
                "type": "image_url",
                "image_url": {"url": image_map[idx]}
            })
        else:
            entry = {
                "role": record.role,
                "content": record.content
            }

            # ‚úÖ N·∫øu l√† c√¢u ph·∫£n h·ªìi sau khi th·∫£ c·∫£m x√∫c
            if record.role == "assistant" and record.content.startswith("[Th·∫£ c·∫£m x√∫c "):
                entry["source"] = "emoji"
                # T√°ch emoji t·ª´ ƒëo·∫°n ƒë·∫ßu
                start = record.content.find("‚ù§Ô∏è")
                if start == -1:
                    for emo in ["üòÇ", "üò¢", "ü§î", "üò°"]:
                        if emo in record.content:
                            entry["emoji_used"] = emo
                            break
                else:
                    entry["emoji_used"] = "‚ù§Ô∏è"

            chat_history.append(entry)

    return render_template("gpt_chat.html",
        user_id=user.user_id, 
        username=user.username,
        user_vip_gpt=is_vip,
        user_vip_al=is_vip,
        user_lite_exhausted=lite_exhausted,
        is_vip_chat=is_vip,
        is_verified=is_verified,
        message_from_home=None,
        chat_history=chat_history,  
        chat_id=session["chat_session_id"],
        chat_title="",
        is_maintenance=False,
        user=user,
        chat_session_id=session["chat_session_id"],
        chat_uuid=chat_uuid
    )
def reset_image_quota_if_new_day(user):
    today = datetime.now().date()
    if not user.image_quota_reset_at or user.image_quota_reset_at.date() != today:
        user.image_quota_today = 10
        user.image_quota_reset_at = datetime.now()

def should_generate_image(message: str, has_uploaded_image: bool) -> bool:
    """
    Tr·∫£ v·ªÅ True n·∫øu h·ªá th·ªëng n√™n t·∫°o ·∫£nh t·ª´ m√¥ t·∫£ (prompt).
    Tr·∫£ v·ªÅ False n·∫øu c√≥ ·∫£nh upload ho·∫∑c kh√¥ng r√µ r√†ng, ho·∫∑c l√† c√°c y√™u c·∫ßu kh√¥ng li√™n quan ƒë·∫øn h√¨nh ·∫£nh.
    """

    if has_uploaded_image:
        return False

    lower_msg = message.lower().strip()

    # ===== T·∫¶NG 1: L·ªåC NHANH B·∫∞NG T·ª™ KH√ìA =====
    non_image_keywords = [
        "√Ω nghƒ©a", "b√†i h√°t", "b√†i th∆°", "b√†i t·∫≠p", "gi·∫£i th√≠ch", "n·ªôi dung", "l·ªùi b√†i", 
        "gpt vision", "upload ·∫£nh", "ƒë√¢y l√† ·∫£nh", "trong ·∫£nh", "ph√¢n t√≠ch ·∫£nh",
        "c√¢u h·ªèi", "ki·∫øn th·ª©c", "ai c√≥ bi·∫øt", "l√† g√¨", "vi·∫øt l·∫°i", "d·ªãch", "t√≥m t·∫Øt", 
        "so s√°nh", "ph√¢n bi·ªát", "h·ªèi", "nghƒ©a l√†", "mang √Ω nghƒ©a g√¨", "ph√°t √¢m"
    ]

    if any(kw in lower_msg for kw in non_image_keywords):
        return False

    # C√°c c√¢u h·ªèi v·ªÅ kh·∫£ nƒÉng v·∫Ω (chung chung) ‚Üí c≈©ng lo·∫°i tr·ª´
    if (
        ("c√≥ th·ªÉ" in lower_msg or "c√≥ kh·∫£ nƒÉng" in lower_msg or "v·∫Ω ƒë∆∞·ª£c" in lower_msg)
        and ("t·∫°o ·∫£nh" in lower_msg or "v·∫Ω" in lower_msg or "minh h·ªça" in lower_msg)
        and any(kw in lower_msg for kw in ["kh√¥ng", "ch·ª©", "√†", "?"])
    ):
        return False

    # ===== T·∫¶NG 2: G·ªåI GPT (c√≥ th·ªÉ thay model t√πy m·ª©c ch√≠nh x√°c) =====
    try:
        client = create_openai_client("gpt-4o-mini")  # ho·∫∑c "gpt-4o" n·∫øu c·∫ßn ch√≠nh x√°c h∆°n
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "B·∫°n l√† b·ªô l·ªçc y√™u c·∫ßu t·∫°o ·∫£nh t·ª´ vƒÉn b·∫£n. Tr·∫£ l·ªùi duy nh·∫•t d∆∞·ªõi d·∫°ng JSON:\n"
                        '{"is_image_request": true} ho·∫∑c {"is_image_request": false}.\n\n'
                        "Tr·∫£ l·ªùi `true` ch·ªâ khi ng∆∞·ªùi d√πng **th·∫≠t s·ª± y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh** t·ª´ m√¥ t·∫£ c·ª• th·ªÉ, "
                        "v√≠ d·ª• nh∆∞: 'H√£y v·∫Ω...', 'T·∫°o ·∫£nh...', 'Cho t√¥i m·ªôt b·ª©c tranh...', 'H√£y minh h·ªça...'.\n\n"
                        "C√°c tr∆∞·ªùng h·ª£p sau ƒë√¢y PH·∫¢I tr·∫£ l·ªùi `false`:\n"
                        "- C√¢u h·ªèi v·ªÅ √Ω nghƒ©a, l·ªùi b√†i h√°t, th∆°, tri·∫øt l√Ω, t√¥n gi√°o, ki·∫øn th·ª©c, n·ªôi dung vƒÉn h·ªçc\n"
                        "- C√°c y√™u c·∫ßu nh∆∞: '√Ω nghƒ©a b√†i Cupid', 'Cupid l√† ai', 'Cupid t∆∞·ª£ng tr∆∞ng cho ƒëi·ªÅu g√¨'\n"
                        "- C√°c c√¢u h·ªèi v·ªÅ ·∫£nh ƒë√£ upload, b√†i t·∫≠p, GPT Vision, ·∫£nh g·ª≠i k√®m\n"
                        "- Nh·ªØng c√¢u h·ªèi chung chung nh∆∞: 'B·∫°n c√≥ v·∫Ω ƒë∆∞·ª£c kh√¥ng?', 'GPT c√≥ t·∫°o ƒë∆∞·ª£c ·∫£nh kh√¥ng?'\n\n"
                        "Kh√¥ng c·∫ßn gi·∫£i th√≠ch g√¨ th√™m, ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng JSON nh∆∞ y√™u c·∫ßu."
                    )
                },
                {
                    "role": "user",
                    "content": f'C√¢u sau c√≥ ph·∫£i l√† y√™u c·∫ßu t·∫°o ·∫£nh kh√¥ng?\n"{message}"'
                }
            ]
        )

        content = response.choices[0].message.content.strip()

        # Tr√≠ch JSON trong c√¢u tr·∫£ l·ªùi
        if "{" in content and "}" in content:
            content = content[content.find("{"):content.rfind("}") + 1]

        result = json.loads(content)
        return result.get("is_image_request", False)

    except Exception as e:
        print(f"[Image Intent Check Error] {e}")
        return False

@app.route("/core_inference", methods=["POST"])
def core_inference():
    
    if "username" not in session:
        return jsonify({"success": False, "reply": " B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    username = session["username"]
    user_id = session.get("user_id", "guest")
    session_id = request.form.get("session_id")  
    if not session_id:
        session_id = session.get("chat_session_id")  
    if not session_id:
        session_id = str(uuid.uuid4())
        session["chat_session_id"] = session_id

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "reply": "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."})
    # --- NGƒÇN SPAM G·ª¨I LI√äN TI·∫æP ---
    reset_pending_if_needed(user)
    if user.pending_messages is None:
        user.pending_messages = 0
    if user.pending_messages >= 4:
        return jsonify({
            "success": False,
            "reply": "‚ö†Ô∏è B·∫°n ƒëang g·ª≠i qu√° nhanh. Vui l√≤ng ƒë·ª£i AI ph·∫£n h·ªìi tr∆∞·ªõc khi g·ª≠i ti·∫øp."
        })
    now = datetime.utcnow()
    if user.last_sent_at and (now - user.last_sent_at).total_seconds() < 3:
        return jsonify({
            "success": False,
            "reply": "‚è≥ B·∫°n thao t√°c qu√° nhanh. Vui l√≤ng ch·ªù 3 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i."
        })
    user.pending_messages += 1
    user.last_sent_at = now
    db.session.commit()

    if user.over_quota_block:
        return jsonify({
            "success": False,
            "reply": (
                    "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay. H√£y quay l·∫°i sau 24 gi·ªù nh√©.br>"
                    " You‚Äôve reached today‚Äôs usage limit. Please try again in 24 hours."
            )
        })
    cap_nhat_trang_thai_vip(user)
    if username != "admin" and not user.vip_gpt_ai:
        return jsonify({"success": False, "reply": " B·∫°n ch∆∞a m·ªü kh√≥a g√≥i Solver Chat."})
    reset_usage_if_new_day(user)
    reset_image_quota_if_new_day(user)
    can_chat = check_and_update_quota(user)
    if not can_chat:
        return jsonify({
           "reply": (
                    "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay. H√£y quay l·∫°i sau 24 gi·ªù nh√©.<br>"
                    "  You‚Äôve reached today‚Äôs usage limit. Please try again in 24 hours."
                )
        })
    message = request.form.get("message", "").strip()
    reply_to = request.form.get("reply_to", "").strip()
    img_url = None
    try:
        history = json.loads(request.form.get("history", "[]"))
        has_uploaded_image = bool(request.files)
        if should_generate_image(message, has_uploaded_image):
            image_prompt = rewrite_prompt_for_image(message)
            if not image_prompt:
                return jsonify({"success": False, "reply": "The request has been denied, please try again later."})
            if user.image_quota_today is not None and user.image_quota_today <= 0:
                return jsonify({
                    "success": False,
                    "reply": """
                    <span style="color:#ffcc66; font-style:italic;">
                        ‚ö†Ô∏è The image generation system seems temporarily overloaded. Please try again later.
                    </span>
                    """
                })
            img_url = generate_image_from_prompt(image_prompt)
            if not img_url:
                return jsonify({"success": False, "reply": "Kh√¥ng t·∫°o ƒë∆∞·ª£c ·∫£nh, th·ª≠ l·∫°i sau nha!"})
            save_generated_image_log_backend(user.user_id, img_url, image_prompt, source="gpt_chat")
            user.image_quota_today = (user.image_quota_today or 0) - 1
            user.image_quota_reset_at = datetime.now()

            reply_text = """
                    <div style='text-align:center; margin-bottom:4px; font-size:14px; color:#aaa; animation:fadeIn 0.8s ease;'>
                    <div style='display:inline-flex; align-items:center; gap:6px; justify-content:center;'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" stroke="#0ea5e9"
                        stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-palette"
                        style="animation: pulseGlow 1.5s infinite ease-in-out;">
                        <circle cx="13.5" cy="6.5" r=".5"/>
                        <circle cx="17.5" cy="10.5" r=".5"/>
                        <circle cx="8.5" cy="7.5" r=".5"/>
                        <circle cx="6.5" cy="12.5" r=".5"/>
                        <path d="M12 22a10 10 0 1 1 8.5-4.7c-.8 1.4-2.6 1.2-3.5.6-.8-.5-1.6-1.4-2.5-1.4-1.3 0-2 1.3-2 2.5 0 1.3 1.2 2.5 2 3z"/>
                        </svg>
                        <span style="font-style:italic;">AI v·ª´a t·∫°o ·∫£nh n√†y</span>
                    </div>
                    </div>
                    """ + f"<br><img src='{img_url}' style='max-width:60%; border-radius:12px; margin:10px auto; display:block; box-shadow:0 2px 8px rgba(0,0,0,0.2);'>" 

            save_chat_sql(
                user_id=user.user_id,
                session_id=session_id,
                history=history + [
                    {"role": "user", "content": message},
                    {"role": "assistant", "content": reply_text, "image_url": img_url}
                ]
            )
            increase_gpt_usage(user)
            user.pending_messages = 0
            db.session.commit()
            return jsonify({"success": True, "reply": reply_text, "img_url": img_url})
    except Exception as e:
        history = []
    try:
        vision_texts = []
        vision_image_urls = []  
        vision_image_url = None
        for key in request.files:
            file = request.files[key]
            if file.filename:
                ext = os.path.splitext(file.filename)[-1]
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = secure_filename(f"{timestamp}_{username}_{key}{ext}")
                user_folder = os.path.join('static', 'images', 'uploads', str(user_id))
                os.makedirs(user_folder, exist_ok=True)
                save_path = os.path.join(user_folder, filename)
                file.save(save_path)
                vision_output = extract_with_gpt_vision(save_path, user_request=message)
                vision_texts.append(f"[·∫¢nh: {filename}]\n{vision_output}")
                vision_image_url = f"/static/images/uploads/{user_id}/{filename}"
                vision_image_urls.append(vision_image_url)
        user_original_message = message  
        if vision_texts:
            vision_combined = "\n\n".join(vision_texts)
            if message:
                message += f"\n\nüñº D∆∞·ªõi ƒë√¢y l√† n·ªôi dung AI tr√≠ch t·ª´ ·∫£nh:\n{vision_combined}"
            else:
                message = f"üñº AI ƒë√£ tr√≠ch n·ªôi dung t·ª´ ·∫£nh nh∆∞ sau:\n{vision_combined}"
        if reply_to:
            message = f'üí¨ B·∫°n ƒëang tr·∫£ l·ªùi l·∫°i ƒëo·∫°n AI tr∆∞·ªõc ƒë√¢y:\n"{reply_to}"\n\nüëâ Tin nh·∫Øn m·ªõi c·ªßa b·∫°n:\n{message}'
    
        reply = call_gpt_viet(vision_combined if vision_texts else message, history)
        increase_gpt_usage(user)
        save_chat_sql(
            user_id=user.user_id,
            session_id=session_id,
            history=history + [
                {
                    "role": "user",
                    "content": user_original_message,
                    "reply_to": reply_to,
                    "image_url": json.dumps(vision_image_urls)

                },
                {
                    "role": "assistant",
                    "content": reply,
                    "reply_to": reply_to,  
                    "image_url": None
                }
            ]
        )
        if user.vip_gpt_ai:  
            update_daily_usage(is_slv=True)
        else:
            update_daily_usage(is_slv=False)
        user = db.session.merge(user)

        try:
            db.session.commit()
        except Exception as e:
            pass
            from sqlalchemy.orm import Session

            # üß† C·∫≠p nh·∫≠t ChatHistory nh∆∞ b√¨nh th∆∞·ªùng
            db.session.add(ChatHistory(
                user_id=user.user_id,
                session_id=session_id,
                role="user",
                content=message
            ))
            db.session.add(ChatHistory(
                user_id=user.user_id,
                session_id=session_id,
                role="assistant",
                content=reply
            ))
            today = now_vn().strftime("%Y-%m-%d")
            if user.gpt_usage_date != today:
                user.gpt_usage_today = 0
                user.gpt_usage_date = today
            user.gpt_usage_today += 1
            user = db.session.merge(user)  
            try:
                db.session.commit()
            except Exception as e:
                pass
        socketio.emit("user_usage_update", {
                    "user_id": user.user_id,
                    "username": user.username,
                    "gpt_usage": user.gpt_usage_today,
                    "lite_usage": user.lite_usage,
                    "over_quota_block": user.over_quota_block,
                    "vip_gpt": user.vip_gpt or "",
                    "vip_lite": bool(user.vip_ai_lite),
                    "quota_alert": (
                        (user.vip_gpt in ["15day", "30day"] and not user.gpt_unlimited and user.gpt_usage_today >= 200)
                        if user.vip_gpt else False
                    )
                }, room="admin_dashboard")
        try:
            if session.get("dev_mode"):
                full_history = []
                for msg in history:
                    role = msg.get("role", "")
                    content = msg.get("content", "")
                    full_history.append({"role": role, "content": content})
                full_history.append({"role": "user", "content": message})
                full_history.append({"role": "assistant", "content": reply})

                db.session.add(DevChatHistory(
                    user_id=user.user_id,
                    session_id=session_id,
                    history=full_history,
                    created_at=datetime.utcnow()
                ))
                db.session.commit()
        except Exception as e:
            pass
        user.pending_messages = 0
        db.session.commit()
        return jsonify({
            "success": True,
            "reply": reply,
            "img_url": vision_image_url or img_url
        })
    except Exception as e:
        pass
        return jsonify({
            "reply": " H·ªá th·ªëng qu√° t·∫£i, b·∫°n h√£y th·ª≠ l·∫°i trong √≠t ph√∫t n·ªØa ho·∫∑c t·∫°o ƒëo·∫°n chat m·ªõi."
        })
    
@app.route("/submit_rating", methods=["POST"])
def submit_rating():
    if "user_id" not in session:
        return jsonify({"error": "Not logged in"}), 401

    data = request.get_json()
    stars = data.get("score")
    comment = data.get("comment", "")
    user_id = session["user_id"]
    session_id = session.get("chat_session_id")  
    user = User.query.filter_by(user_id=user_id).first()
    ai_personality = getattr(session, "ai_personality", None) 
    package_type = (
        "GPT"
        if user and user.vip_gpt_ai
        else "Lite"
    )

    fb = Feedback(
        user_id=user_id,
        session_id=session_id,
        stars=stars,
        comment=comment.strip(),
        ai_personality=ai_personality,
        package_type=package_type,
    )
    db.session.add(fb)
    db.session.commit()

    return jsonify({"message": "ƒê√£ g·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!"})    
def increase_gpt_usage(user):
    today = now_vn().strftime("%Y-%m-%d")

    if user.gpt_usage_date != today:
        user.gpt_usage_today = 0
        user.gpt_usage_date = today

    user.gpt_usage_today += 1
#==========CH·∫æ ƒê·ªò DEV CODE===========#
@app.route("/solvervietCode", methods=["GET"])
def redirect_to_code_slug():
    # N·∫øu ƒë√£ c√≥ r·ªìi th√¨ redirect l·∫°i slug c≈©
    if session.get("code_slug") and session.get("code_session_id"):
        return redirect(f"/solvervietCode/{session['code_slug']}")

    # Ng∆∞·ª£c l·∫°i th√¨ t·∫°o m·ªõi
    code_session_id = str(uuid.uuid4())
    code_slug = "code-" + secrets.token_hex(6)

    session["code_session_id"] = code_session_id
    session["code_slug"] = code_slug

    return redirect(f"/solvervietCode/{code_slug}")

@app.route("/solvervietCode/<slug>", methods=["GET"])
def code_chat(slug):
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    if session.get("code_slug") != slug:
        session["code_slug"] = slug

        existing = DevChatHistory.query.filter_by(user_id=user.user_id).filter(
            DevChatHistory.session_id.like(f"%{slug}")
        ).order_by(DevChatHistory.created_at.desc()).first()

        if existing:
            session["code_session_id"] = existing.session_id
        else:
            # N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
            session["code_session_id"] = f"{str(uuid.uuid4())[:8]}-{slug}"

    code_session_id = session.get("code_session_id")

    # ‚úÖ L·∫•y to√†n b·ªô l·ªãch s·ª≠ c·ªßa session v√† g·ªôp l·∫°i
    all_history = DevChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=code_session_id
    ).order_by(DevChatHistory.created_at.asc()).all()

    chat_history = []
    for item in all_history:
        if isinstance(item.history, list):
            for msg in item.history:
                if msg.get("role") == "user" and msg.get("type") == "file":
                    filename = msg.get("filename")
                    file_content = msg.get("content", "")
                    if filename:
                        msg = {
                            "role": "user",
                            "type": "text",
                            "content": "",
                            "attachedFiles": [{
                                "name": filename,
                                "content": file_content  # ‚úÖ g·∫Øn lu√¥n n·ªôi dung n·∫øu c√≥
                            }]
                        }
                chat_history.append(msg)
    return render_template("devcode.html",
        user=user,
        chat_session_id=code_session_id,
        slug=slug,
        chat_history_json=json.dumps(chat_history)
    )

def split_reply_to_blocks(content, language="plaintext"):
    pattern = re.compile(r"```(\w+)?\n([\s\S]*?)```")
    result = []
    last_end = 0

    for match in pattern.finditer(content):
        # ƒëo·∫°n text tr∆∞·ªõc code
        if match.start() > last_end:
            text = content[last_end:match.start()].strip()
            if text:
                result.append({
                    "role": "assistant",
                    "type": "text",
                    "content": text
                })
        
        lang = match.group(1) or language
        code = match.group(2).strip()
        result.append({
            "role": "assistant",
            "type": "code",
            "language": lang.strip().lower(),
            "content": code
        })

        last_end = match.end()

    # ph·∫ßn text sau c√πng (n·∫øu c√≥)
    if last_end < len(content):
        text = content[last_end:].strip()
        if text:
            result.append({
                "role": "assistant",
                "type": "text",
                "content": text
            })

    return result

from openai_config import (
    call_gpt_python, call_gpt_js, call_gpt_html,
    call_gpt_flutter, call_gpt_sql, call_gpt_java, call_gpt_cpp
)
@app.route("/code_infer", methods=["POST"])
def code_infer():
    if "username" not in session:
        return jsonify({"success": False, "reply": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    user = User.query.filter_by(username=session["username"]).first()
    if not user:
        return jsonify({"success": False, "reply": "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."})

    # ‚úÖ Kh√≥a spam g·ª≠i n·∫øu AI ch∆∞a tr·∫£ l·ªùi xong
    if session.get("code_infer_locked"):
        return jsonify({"success": False, "reply": "Vui l√≤ng ƒë·ª£i AI tr·∫£ l·ªùi xong tr∆∞·ªõc khi g·ª≠i ti·∫øp."})
    
    session["code_infer_locked"] = True  # kh√≥a l·∫°i ngay

    try:
        message = request.form.get("message", "").strip()
        files_json = request.form.get("files", "[]")
        file_contents = []

        try:
            attached_files = json.loads(files_json)
            if not isinstance(attached_files, list): attached_files = []
        except Exception:
            attached_files = []

        for f in attached_files:
            fname = f.get("name", "file.txt")
            content = f.get("content", "")
            if len(content.strip()) > 0:
                file_contents.append(f"üìÑ N·ªôi dung file **{fname}**:\n```text\n{content.strip()}\n```")
        if file_contents:
            message += "\n\n" + "\n\n".join(file_contents)
        session_id = request.form.get("session_id") or session.get("code_session_id")
        history_json = request.form.get("history", "[]")
        language = request.form.get("language", "python").lower()
        images_json = request.form.get("images", "[]")

        try:
            images = json.loads(images_json)
            if not isinstance(images, list): images = []
        except Exception: images = []

        try:
            history = json.loads(history_json)
            if not isinstance(history, list): history = []
        except Exception: history = []

        def clean_base64(img):
            return img.split(",")[-1]

        # ‚úÖ G·ªçi GPT theo ng√¥n ng·ªØ
        if language == "python":
            reply = call_gpt_python(message, history, images=images)
        elif language in ["js", "javascript"]:
            reply = call_gpt_js(message, history, images=images)
        elif language == "html":
            reply = call_gpt_html(message, history, images=images)
        elif language in ["flutter", "dart"]:
            reply = call_gpt_flutter(message, history, images=images)
        elif language == "sql":
            reply = call_gpt_sql(message, history, images=images)
        elif language == "java":
            reply = call_gpt_java(message, history, images=images)
        elif language in ["cpp", "c++"]:
            reply = call_gpt_cpp(message, history, images=images)
        else:
            reply = "‚ùå Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."

        assistant_blocks = split_reply_to_blocks(reply.strip(), language)
        user_blocks = []
        if message:
            user_blocks.append({
                "role": "user",
                "type": "text",
                 "content": request.form.get("message", "").strip()  
            })
        for f in attached_files:
            fname = f.get("name", "file.txt")
            fcontent = f.get("content", "")
            user_blocks.append({
                "role": "user",
                "type": "file",
                "filename": fname,
                "content": fcontent  
            }) 
        for img_b64 in images:
            user_blocks.append({
                "role": "user",
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/png;base64,{clean_base64(img_b64)}",
                    "detail": "auto"
                }
            })

        combined_history = history + user_blocks + assistant_blocks

        db.session.add(DevChatHistory(
            user_id=user.user_id,
            session_id=session_id,
            history=combined_history,
            created_at=datetime.utcnow()
        ))
        db.session.commit()

        return jsonify({
            "success": True,
            "reply": reply,
            "blocks": assistant_blocks
        })

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω GPT:", str(e))
        return jsonify({"success": False, "reply": "‚ùå H·ªá th·ªëng g·∫∑p l·ªói, th·ª≠ l·∫°i sau."})

    finally:
        session["code_infer_locked"] = False

@app.route("/get_code_history/<slug>")
def get_code_history(slug):
    username = session.get("username")
    if not username:
        return jsonify({"success": False, "messages": []})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "messages": []})

    session_id = session.get("code_session_id")
    if not session_id:
        return jsonify({"success": False, "messages": []})

    # ‚úÖ L·∫•y t·∫•t c·∫£ c√°c b·∫£n ghi theo session_id v√† g·ªôp l·∫°i
    all_history = DevChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=session_id
    ).order_by(DevChatHistory.created_at.asc()).all()

    combined = []
    for item in all_history:
        if isinstance(item.history, list):
            for block in item.history:
                # üêû TH√äM D√íNG SAU ƒê·ªÇ DEBUG
                if block.get("role") == "user":
                    print("üß© USER BLOCK:", block)
            combined.extend(item.history)

    return jsonify({
        "success": True,
        "messages": combined
    })

@app.route("/new_code_chat", methods=["POST"])
def new_code_chat():
    if "username" not in session:
        return jsonify({"success": False, "error": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    user = User.query.filter_by(username=session["username"]).first()
    if not user:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."})

    old_session_id = session.get("code_session_id")
    print("üîç Session c≈©:", old_session_id)

    # ‚úÖ Xo√° l·ªãch s·ª≠ n·∫øu c√≥ session c≈©
    if old_session_id:
        try:
            deleted = DevChatHistory.query.filter_by(user_id=user.user_id, session_id=old_session_id).delete()
            db.session.commit()
            print(f"‚úÖ ƒê√£ xo√° {deleted} b·∫£n ghi c·ªßa session c≈©: {old_session_id}")
        except Exception as e:
            print("‚ùå L·ªói khi x√≥a session c≈©:", str(e))
            db.session.rollback()

    # üîÑ T·∫°o session m·ªõi
    code_session_id = f"{str(uuid.uuid4())[:8]}-code-{secrets.token_hex(6)}"
    code_slug = code_session_id.split("-code-")[-1]
    session["code_session_id"] = code_session_id
    session["code_slug"] = code_slug

    print(f"üöÄ T·∫°o session m·ªõi: {code_session_id}")
    return jsonify({"success": True, "redirect": f"/solvervietCode/{code_slug}"})



def today_str():
    return now_vn().strftime("%Y-%m-%d")

def check_and_update_quota(user):
    now = datetime.utcnow()

    # ---------- 1. Reset khi sang ng√†y m·ªõi ----------
    if user.gpt_usage_date != today_str():
        user.gpt_usage_today = 0
        user.gpt_usage_date  = today_str()

    # ---------- 2. T·ª± ƒë·ªông g·ª° ch·∫∑n n·∫øu ƒë√£ qu√° 24h ----------
    if user.over_quota_block and user.over_quota_block_at:
        if now - user.over_quota_block_at > timedelta(hours=24):
            user.over_quota_block = False
            user.over_quota_block_at = None
            user.gpt_usage_today = 0  # reset l∆∞·ª£t ƒë·ªÉ tr√°nh ch·∫∑n l·∫°i li·ªÅn

    # ---------- 3. X√°c ƒë·ªãnh h·∫°n m·ª©c ----------
    if user.gpt_unlimited:
        return True  # G√≥i kh√¥ng gi·ªõi h·∫°n

    limit = None
    if user.vip_gpt == "5day":
        limit = 100
    elif user.vip_gpt in ("15day", "30day"):
        limit = 200

    # N·∫øu kh√¥ng c√≥ g√≥i t√≠nh l∆∞·ª£t ‚Üí cho ph√©p
    if limit is None:
        return True

    # ---------- 4. Ki·ªÉm tra quota hi·ªán t·∫°i ----------
    if user.gpt_usage_today >= limit:
        if not user.over_quota_block:
            user.over_quota_block = True
            user.over_quota_block_at = now
        return False  # V∆∞·ª£t quota ‚Üí ch·∫∑n
    else:
        return True  # Ch∆∞a v∆∞·ª£t quota ‚Üí cho ph√©p

def reset_usage_if_new_day(user):
    today = now_vn().strftime("%Y-%m-%d")
    if user.gpt_usage_date != today:
        user.gpt_usage_today = 0
        user.gpt_usage_date = today
import datetime as dt

def to_dt(val):
    if not val:
        return None
    if isinstance(val, dt.datetime):
        return val
    for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%dT%H:%M:%S", "%Y-%m-%d"):
        try:
            return dt.datetime.strptime(str(val), fmt)
        except:
            pass
    return None
def reset_pending_if_needed(user):
    now = datetime.utcnow()

    if user.last_sent_at and (now - user.last_sent_at) >= timedelta(minutes=17):
        user.pending_messages = 0
        db.session.commit()


@app.route("/chat_ai_lite", methods=["POST"])
def chat_ai_lite():
    if is_maintenance("chat_ai_lite_daily") or is_maintenance("all"):
        return jsonify({"reply": "üöß H·ªá th·ªëng ƒëang b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau!"}), 503

    username = session.get("username")
    user = User.query.filter_by(username=username).first() if username else None
    if not user:
        session.clear()
        return jsonify({"reply": "‚ùå Phi√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."}), 403
    reset_pending_if_needed(user)
    if user.pending_messages is None:
        user.pending_messages = 0

    if user.pending_messages >= 4:
        return jsonify({
            "reply": "‚ö†Ô∏è B·∫°n ƒëang g·ª≠i qu√° nhanh. Vui l√≤ng quay l·∫°i sau 17 ph√∫t ƒë·ªÉ ti·∫øp t·ª•c tr√≤ chuy·ªán."
        })

    now = datetime.utcnow()
    if user.last_sent_at and (now - user.last_sent_at).total_seconds() < 3:
        return jsonify({
            "reply": "‚è≥ B·∫°n thao t√°c qu√° nhanh. Vui l√≤ng ch·ªù 3 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i."
        })

    user.pending_messages += 1
    user.last_sent_at = datetime.utcnow()
    user.last_sent_at = now
    db.session.commit()
    if user.is_blocked:
        session.clear()
        return jsonify({
            "reply": "üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒëƒÉng xu·∫•t. N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng <a href='/appeal' style='color:#4ea6ff;'>li√™n h·ªá h·ªó tr·ª£</a>."
        }), 403

    now_local = now_vn()  
    vip_dt = to_dt(user.vip_until_lite)
    if vip_dt and now_local <= vip_dt:
        if is_maintenance("chat_lite"):
            return jsonify({"reply": "üöß AI Lite ƒëang b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau!"}), 503
    elif user.is_verified and is_maintenance("chat_ai_lite"):
        return jsonify({"reply": "üöß AI Free 15 l∆∞·ª£t ƒëang b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau!"}), 503

    usage_check = check_lite_usage(user)
    user = db.session.merge(user)
    if usage_check == "require_verification":
        return jsonify({"reply": "B·∫°n c·∫ßn <a href='/verify-otp' style='color:#00e676;font-weight:bold;'>x√°c minh t√†i kho·∫£n</a> ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp."})
    elif usage_check is False:
        now = now_vn()
        if user.is_blocked:
            return jsonify({
                "reply": "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng g·ª≠i khi·∫øu n·∫°i t·∫°i <a href='/appeal' style='color:#4ea6ff;'>ƒë√¢y</a>."
            })
        try:
            vip_dt = to_dt(user.vip_until_lite)
            if vip_dt and now <= vip_dt:
                return jsonify({
                    "reply": (
                            "<strong> G√≥i AI Lite:</strong> ƒê√£ d√πng h·∫øt 70 l∆∞·ª£t h√¥m nay. "
                            "Vui l√≤ng quay l·∫°i v√†o ng√†y mai.<br>"
                            "<em>AI Lite:</em> 70 turns used today. Please try again tomorrow!"
                        )
                })
        except:
            pass
        if user.is_verified:
            return jsonify({
                "reply": "You have reached today's limit, please come back tomorrow"
            })

        # ‚úÖ N·∫øu ch∆∞a x√°c th·ª±c ‚Üí g·ª£i √Ω x√°c th·ª±c
        return jsonify({
            "reply": " B·∫°n ƒë√£ d√πng h·∫øt 5 l∆∞·ª£t mi·ªÖn ph√≠. Vui l√≤ng x√°c th·ª±c t√†i kho·∫£n ƒë·ªÉ nh·∫≠n th√™m 10 l∆∞·ª£t n·ªØa!"
        })
    # --- x·ª≠ l√Ω message ---
    message = request.form.get("message", "").strip()
    if not message:
        return jsonify({"reply": "B·∫°n ch∆∞a nh·∫≠p n·ªôi dung c√¢u h·ªèi."})

    history_str = request.form.get("history", "[]")
    try:
        history = json.loads(history_str)
        if isinstance(history, list):
            history = history[-15:]
    except Exception as e:
        history = []
    if re.search(r"\b(v·∫Ω ·∫£nh|t·∫°o ·∫£nh|minh ho·∫°|minh h·ªça|v·∫Ω tranh|v·∫Ω|t·∫°o tranh)\b", message, re.IGNORECASE):
        reply = "R·∫•t ti·∫øc, phi√™n b·∫£n AI n√†y kh√¥ng h·ªó tr·ª£ t·∫°o ·∫£nh ho·∫∑c v·∫Ω. Vui l√≤ng th·ª≠ l·∫°i sau.\nSorry, this AI version does not support image generation or drawing. Please try again later."
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": reply})

        user_id = session.get("user_id")
        if user_id:
            if "chat_session_id" not in session:
                session["chat_session_id"] = str(uuid.uuid4())
            session_id = session["chat_session_id"]
            save_chat_sql(user_id, session_id, history)

       
        return jsonify({"reply": reply})
    # --- x·ª≠ l√Ω ·∫£nh ---
    images = []
    vision_texts = []
    image_tags = []
    for key in request.files:
        file = request.files[key]
        if file.filename:
            ext = os.path.splitext(file.filename)[-1]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = secure_filename(f"{timestamp}_guest_{key}{ext}")
            save_path = os.path.join('static/images/uploads', filename)
            file.save(save_path)
            image_url = f"/static/images/uploads/{filename}"
            image_tags.append(f"<img src='{image_url}' style='max-width:200px; border-radius:8px; margin-top:8px;'>")
            vision_output = extract_with_gpt_vision(save_path, user_request=message)
            vision_texts.append(f"[·∫¢nh: {filename}]\n{vision_output}")

    if vision_texts:
        if image_tags:
            message += "<br>" + "<br>".join(image_tags)
        vision_context = "\n\n".join(vision_texts)
    else:
        vision_context = ""

    try:
        if vision_context:
            message_for_gpt = message + "\n\n# G·ª£i √Ω t·ª´ ·∫£nh:\n" + vision_context
        else:
            message_for_gpt = message

        reply = call_gpt_lite(message_for_gpt, history)
    except Exception as e:
        return jsonify({"reply": "‚ö†Ô∏è H·ªá th·ªëng qu√° t·∫£i, b·∫°n h√£y th·ª≠ l·∫°i trong √≠t ph√∫t n·ªØa ho·∫∑c t·∫°o ƒëo·∫°n chat m·ªõi."})

    if vision_texts:
        reply += "\n\nC√≥ th·ªÉ m·ªôt v√†i chi ti·∫øt trong ·∫£nh h∆°i m·ªù nh·∫°t ho·∫∑c sai. Mong b·∫°n ki·ªÉm tra l·∫°i gi√∫p m√¨nh nha."

    history.append({"role": "user", "content": message})
    history.append({"role": "assistant", "content": reply})
    user_id = session.get("user_id")
    if "chat_session_id" not in session:
        session["chat_session_id"] = str(uuid.uuid4())
    session_id = session["chat_session_id"]
    save_chat_sql(user_id, session_id, history)
    update_daily_usage(is_slv=False)
    # --- tr·ª´ l∆∞·ª£t n·∫øu ch∆∞a x√°c th·ª±c ---
    if not user.is_verified:
        vip_dt = to_dt(user.vip_until_lite)
        if not vip_dt or now_vn() > vip_dt:
            user.free_gpt_uses = max(0, (user.free_gpt_uses or 0) - 1)
            db.session.commit()
    user.pending_messages = 0
    db.session.commit()
    return jsonify({"reply": reply})

#AI LITE
def generate_chat_lite_slug():
    return str(uuid.uuid4())
@app.route("/chat_lite", methods=["GET"])
def redirect_chat_lite():
    slug = generate_chat_lite_slug()
    return redirect(f"/chatLiteG9yZ/{slug}")    
@app.route("/chatLiteG9yZ/<slug>", methods=["GET"])
def chat_lite(slug):
    if is_maintenance("chat_lite"):
        return render_template("maintenance.html")

    username = session.get("username")
    user_id = session.get("user_id")

    if not username or not user_id:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    # üõ°Ô∏è N·∫øu ch∆∞a x√°c th·ª±c v√† ƒë√£ h·∫øt l∆∞·ª£t mi·ªÖn ph√≠ ‚Üí b·∫Øt x√°c th·ª±c
    if not user.is_verified and (user.free_gpt_uses or 0) <= 0:
        return redirect("/verify-otp")

    # ‚ùå N·∫øu c√≥ g√≥i GPT ‚Üí redirect
    now = now_vn()
    def valid(s):
        try:
            return datetime.strptime(s, "%Y-%m-%d %H:%M:%S") > now
        except:
            return False

    if user.vip_gpt_ai and valid(user.vip_until_gpt or ""):
        return redirect("/chat_redirect")

    # ‚úÖ N·∫øu kh√¥ng c√≥ chat_session_id th√¨ t·∫°o session m·ªõi
    if "chat_session_id" not in session:
        session["chat_session_id"] = str(uuid.uuid4())
    session_id = session["chat_session_id"]

    # ‚úÖ Ki·ªÉm tra xem session_id c√≥ trong DB ch∆∞a, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi
    existing_session = ChatSession.query.filter_by(id=session_id).first()
    if not existing_session:
        new_session = ChatSession(
            id=session_id,
            user_id=user.user_id,
            created_at = dt.datetime.now(dt.timezone.utc),
            title="ƒêo·∫°n chat m·ªõi"
        )
        db.session.add(new_session)
        db.session.commit()

    # ‚úÖ L·∫•y l·ªãch s·ª≠ chat t·ª´ DB
    chat_history_objs = ChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=session_id
    ).order_by(ChatHistory.id.asc()).all()

    chat_history = [
        {"role": msg.role, "content": msg.content}
        for msg in chat_history_objs
    ]
    if chat_history and chat_history[-1]["role"] == "assistant":
        chat_history = chat_history[:-1]

    return render_template(
        "chat_ai_lite.html",
        user_id=user_id,
        username=username,
        user_lite_exhausted=False,
        is_verified=user.is_verified,
        chat_history=chat_history,
        chat_id=session_id,
        chat_title="ƒêo·∫°n chat m·ªõi",
        is_maintenance=is_maintenance("chat_lite")
    )

#RESET LU·ª¢T M·ªñI NG√ÄY
@app.route("/chat_ai_lite", methods=["GET"])
def chat_ai_lite_page():
    if is_maintenance("chat_ai_lite_daily"):
        return render_template("maintenance.html")

    username = session.get("username")
    user_id = session.get("user_id")

    if not username or not user_id:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    if not user.is_verified and (user.free_gpt_uses or 0) <= 0:
        return redirect("/verify-otp")

    now = now_vn()
    def valid(date_str):
        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d"):
            try:
                return datetime.strptime(date_str, fmt) > now
            except:
                continue
        return False
    if (user.vip_gpt_ai and valid(user.vip_until_gpt or "")) or \
       (user.vip_ai_lite and valid(user.vip_until_lite or "")):
        return redirect("/chat_redirect")

    # üóÇ L·ªãch s·ª≠ ƒëo·∫°n chat
    chat_history = []
    chat_file = os.path.join("chat_history", f"{user_id}.json")
    if os.path.exists(chat_file):
        try:
            with open(chat_file, "r", encoding="utf-8") as f:
                chat_history = json.load(f)
        except Exception as e:
            print(f"[üí•] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c chat_history: {e}")

    return render_template(
        "chat_ai_lite_daily.html",
        user_id=user_id,
        username=username,
        user_lite_exhausted=False,
        is_verified=user.       verified,
        chat_history=chat_history,
        chat_id=None,
        chat_title="",
        is_maintenance=is_maintenance("chat_ai_lite")
    )


@app.route("/chat_redirect", methods=["GET"])
def chat_redirect():
    if is_maintenance("chat_ai_lite_daily") or \
       is_maintenance("chat_ai_lite") or \
       is_maintenance("chat_lite") or \
       is_maintenance("gpt_chat"):
        return render_template("maintenance.html")

    username = session.get("username")
    if not username:
        return redirect("/login")
    
    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")
    if getattr(user, "is_blocked", False):
        session.clear()
        error = ("üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√°. "
                 "N·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n, vui l√≤ng g·ª≠i khi·∫øu n·∫°i "
                 "t·∫°i <a href='/appeal' style='color:#4ea6ff;'>ƒë√¢y</a>.")
        return render_template("login.html", error=error)
    now = now_vn()

    def valid(dt):
        try:
            if isinstance(dt, str):
                dt = datetime.strptime(dt, "%Y-%m-%d %H:%M:%S")
            return dt > now
        except:
            return False

    # G√≥i GPT c√≤n h·∫°n
    if user.vip_gpt and valid(user.vip_until_gpt):
        return redirect("/solvervietAIwatch")  # gpt_chat.html

    # G√≥i AI Lite c√≤n h·∫°n
    if user.vip_ai_lite and valid(user.vip_until_lite):
        slug = generate_chat_lite_slug()
        return redirect(f"/chatLiteG9yZ/{slug}")

    # T√†i kho·∫£n m·ªõi t·∫°o (15 l∆∞·ª£t free)
    if (user.free_gpt_uses or 0) > 0:
        return render_template("chat_ai_15.html", chat_history=[])

    # ƒê√£ x√°c th·ª±c ‚Üí Free 5 l∆∞·ª£t m·ªói ng√†y
    if user.is_verified:
        return render_template("chat_ai_lite_daily.html", chat_history=[])

    # Ch∆∞a x√°c th·ª±c, h·∫øt free ‚Üí B·∫Øt x√°c th·ª±c
    flash("üì© B·∫°n c·∫ßn x√°c th·ª±c email ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng AI.")
    return redirect("/verify-otp")


#G·ª¨I TIN T·ª™ HOME QUA AI V√Ä T·ª∞ KI·ªÇM TRA TH√îNG MINH
@app.route("/get-user-package")
def get_user_package():
    username = session.get("username")
    if not username:
        return jsonify({"status": "not_logged_in"})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"status": "not_logged_in"})

    now = now_vn()

    # Ki·ªÉm tra VIP GPT
    is_vip_gpt = False
    if user.vip_gpt:
        try:
            vip_until = datetime.strptime(user.vip_until_gpt, "%Y-%m-%d %H:%M:%S")
            is_vip_gpt = now <= vip_until
        except:
            pass

    # Ki·ªÉm tra g√≥i AI Lite
    is_lite = False
    if user.vip_ai_lite:
        try:
            lite_until = datetime.strptime(user.vip_until_lite, "%Y-%m-%d %H:%M:%S")
            is_lite = now <= lite_until
        except:
            pass

    return jsonify({
        "status": "ok",
        "is_vip_gpt": is_vip_gpt,
        "is_lite": is_lite,
        "verified": user.is_verified
    })


#AI V·∫º H√åNH
def generate_ai_prompt(user_text):
    return (
        f"T·∫°o h√¨nh ·∫£nh theo m√¥ t·∫£: {user_text}. "
        "·∫¢nh n√™n r√µ r√†ng, tr√¨nh b√†y ƒë·∫πp, kh√¥ng th√™m chi ti·∫øt d∆∞ th·ª´a, ph√π h·ª£p s√°ch v·ªü ho·∫∑c minh ho·∫° h·ªçc thu·∫≠t."
    )
def translate_to_english(text):
    try:
        client = create_openai_client()
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a professional translator. Translate Vietnamese prompts into natural English for AI image generation. Only return the English text."
                },
                {"role": "user", "content": text}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return text

def enhance_prompt_style(eng_prompt):
    styles = [
        "highly detailed",
        "ultra realistic",
        "cinematic lighting",
        "4K resolution",
        "soft glow",
        "beautiful composition",
        "emotional atmosphere"
    ]
    return f"{eng_prompt}, {', '.join(styles)}"
def get_final_prompt(prompt_vn):
    rewritten = rewrite_prompt_for_image(prompt_vn)
    # üß† Kh√¥ng c·∫ßn translate n·ªØa v√¨ GPT ƒë√£ vi·∫øt s·∫µn prompt ti·∫øng Anh
    enhanced = enhance_prompt_style(rewritten)
    return enhanced

def generate_image_from_user_input(prompt_vn):
    try:
        final_prompt = get_final_prompt(prompt_vn)
        return generate_image_from_prompt(final_prompt)
    except Exception as e:
        return None
@app.route("/generate_image_from_text", methods=["POST"])
def draw_math_figure():
    data = request.json
    user_input = data.get("text", "").strip()

    if not user_input:
        return jsonify({"error": "B·∫°n ch∆∞a nh·∫≠p n·ªôi dung c·∫ßn v·∫Ω."})

    # ‚úÖ Ki·ªÉm tra quota n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
    if current_user.is_authenticated:
        if not check_and_update_quota(current_user):
            return jsonify({
                "error": " H·ªá th·ªëng ƒëang t·∫°m ng∆∞ng x·ª≠ l√Ω do l∆∞u l∆∞·ª£ng truy c·∫≠p cao t·ª´ t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng quay l·∫°i sau 24 gi·ªù.<br>"
                    " System temporarily paused your access due to high activity. Please try again later."
            })

    try:
        img_url = generate_image_from_user_input(user_input)

        # ‚úÖ L∆∞u l·ªãch s·ª≠ n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
        if current_user.is_authenticated:
            log = ImageHistory(
                user_id=current_user.user_id,
                prompt=user_input,
                image_url=img_url
            )
            db.session.add(log)
            db.session.commit()

        return jsonify({"img_url": img_url, "source": "ai"})

    except Exception as e:
        return jsonify({"error": "Kh√¥ng t·∫°o ƒë∆∞·ª£c h√¨nh t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i."})

@app.route("/generate_image", methods=["POST"])
def generate_image():
    username = session.get("username")
    if not username:
        return jsonify({"error": "üîí B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"error": "üîí Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."})

    cap_nhat_trang_thai_vip(user)
    db.session.commit()

    # ‚úÖ Ch·∫∑n n·∫øu kh√¥ng ph·∫£i g√≥i GPT AI
    if username != "admin":
        if not user.vip_gpt_ai:
            return jsonify({"error": "‚ö†Ô∏è G√≥i c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ t·∫°o ·∫£nh. H√£y n√¢ng c·∫•p l√™n g√≥i SLV."})
        
        # ‚úÖ G·ªåI H√ÄM KI·ªÇM TRA QUOTA GPT
        if not check_and_update_quota(user):
            return jsonify({
                "error": " H·ªá th·ªëng ƒëang t·∫°m ng∆∞ng x·ª≠ l√Ω do l∆∞u l∆∞·ª£ng truy c·∫≠p cao t·ª´ t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng quay l·∫°i sau 24 gi·ªù.<br>"
                    " System temporarily paused your access due to high activity. Please try again later."
            })
        
        # ‚úÖ Reset quota ·∫£nh n·∫øu sang ng√†y m·ªõi
        now = datetime.now()
        if not user.image_quota_reset_at or user.image_quota_reset_at.date() < now.date():
            user.image_quota_today = 10
            user.image_quota_reset_at = now
            db.session.commit()

        # ‚úÖ Ch·∫∑n n·∫øu h·∫øt l∆∞·ª£t t·∫°o ·∫£nh
        if user.image_quota_today <= 0:
            return jsonify({"error": "The image generation system seems temporarily overloaded. Please try again later."})

    # ‚úÖ Ki·ªÉm tra prompt ƒë·∫ßu v√†o
    prompt = request.json.get("prompt", "").strip()
    if not prompt:
        return jsonify({"error": "‚ùå B·∫°n ch∆∞a nh·∫≠p n·ªôi dung h√¨nh mu·ªën t·∫°o."})

    try:
        # ‚ú® Rewrite prompt b·∫±ng GPT ƒë·ªÉ ra prompt ƒë·∫πp
        final_prompt = rewrite_prompt_for_image(prompt)

        if not final_prompt:
            return jsonify({
                "error": "‚ö†Ô∏è H√¨nh ·∫£nh b·∫°n y√™u c·∫ßu kh√¥ng th·ªÉ t·∫°o do vi ph·∫°m ƒëi·ªÅu kho·∫£n n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i v·ªõi m√¥ t·∫£ kh√°c kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn khu√¥n m·∫∑t th·∫≠t, nh·∫≠n di·ªán c√° nh√¢n ho·∫∑c n·ªôi dung nh·∫°y c·∫£m."
            })

        # ‚úÖ Tr·ª´ l∆∞·ª£t t·∫°o ·∫£nh
        if username != "admin":
            user.image_quota_today -= 1
            db.session.commit()

        # ‚úÖ T·∫°o ·∫£nh
        img_url = generate_image_from_prompt(final_prompt)

        if not img_url:
            return jsonify({"error": "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau."})

        return jsonify({"img_url": img_url})

    except Exception as e:
        return jsonify({"error": "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau."})

@app.route("/save_generated_image_log", methods=["POST"])
def save_generated_image_log():
    user_id = session.get("user_uuid")
    if not user_id:
        return "", 204

    data = request.get_json()
    prompt = data.get("prompt", "")
    image_url = data.get("image_url", "")
    message_index = data.get("message_index")  

    if prompt and image_url:
        log = ImageHistory(
            user_id=user_id,
            prompt=prompt,
            image_url=image_url,
            message_index=message_index 
        )
        db.session.add(log)
        db.session.commit()

    return "", 204

@app.route("/get_image_history")
def get_image_history():
    if "user_id" not in session:
        return jsonify([])

    image_logs = ImageHistory.query.filter_by(user_id=session["user_id"]).order_by(ImageHistory.created_at.desc()).all()
    result = [
        {
            "prompt": log.prompt,
            "image_url": log.image_url,
            "created_at": log.created_at.isoformat(),
            "message_index": log.message_index  # üëà th√™m v√†o response
        }
        for log in image_logs
    ]
    return jsonify(result)
def save_generated_image_log_backend(user_id, image_url, prompt, message_index=None, source="gpt_chat"):
    try:
        log = ImageHistory(
            user_id=user_id,
            image_url=image_url,
            prompt=prompt,
            source=source,
            message_index=message_index, 
            created_at=datetime.utcnow()
        )
        db.session.add(log)
        db.session.commit()
    except Exception as e:
        pass

#G·ª¨I FILE
@app.route("/upload_file", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        return jsonify({"reply": "Kh√¥ng c√≥ file ƒë∆∞·ª£c g·ª≠i."}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"reply": "File kh√¥ng h·ª£p l·ªá."}), 400

    filename = secure_filename(file.filename)
    user_id = session.get("user_id", "guest")
    existing_path = os.path.join("static", "images", "uploads", user_id, filename)

    if not os.path.exists(existing_path):
        return jsonify({"reply": "‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°."}), 400

    os.utime(existing_path, None)

    return jsonify({"reply": f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh: {filename}"})

#M·ªû √ÇM BUM
@app.route("/get_user_album")
def get_user_album():
    user_id = session.get("user_id", "guest")
    upload_dir = os.path.join("static", "images", "uploads", str(user_id))

    now = time.time()
    max_age = 7 * 86400  

    images = []
    if os.path.exists(upload_dir):
        for filename in os.listdir(upload_dir):
            if filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".webp")):
                path = os.path.join(upload_dir, filename)
                mtime = os.path.getmtime(path)
                age = now - mtime
                if age <= max_age:
                    images.append({
                        "path": f"/{path.replace(os.sep, '/')}"
                    })

    return jsonify({"images": images})
#L·ªäCH S·ª¨ ƒêO·∫†N CHAT
from models import ChatHistory
from sqlalchemy.exc import SQLAlchemyError

@app.route("/save_chat", methods=["POST"])
def save_chat_route():
    user_id = session.get("user_id")
    session_id = session.get("chat_session_id")

    if not user_id or not session_id:
        return jsonify({"error": "Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c ch∆∞a c√≥ session"}), 401

    data = request.get_json()
    messages = data.get("messages", [])

    try:
        ChatHistory.query.filter_by(user_id=user_id, session_id=session_id).delete()

        for msg in messages:
            db.session.add(ChatHistory(
                user_id=user_id,
                session_id=session_id,
                role=msg.get("role"),
                content=msg.get("content"),
                timestamp=datetime.utcnow()
            ))

        db.session.commit()
        return jsonify({"status": "saved"})
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500


@app.route("/load_chat/<chat_id>")
def load_chat(chat_id):
    user_id = session.get("user_id", "guest")
    if user_id == "guest":
        return jsonify({"error": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."}), 401

    user = User.query.filter_by(user_id=user_id).first()

    if not user:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."}), 404

    user_uuid = user.user_id  # d√πng UUID string

    # Truy v·∫•n l·ªãch s·ª≠ chat theo session_id (chat_id)
    messages = ChatHistory.query.filter_by(
        user_id=user_uuid,
        session_id=chat_id
    ).order_by(ChatHistory.timestamp).all()

    if not messages:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ƒëo·∫°n chat."}), 404

    return jsonify({
        "chat": [
            {"role": msg.role, "content": msg.content}
            for msg in messages
        ]
    })

@app.route("/reset_current_chat")
def reset_current_chat():
    session.pop("current_chat_id", None)
    return jsonify({"success": True})

import shutil
import os
@app.route("/new_chat", methods=["POST"])
def new_chat():
    try:
        user_id = session.get("user_id")
        if not user_id:
            return jsonify({"success": False, "error": "Kh√¥ng c√≥ user_id trong session"})

        user = User.query.filter_by(user_id=user_id).first()
        if not user:
            return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"})

        current_session_id = session.get("chat_session_id")

        # ‚úÖ Ki·ªÉm tra n·∫øu ƒëo·∫°n chat hi·ªán t·∫°i ch∆∞a l∆∞u ‚Üí x√≥a
        is_saved = ChatHistory.query.filter_by(
            session_id=current_session_id,
            is_saved=True
        ).first()

        if not is_saved:
            # üßπ D·ªçn s·∫°ch l·ªãch s·ª≠ ch∆∞a l∆∞u (KH√îNG x√≥a ·∫£nh n·ªØa)
            ChatHistory.query.filter_by(user_id=user_id, is_saved=False).delete()
            ChatSession.query.filter_by(user_id=user_id).delete()

        # ‚úÖ T·∫°o phi√™n m·ªõi
        new_session_id = str(uuid.uuid4())
        new_slug = str(uuid.uuid4())

        session["chat_session_id"] = new_session_id
        session["slug_to_session"] = {
            "slug": new_slug,
            "session_id": new_session_id
        }

        new_session = ChatSession(
            id=new_session_id,
            user_id=user_id,
            created_at=datetime.utcnow(),
            title="ƒêo·∫°n chat m·ªõi"
        )
        db.session.add(new_session)
        db.session.commit()

        return jsonify({"success": True, "session_id": new_session_id, "slug": new_slug})

    except Exception as e:
        return jsonify({"success": False, "error": str(e)})


#T∆Ø∆†NG T√ÅC V·ªöI NG∆Ø·ªúI D√ôNG
@app.route('/send-emoji', methods=['POST'])
def handle_emoji():
    if "username" not in session:
        return jsonify({"success": False, "ai_reply": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."})

    data = request.get_json()
    emoji = data.get('emoji')
    last_reply = data.get('last_reply', '').strip()

    # Kh√¥ng ph·∫£n h·ªìi n·∫øu c√¢u tr∆∞·ªõc l·ªói
    if any(w in last_reply for w in ["‚ö†Ô∏è", "üö´", "‚ùå", "System temporarily paused", "Vui l√≤ng quay l·∫°i sau", "Error: The system is currently overloaded."]):
        return jsonify({"ai_reply": None})

    username = session["username"]
    user_id = session.get("user_id", "guest")
    session_id = session.get("chat_session_id")
    if not session_id:
        session_id = str(uuid.uuid4())
        session["chat_session_id"] = session_id

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"success": False, "ai_reply": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."})

    # Tr·ª´ l∆∞·ª£t n·∫øu c·∫ßn
    cap_nhat_trang_thai_vip(user)
    reset_usage_if_new_day(user)
    if not check_and_update_quota(user):
        return jsonify({"success": False, "ai_reply": "‚ö†Ô∏èB·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay. Quay l·∫°i sau 24h nh√©!"})

    # Chu·∫©n b·ªã prompt
    ai_personality = user.ai_personality or "b√¨nh th∆∞·ªùng"
    emotion_prompts = {
        "‚ù§Ô∏è": "Ng∆∞·ªùi d√πng r·∫•t th√≠ch c√¢u tr·∫£ l·ªùi. H√£y ph·∫£n h·ªìi nh·∫π nh√†ng, t√≠ch c·ª±c v√† ti·∫øp t·ª•c m·∫°ch h·ªôi tho·∫°i.",
        "üòÇ": "Ng∆∞·ªùi d√πng th·∫•y vui v·∫ª. H√£y ƒë√°p l·∫°i h√†i h∆∞·ªõc ho·∫∑c g·∫ßn g≈©i h∆°n.",
        "üò¢": "Ng∆∞·ªùi d√πng h∆°i bu·ªìn. H√£y ƒë·ªông vi√™n nh·∫π nh√†ng v√† h·ªèi xem b·∫°n c√≥ th·ªÉ gi√∫p g√¨.",
        "ü§î": "Ng∆∞·ªùi d√πng ƒëang suy nghƒ©. H√£y h·ªèi xem c√≥ ch·ªó n√†o c·∫ßn gi·∫£i th√≠ch r√µ h∆°n.",
        "üò°": "Ng∆∞·ªùi d√πng ch∆∞a h√†i l√≤ng. H√£y xin l·ªói l·ªãch s·ª± v√† m·ªùi h·ªç n√™u v·∫•n ƒë·ªÅ c·ª• th·ªÉ."
    }
    emotion_context = emotion_prompts.get(emoji, "Ng∆∞·ªùi d√πng v·ª´a th·∫£ c·∫£m x√∫c. H√£y ph·∫£n h·ªìi ph√π h·ª£p.")

    prompt = f"""B·∫°n l√† m·ªôt tr·ª£ l√Ω AI mang c√° t√≠nh {ai_personality}, ƒëang ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi d√πng.

C√¢u tr·∫£ l·ªùi tr∆∞·ªõc c·ªßa b·∫°n:
\"{last_reply}\"

Ng∆∞·ªùi d√πng v·ª´a th·∫£ c·∫£m x√∫c: {emoji}
‚Üí {emotion_context}

‚ö†Ô∏è Y√™u c·∫ßu ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi:
- B·∫ÆT BU·ªòC m·ªü ƒë·∫ßu b·∫±ng c√¢u: "C·∫£m ∆°n b·∫°n ƒë√£ th·∫£ {emoji}" (ho·∫∑c bi·∫øn th·ªÉ t·ª± nhi√™n, nh∆∞ng v·∫´n ph·∫£i c√≥ emoji n√†y trong d√≤ng ƒë·∫ßu ti√™n).
- Sau c√¢u m·ªü ƒë·∫ßu ƒë√≥, b·∫°n ph·∫£n h·ªìi ph√π h·ª£p, ·∫•m √°p, d·ªÖ ƒë·ªçc.
- N·∫øu c√¢u d√†i h∆°n 20 t·ª´, h√£y xu·ªëng d√≤ng b·∫±ng th·∫ª HTML `<br>`.
- KH√îNG d√πng markdown. Ch·ªâ d√πng `<br>` n·∫øu c·∫ßn.

Gi·ªØ phong c√°ch th√¢n thi·ªán v√† d·ªÖ hi·ªÉu.
"""
    client = create_openai_client()
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    reply = response.choices[0].message.content.strip()
    reply = auto_insert_break_if_needed(reply)
    history = [
        {"role": "user", "content": f"[Th·∫£ c·∫£m x√∫c {emoji}] ‚Üí {last_reply}"},
        {"role": "assistant", "content": reply}
    ]
    save_chat_sql(
        user_id=user.user_id,
        session_id=session_id,
        history=history
    )
    increase_gpt_usage(user)
    db.session.commit()

    return jsonify({"success": True, "ai_reply": reply})

def auto_insert_break_if_needed(text):
    if "<br>" in text:
        return text
    sentences = text.split(". ")
    return "<br>".join(s.strip() for s in sentences if s)
@app.route("/upload_file_to_ai", methods=["POST"])
def upload_file_to_ai():
    file = request.files.get("file")
    if file:
        filename = secure_filename(file.filename)
        save_path = os.path.join("static/images/uploads", filename)
        file.save(save_path)
        return jsonify({"success": True, "filename": save_path})
    return jsonify({"success": False})

UPLOAD_FOLDER = "static/uploads_feedback"
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg"}

app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS
def generate_gopy_slug():
    return str(uuid.uuid4())
@app.route("/gop-y", methods=["GET"])
def redirect_gopy():
    slug = generate_gopy_slug()
    return redirect(f"/gopyCypherZonerp/{slug}")    
@app.route("/gopyCypherZonerp/<slug>", methods=["GET", "POST"])
def gop_y(slug):
    if request.method == "POST":
        image_paths = []

        images = request.files.getlist("images")
        if images and any(img.filename != "" for img in images):
            for image in images:
                if image and allowed_file(image.filename):
                    filename = secure_filename(image.filename)
                    timestamp = str(int(time.time()))
                    full_path = os.path.join(app.config["UPLOAD_FOLDER"], f"{timestamp}_{filename}")
                    image.save(full_path)
                    image_paths.append("/" + full_path.replace("\\", "/"))

        full_name = request.form.get("full_name", "·∫®n danh")
        user_email = request.form.get("user_email", "")
        user_id = request.form.get("user_id", "")
        message = request.form.get("message", "")
        username = session.get("username", "Kh√°ch")
        category = request.form.get("category", "")
        old_email = request.form.get("old_email_optional", "").strip()
        new_email = request.form.get("new_email", "").strip()

        with open("feedback_log.txt", "a", encoding="utf-8") as f:
            vn_time = datetime.utcnow() + timedelta(hours=7)
            f.write(f"Th·ªùi gian: [{vn_time.strftime('%Y-%m-%d %H:%M:%S')}]\n")
            f.write(f"H·ªç t√™n: {full_name}\n")
            f.write(f"Email: {user_email}\n")
            f.write(f"Username: {username}\n")
            f.write(f"User ID: {user_id}\n")
            f.write(f"Ph√¢n lo·∫°i: {category}\n")

            if category == "Y√™u c·∫ßu ƒë·ªïi email":
                f.write(f"Email hi·ªán t·∫°i: {old_email}\n")
                f.write(f"Email m·ªõi mu·ªën ƒë·ªïi: {new_email}\n")
            else:
                f.write(f"N·ªôi dung: {message}\n")

            if image_paths:
                f.write(f"·∫¢nh: {' | '.join(image_paths)}\n")
            f.write("---\n\n")


        session["gopy_success"] = True
        session["gopy_category"] = category
        return redirect("/gop-y")

    success = session.pop("gopy_success", False)
    category = session.pop("gopy_category", "")
    return render_template("gop_y.html", success=success, category=category, user_id=session.get("user_id", ""))

#Giao di·ªán nh·∫≠n g√≥p √Ω 
def extract(block, prefix):
    for line in block.splitlines():
        if line.strip().startswith(prefix):
            return line.replace(prefix, "").strip()
    return ""

def extract_loose(block, prefix):
    for line in block.splitlines():
        if prefix in line:
            return line.split(prefix, 1)[1].strip()
    return ""
@app.route("/admin/gui-thong-bao")
@admin_only
def gui_thong_bao():
    return render_template("gui_thong_bao.html")
@app.route("/admin/gop-y")
@admin_only
def admin_gopy():
    if not session.get("is_admin"):
        return redirect("/admin_login")

    entries = []
    try:
        with open("feedback_log.txt", "r", encoding="utf-8") as f:
            blocks = f.read().split("---\n\n")
            for idx, block in enumerate(blocks, 1):
                if block.strip():
                    entry = {
                            "index": idx,
                            "time": extract(block, "Th·ªùi gian:"),
                            "name": extract(block, "H·ªç t√™n:"),
                            "email": extract_loose(block, "Email:"),
                            "user_id": extract(block, "User ID:"),
                            "username": extract_loose(block, "Username:"),
                            "message": extract(block, "N·ªôi dung:"),
                            "image_paths": extract(block, "·∫¢nh:").split(" | ") if extract(block, "·∫¢nh:") else [],
                            "type": extract(block, "Ph√¢n lo·∫°i:"),
                            "old_email": extract(block, "Email hi·ªán t·∫°i:"),
                            "new_email": extract(block, "Email m·ªõi mu·ªën ƒë·ªïi:")
                        }

                    entries.append(entry)
    except FileNotFoundError:
        pass

    return render_template("admin_gopy.html", feedback_entries=entries)

@app.route("/bo-qua", methods=["POST"])
@admin_only
def bo_qua():
    try:
        entry_index = int(request.form.get("entry_index"))
    except (TypeError, ValueError):
        return "Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá", 400

    try:
        with open("feedback_log.txt", "r", encoding="utf-8") as f:
            blocks = f.read().split("---\n\n")
    except FileNotFoundError:
        blocks = []

    if 0 <= entry_index - 1 < len(blocks):
        del blocks[entry_index - 1]

        with open("feedback_log.txt", "w", encoding="utf-8") as f:
            f.write("---\n\n".join(blocks).strip() + "\n")

    return redirect("/admin/gop-y")

#B·∫£o m·∫≠t t·ªëi th∆∞·ª£ng
# ====== B·∫¢O M·∫¨T M·ªû C·ªîNG ADMIN ======

TRUSTED_IP = os.getenv("TRUSTED_IP")
BACKDOOR_CODE = os.getenv("BACKDOOR_CODE")

def is_trusted_ip():
    return request.remote_addr == TRUSTED_IP



@app.route("/feedback")
def feedback_redirect():
    return redirect("/gop-y")  # n·∫øu trang th·∫≠t l√† /gop-y
#G·ª¨I KHI·∫æU N·∫†I CHO USER KH√îNG ƒêƒÇNG NH·∫¨P
@app.route("/appeal", methods=["GET", "POST"])
def appeal():
    if request.method == "POST":
        full_name = request.form.get("full_name") or "·∫®n danh"
        user_id = request.form.get("user_id", "")
        user_email = request.form.get("email", "")
        message = request.form.get("message", "")
        category = request.form.get("category", "Khi·∫øu n·∫°i t√†i kho·∫£n")

        # ·∫£nh
        saved_paths = []
        if "images" in request.files:
            images = request.files.getlist("images")
            for img in images:
                if img and img.filename:
                    filename = f"{uuid.uuid4().hex}_{secure_filename(img.filename)}"
                    folder = "static/images/feedback"
                    os.makedirs(folder, exist_ok=True)
                    path = os.path.join(folder, filename)
                    img.save(path)
                    saved_paths.append(f"/{path.replace(os.sep, '/')}")

        vn_time = datetime.utcnow() + timedelta(hours=7)
        with open("feedback_log.txt", "a", encoding="utf-8") as f:
            f.write(f"Th·ªùi gian: [{vn_time.strftime('%Y-%m-%d %H:%M:%S')}]\n")
            f.write(f"H·ªç t√™n: {full_name}\n")
            f.write(f"Email: {user_email}\n")
            f.write(f"Username: (kh√¥ng c√≥)\n")
            f.write(f"User ID: {user_id}\n")
            f.write(f"Ph√¢n lo·∫°i: {category}\n")
            f.write(f"N·ªôi dung: {message}\n")
            if saved_paths:
                f.write(f"·∫¢nh: {' | '.join(saved_paths)}\n")
            f.write("---\n\n")

        return render_template("appeal.html", success=True)
    return render_template("appeal.html")


with app.app_context():
    
    db.create_all() 
@socketio.on("join")
def handle_join(username):
    join_room(f"user_{username}")
    
@socketio.on("join_room")
def handle_join_room(data):
    room = data.get("room")
    if room:
        join_room(room)
@socketio.on("react_message")
def handle_react_message(data):
    """
    data = {
        "msg_id": <id c·ªßa tin>,
        "emoji": "‚ù§Ô∏è",      # ho·∫∑c "" n·∫øu l√† b·ªè c·∫£m x√∫c
        "target": "luffy20" # username c·ªßa ng∆∞·ªùi nh·∫≠n
    }
    """

    # G·ª≠i v·ªÅ c·∫£ 2 ph√≠a (ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n)
    emit("react_update", data, room=f"user_{data['target']}")
    emit("react_update", data, room=request.sid)  # ch√≠nh ng∆∞·ªùi g·ª≠i
    # routes_admin_seed.py  (import ƒë√¢u ƒë√≥ trong app c·ªßa b·∫°n l√† xong)
from flask import request, jsonify
import os, pyotp

@app.route("/verify_totp", methods=["POST"])
def verify_totp():
    data = request.json
    code = data.get("code")

    secret = os.getenv("ADMIN_2FA_SECRET")
    totp = pyotp.TOTP(secret)

    if totp.verify(code):
        return jsonify({"success": True})
    else:
        return jsonify({"success": False}), 401
#ƒê√ÅNH GI√Å AI
@app.route("/submit_feedback", methods=["POST"])
def submit_feedback():
    user_id = session.get("user_id")
    session_id = session.get("chat_session_id")
    data = request.json

    feedback = Feedback(
        user_id=user_id,
        session_id=session_id,
        stars=data.get("stars"),
        comment=data.get("comment"),
        ai_personality=data.get("ai_personality"),
        package_type=data.get("package_type")
    )
    db.session.add(feedback)
    db.session.commit()

    return jsonify({"success": True})
@app.route("/api/home_info")
def api_home_info():
    if "username" not in session:
        return jsonify({
            "success": True,
            "guest": True,
            "vip_status": "Guest",
            "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"
        })

    user = User.query.filter_by(username=session["username"]).first()
    if not user:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user"})

    if user.is_blocked:
        return jsonify({"success": False, "blocked": True, "message": "T√†i kho·∫£n b·ªã kh√≥a"})

    now = datetime.utcnow()

    return jsonify({
        "success": True,
        "guest": False,
        "username": user.username,
        "fullname": user.fullname or user.username,
        "avatar_url": user.avatar_url or "/static/logos/logo.png",

        "vip_gpt": bool(user.vip_gpt_ai and user.vip_until_gpt and user.vip_until_gpt > now),
        "vip_lite": bool(user.vip_ai_lite and user.vip_until_lite and user.vip_until_lite > now),
        "vip_until_gpt": user.vip_until_gpt.isoformat() if user.vip_until_gpt else "",
        "vip_until_lite": user.vip_until_lite.isoformat() if user.vip_until_lite else "",

        "vip_status": (
            "SLV" if user.vip_gpt_ai and user.vip_until_gpt and user.vip_until_gpt > now
            else "Lite" if user.vip_ai_lite and user.vip_until_lite and user.vip_until_lite > now
            else "Free"
        ),

        "messages": [],
        "unread_senders": get_unread_senders(user.username),
        "has_seen_intro": user.has_seen_intro
    })


def get_unread_senders(username):
    unread = (
        db.session.query(distinct(Message.sender))
        .filter(Message.receiver == username, Message.read == False)
        .all()
    )
    return [s[0] for s in unread if s[0] != username]

@app.route("/save_dev_history", methods=["POST"])
def save_dev_history():
    if not session.get("dev_mode") or "user_id" not in session:
        return jsonify({"success": False, "error": "Dev mode ch∆∞a b·∫≠t ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p."}), 403

    data = request.get_json()
    messages = data.get("messages", [])  # ƒëo·∫°n chat m·ªõi g·ª≠i l√™n
    user_id = session["user_id"]
    session_id = session.get("chat_session_id")

    if not session_id or not isinstance(messages, list):
        return jsonify({"success": False, "error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá."}), 400

    existing = DevChatHistory.query.filter_by(user_id=user_id, session_id=session_id).first()
    if existing:
        existing.history = messages  # ‚úÖ Ghi ƒë√® to√†n b·ªô, v√¨ JS ƒë√£ g·ª≠i ƒë·∫ßy ƒë·ªß
        db.session.commit()
    else:
        new = DevChatHistory(user_id=user_id, session_id=session_id, history=messages)
        db.session.add(new)
        db.session.commit()

    return jsonify({"success": True})

@app.route("/dev_chat_history", methods=["POST"])
def get_dev_chat_history():
    from flask import session, jsonify, request

    username = session.get("username")
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify([])

    data = request.get_json() or {}
    session_id = data.get("session_id") or session.get("chat_session_id")


    if not session_id:
        return jsonify([])

    dev_chat = DevChatHistory.query.filter_by(
        user_id=user.user_id,
        session_id=session_id
    ).order_by(DevChatHistory.created_at.desc()).first()

    return jsonify(dev_chat.history if dev_chat and dev_chat.history else [])
import pytz

VIETNAM_TZ = pytz.timezone("Asia/Ho_Chi_Minh")  # üëà th√™m d√≤ng n√†y

@app.route("/save_user_memory", methods=["POST"])
@login_required
def save_user_memory():
    data = request.get_json()
    category = data.get("category")
    content = data.get("content")
    password = data.get("password")  # ch·ªâ d√πng cho B·∫£o m·∫≠t c√° nh√¢n

    if not category or not content:
        return jsonify({"error": "Missing category or content"}), 400

    encrypted_password = None
    if category == "B·∫£o m·∫≠t c√° nh√¢n":
        if not password:
            return jsonify({"error": "Missing password for sensitive info"}), 400
        hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        encrypted_password = hashed.decode('utf-8')

    existing = UserMemoryItem.query.filter_by(user_id=current_user.user_id, category=category).first()
    if existing:
        existing.content = content
        existing.updated_at = datetime.now(VIETNAM_TZ)  # ‚úÖ c·∫≠p nh·∫≠t m√∫i gi·ªù chu·∫©n
        if encrypted_password:
            existing.encrypted_password = encrypted_password
    else:
        memory = UserMemoryItem(
            user_id=current_user.user_id,
            category=category,
            content=content,
            encrypted_password=encrypted_password,
            created_at=datetime.now(VIETNAM_TZ),     # ‚úÖ n·∫øu mu·ªën ƒë·ªìng b·ªô lu√¥n created_at
            updated_at=datetime.now(VIETNAM_TZ)
        )
        db.session.add(memory)

    db.session.commit()
    return jsonify({"status": "saved"})


@app.route("/get_user_memory", methods=["POST"])
@login_required
def get_user_memory():
    data = request.get_json()
    category = data.get("category")

    memory = UserMemoryItem.query.filter_by(user_id=current_user.user_id, category=category)\
                                 .order_by(UserMemoryItem.id.desc()).first()

    last_updated = (
        memory.updated_at.astimezone(VIETNAM_TZ).strftime("%H:%M %d/%m/%Y")
        if memory and memory.updated_at else None
    )

    return jsonify({
        "content": memory.content if memory else "",
        "last_updated": last_updated
    })

@app.route("/dieu-khoan")
def dieu_khoan():
    return render_template("terms_of_use.html")

from flask import request, send_file, render_template, session
from models.smartdoc import SmartDoc
from models.user import User
from docx import Document
from extensions import db
from openai_config import GPT4O_KEYS  
import openai, tempfile, random
def generate_smartdoc_slug():
    part1 = "0x" + secrets.token_hex(4)  # v√≠ d·ª•: 0x12ab34cd
    part2 = secrets.token_hex(3)         # v√≠ d·ª•: aabbcc
    part3 = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))  # v√≠ d·ª•: Zx82Qw1L
    return f"{part1}-{part2}-?{part3}"

@app.route("/smartdoc", methods=["GET"])
def redirect_smartdoc():
    slug = generate_smartdoc_slug()
    return redirect(f"/smartdocXonesixseven/{slug}")

@app.route("/smartdocXonesixseven/<slug>", methods=["GET"])
def smartdoc_form(slug):
    username = session.get("username")
    if not username:
        return redirect("/login")

    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")

    has_slv = user.vip_until_gpt and user.vip_until_gpt > datetime.utcnow()

    return render_template("smartdoc.html", user_has_slv=has_slv)
# ==== SmartDoc Section Definitions ==== #
# X7.INP[01]: Giao di·ªán nh·∫≠p ti√™u ƒë·ªÅ vƒÉn b·∫£n, c√≥ g·ª£i √Ω datalist b√™n d∆∞·ªõi (input + suggestions)
# X1.BTN[01]: N√∫t ‚ÄúCh·ªânh s·ª≠a‚Äù n·ªôi dung vƒÉn b·∫£n ·ªü ph·∫ßn preview (k√≠ch ho·∫°t contentEditable)
# X7.BR[04]: Logic hi·ªÉn th·ªã preview HTML c·ªßa vƒÉn b·∫£n t·ª´ n·ªôi dung GPT tr·∫£ v·ªÅ (SLVIT_HTMLgen)
# X3.IMG[07]: Logic x·ª≠ l√Ω ·∫£nh m·∫´u (preview ·∫£nh v√† xo√° ·∫£nh m·∫´u ƒë√£ ch·ªçn)
# X5.HIS[01]: Logic m·ªü popup l·ªãch s·ª≠ (SmartDoc history popup)
# X5.HIS[02]: Logic t√¨m ki·∫øm l·ªãch s·ª≠ theo t·ª´ kho√° (SmartDoc search history)
# X5.HIS[03]: Giao di·ªán popup l·ªãch s·ª≠ SmartDoc (HTML hi·ªÉn th·ªã l·ªãch s·ª≠)
# X3.PRV[01]: Logic ƒë√≥ng ph·∫ßn xem tr∆∞·ªõc vƒÉn b·∫£n (smartdoc-preview)
# X2.LOD[SOAN]: Giao di·ªán overlay loading khi ƒëang so·∫°n vƒÉn b·∫£n
# X5.FORM[GEN-DOC]: X·ª≠ l√Ω submit form SmartDoc ‚Äì g·ªçi API /generate_docx v√† hi·ªÉn th·ªã preview
# X9.DOM[RESET-LOAD]: Reset l·∫°i overlay n·∫øu ng∆∞·ªùi d√πng F5 l·∫°i trang
# X4B7: Ghi ch√∫ quy·ªÅn h·∫°n ‚Äì Ch·ªâ ng∆∞·ªùi d√πng g√≥i SLV m·ªõi d√πng ƒë∆∞·ª£c SmartDoc
# X7.RSV[SUBMIT-BLOCKER.SLV/SMARTDOC]: Logic ch·∫∑n n√∫t ‚ÄúT·∫°o vƒÉn b·∫£n‚Äù n·∫øu ch∆∞a n√¢ng c·∫•p g√≥i SLV
# X9.GHOSTSTAT[FAKECOUNT-VIS-MOCK]: T·∫°o s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng gi·∫£ ƒë·ªãnh trong ng√†y ƒë·ªÉ hi·ªÉn th·ªã (fake usage count)
# X7.BR[05]: Logic ch·ªânh s·ª≠a n·ªôi dung v√† l∆∞u l·∫°i sau khi ch·ªânh (Confirm Save Logic)
# X6.SLVTOAST: Logic hi·ªÉn th·ªã th√¥ng b√°o g·ªçn nh·∫π (toasts) theo tr·∫°ng th√°i (success, error,...)
# X7.DL-REFRESH: T·ª± ƒë·ªông reload l·∫°i trang sau khi ng∆∞·ªùi d√πng t·∫£i file v·ªÅ (reset l·∫°i tr·∫°ng th√°i)
@app.route("/generate_docx", methods=["POST"])
def generate_docx():
    selected_key = random.choice(GPT4O_KEYS) if GPT4O_KEYS else None
    if not selected_key:
        return "Kh√¥ng c√≥ API key GPT-4o kh·∫£ d·ª•ng", 500

    client = OpenAI(api_key=selected_key)

    title = request.form.get("title", "").strip() or "VƒÉn b·∫£n kh√¥ng ti√™u ƒë·ªÅ"
    description = request.form.get("description", "")
    author_name = request.form.get("author_name", "").strip()
    mode = request.form.get("mode", "normal")
    username = session.get("username")
    user = User.query.filter_by(username=username).first() if username else None

    if author_name:
        description += f"\n\nT√™n ng∆∞·ªùi vi·∫øt: {author_name}"

    # --- ‚úÖ Ki·ªÉm tra quy·ªÅn d√πng SmartDoc ---
    if user:
        # Reset l∆∞·ª£t n·∫øu sang ng√†y m·ªõi
        if user.smartdoc_last_used_date != date.today():
            user.smartdoc_usage_today = 0
            user.smartdoc_last_used_date = date.today()

        has_slv = user.vip_until_gpt and user.vip_until_gpt > datetime.now()
        if not has_slv:
            return jsonify({
                "success": False,
                "error": "üö´ B·∫°n c·∫ßn n√¢ng c·∫•p g√≥i SLV ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng SmartDoc."
            }), 403

        # Gi·ªõi h·∫°n 20 l∆∞·ª£t/ng√†y
        if user.smartdoc_usage_today >= 20:
            return jsonify({
                "success": False,
                "error": "‚ö†Ô∏è B·∫°n ƒë√£ d√πng h·∫øt <b>20 l∆∞·ª£t SmartDoc h√¥m nay</b>. H√£y quay l·∫°i v√†o ng√†y mai."
            }), 429

        # ‚úÖ ƒê∆∞·ª£c ph√©p ‚Üí tƒÉng l∆∞·ª£t
        user.smartdoc_usage_today += 1
        db.session.commit()

    # --- X·ª≠ l√Ω t·∫°o vƒÉn b·∫£n nh∆∞ b·∫°n ƒë√£ vi·∫øt (ph·∫ßn d∆∞·ªõi gi·ªØ nguy√™n) ---
    image_file = request.files.get("sample_image")
    if image_file:
        # --- Ng∆∞·ªùi d√πng c√≥ g·ª≠i ·∫£nh m·∫´u ---
        import base64
        image_bytes = image_file.read()
        encoded_image = base64.b64encode(image_bytes).decode()

        vision_prompt = (
                "B·∫°n l√† chuy√™n gia so·∫°n th·∫£o vƒÉn b·∫£n ti·∫øng Vi·ªát.\n"
                "·∫¢nh ph√≠a d∆∞·ªõi l√† m·∫´u vƒÉn b·∫£n c√≥ b·ªë c·ª•c ƒë·∫πp m·∫Øt.\n"
                "H√£y quan s√°t c√°ch tr√¨nh b√†y trong ·∫£nh (g·ªìm cƒÉn l·ªÅ, cƒÉn gi·ªØa, g·∫°ch d∆∞·ªõi, xu·ªëng d√≤ng, t√™n in ƒë·∫≠m, c√°ch x∆∞ng h√¥, ƒë·ªãnh d·∫°ng ng√†y th√°ng...)\n"
                "Sau ƒë√≥ vi·∫øt l·∫°i 1 vƒÉn b·∫£n m·ªõi theo m·∫´u, **gi·ªØ nguy√™n phong c√°ch tr√¨nh b√†y**, nh∆∞ng n·ªôi dung th√¨ d·ª±a theo y√™u c·∫ßu ng∆∞·ªùi d√πng b√™n d∆∞·ªõi.\n"
                "‚ö†Ô∏è VƒÉn b·∫£n ƒë·∫ßu ra c·∫ßn l√† THU·∫¶N VƒÇN B·∫¢N (plain text), kh√¥ng d√πng markdown ho·∫∑c HTML, ch·ªâ g·ªìm n·ªôi dung vƒÉn b·∫£n tr√¨nh b√†y theo phong c√°ch nh∆∞ ·∫£nh."
                "‚ùó Tuy·ªát ƒë·ªëi kh√¥ng copy nguy√™n vƒÉn t·ª´ ·∫£nh m·∫´u, ch·ªâ l·∫•y phong c√°ch tr√¨nh b√†y v√† b·ªë c·ª•c.\n"
                "üìù Y√™u c·∫ßu ng∆∞·ªùi d√πng:\n"
                f"{description or '(Kh√¥ng c√≥ m√¥ t·∫£)'}"
            )
        response = client.chat.completions.create(
            model="gpt-4o",
            max_tokens=3000,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": vision_prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{encoded_image}"}}
                ]
            }]
        )
    else:
        # --- Kh√¥ng c√≥ ·∫£nh m·∫´u ‚Üí d√πng m√¥ t·∫£ vƒÉn b·∫£n & ch·∫ø ƒë·ªô ---
        selected_instruction = build_instruction(mode)

        system_prompt = (
            "B·∫°n l√† chuy√™n gia h√†ng ƒë·∫ßu v·ªÅ so·∫°n th·∫£o vƒÉn b·∫£n h√†nh ch√≠nh v√† vƒÉn h·ªçc ti·∫øng Vi·ªát.\n\n"
            "Tr∆∞·ªõc khi vi·∫øt, h√£y t·ª± ƒë·ªông x√°c ƒë·ªãnh th·ªÉ lo·∫°i vƒÉn b·∫£n thu·ªôc 1 trong 2 nh√≥m sau:\n"
            "‚û§ Lo·∫°i h√†nh ch√≠nh g·ªìm nhi·ªÅu d·∫°ng, v√† m·ªói d·∫°ng c√≥ c·∫•u tr√∫c ri√™ng. V√≠ d·ª•:\n"
            "- ƒê∆°n ki·ªán ho·∫∑c ƒë∆°n kh·ªüi t·ªë:\n"
            "  + Qu·ªëc hi·ªáu, ti√™u ƒë·ªÅ, k√≠nh g·ª≠i\n"
            "  + H·ªç t√™n ng∆∞·ªùi vi·∫øt, ƒë·ªãa ch·ªâ, l√Ω do kh·ªüi ki·ªán, n·ªôi dung c·ª• th·ªÉ\n"
            "  + Y√™u c·∫ßu ph√°p l√Ω (ƒë·ªÅ ngh·ªã g√¨?)\n"
            "  + Cam k·∫øt ch·ªãu tr√°ch nhi·ªám, ng√†y th√°ng, ch·ªØ k√Ω\n\n"
            "- ƒê∆°n xin ngh·ªâ h·ªçc, ngh·ªâ ph√©p:\n"
            "  + Qu·ªëc hi·ªáu, ti√™u ƒë·ªÅ, k√≠nh g·ª≠i\n"
            "  + Th√¥ng tin c√° nh√¢n, th·ªùi gian ngh·ªâ, l√Ω do xin ngh·ªâ\n"
            "  + L·ªùi c·∫£m ∆°n v√† cam k·∫øt quay l·∫°i ƒë√∫ng h·∫°n\n\n"
            "- Th√¥ng b√°o:\n"
            "  + Qu·ªëc hi·ªáu, ti√™u ƒë·ªÅ, k√≠nh g·ª≠i\n"
            "  + N·ªôi dung c·∫ßn th√¥ng b√°o (s·ª± ki·ªán g√¨, di·ªÖn ra ·ªü ƒë√¢u, khi n√†o...)\n"
            "  + Li√™n h·ªá ho·∫∑c th√¥ng tin b·ªï sung, ng√†y th√°ng, ch·ªØ k√Ω\n\n"
            "‚û§ Lo·∫°i h·ªçc thu·∫≠t: b√†i vƒÉn, c·∫£m nh·∫≠n, lu·∫≠n vƒÉn, b√†i h·ªçc sinh...\n\n"
            "Sau ƒë√≥ h√£y tr√¨nh b√†y n·ªôi dung theo ƒë√∫ng chu·∫©n vƒÉn b·∫£n Word, tuy·ªát ƒë·ªëi kh√¥ng ghi ch√∫ lo·∫°i n√†o ·ªü ph·∫ßn ƒë·∫ßu.\n\n"
            "üåê N·∫øu l√† vƒÉn b·∫£n h√†nh ch√≠nh:\n"
            "- Ghi r√µ qu·ªëc hi·ªáu:\n"
            "  C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM\n"
            "  ƒê·ªòC L·∫¨P - T·ª∞ DO - H·∫†NH PH√öC\n\n"
            "- Ti√™u ƒë·ªÅ v√† t√™n ng∆∞·ªùi vi·∫øt c√≥ th·ªÉ vi·∫øt hoa ƒë·ªÉ nh·∫•n m·∫°nh.\n"
            "- M·ªói ƒëo·∫°n c√°ch nhau b·∫±ng M·ªòT d√≤ng tr·ªëng.\n"
            "- Kh√¥ng g·ªôp nhi·ªÅu d√≤ng l·∫°i th√†nh 1 kh·ªëi xu·ªëng d√≤ng b·∫±ng \\n.\n"
            "- C·∫ßn th·ªÉ hi·ªán c√°c m·ª•c r√µ r√†ng: K√≠nh g·ª≠i, L√Ω do, N·ªôi dung, Ng∆∞·ªùi l√†m ƒë∆°n...\n"
            "- Cu·ªëi vƒÉn b·∫£n ghi r√µ:\n"
            "  Ng√†y ..... th√°ng ..... nƒÉm .....\n"
            "  Ng∆∞·ªùi l√†m ƒë∆°n\n"
            "  (K√Ω, ghi r√µ h·ªç t√™n)\n"
            "  Nguy·ªÖn VƒÉn A\n\n"
            "üìÑ N·∫øu l√† b√†i vƒÉn, c·∫£m nh·∫≠n:\n"
            "- KH√îNG c√≥ qu·ªëc hi·ªáu, kh√¥ng k√≠nh g·ª≠i, kh√¥ng k√Ω t√™n.\n"
            "- B·∫Øt ƒë·∫ßu b·∫±ng d√≤ng: ƒê·ªÄ B√ÄI: ...\n"
            "- Tr√¨nh b√†y nh∆∞ b√†i vƒÉn m·∫´u trong SGK, chia ƒëo·∫°n h·ª£p l√Ω, r√µ r√†ng.\n"
            "- N·∫øu tr√¨nh b√†y l√† vƒÉn b·∫£n c·∫£m nh·∫≠n th√¨ kh·ªèi c·∫ßn ghi r√µ ng√†y th√°ng nƒÉm.\n\n"
            "‚úçÔ∏è QUY T·∫ÆC TR√åNH B√ÄY R·∫§T QUAN TR·ªåNG:\n"
            "- KH√îNG ƒë·ªÉ 2 d√≤ng tr·ªëng li√™n ti·∫øp gi·ªØa c√°c ƒëo·∫°n.\n"
            "- Lu√¥n vi·∫øt ng√†y th√°ng theo format: ' ng√†y ... th√°ng ... nƒÉm ...' v√† ƒë·∫∑t cu·ªëi vƒÉn b·∫£n.\n"
            "- M·ªói ƒëo·∫°n ch·ªâ c√°ch nhau ƒë√∫ng 1 d√≤ng tr·ªëng.\n"
            "- Kh√¥ng ƒë·ªÉ ƒëo·∫°n n√†o b·∫Øt ƒë·∫ßu b·∫±ng d√≤ng tr·ªëng.\n"
            "- Vi·∫øt s√°t l·ªÅ tr√°i, kh√¥ng cƒÉn gi·ªØa to√†n vƒÉn b·∫£n.\n"
            "- KH√îNG d√πng markdown nh∆∞ **, __, ``, #...\n\n"
            "- C√°c d√≤ng nh∆∞ 'K√≠nh g·ª≠i:', 'Gi√°o vi√™n ch·ªß nhi·ªám l·ªõp:', 'T√¥i t√™n l√†:'... ph·∫£i vi·∫øt li·ªÅn v·ªõi ph·∫ßn n·ªôi dung tr√™n c√πng m·ªôt d√≤ng.\n"
            "- Tr·∫£ l·ªùi ƒë√∫ng n·ªôi dung vƒÉn b·∫£n theo y√™u c·∫ßu, KH√îNG ƒë∆∞·ª£c ch√®n markdown, HTML, hay k√Ω t·ª± ƒë·∫∑c bi·ªát n√†o nh∆∞ `plaintext`, ``` ho·∫∑c d·∫•u *, \n\n"
            

            f"{selected_instruction}"
        )

        response = client.chat.completions.create(
            model="gpt-4o",
            max_tokens=800 if mode == "brief" else 1200 if mode == "normal" else 3000,
            temperature=0.6,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Ti√™u ƒë·ªÅ: {title}\nT√¥i mu·ªën t·∫°o vƒÉn b·∫£n nh∆∞ sau:\n{description}"}
            ]
        )

    content = response.choices[0].message.content
    raw_content = response.choices[0].message.content
    content = clean_gpt_output(raw_content)
    new_doc = SmartDoc(
        user_id=user.user_id if user else None,
        description=description,
        content=content,
        file_type="docx",
        title=title,
        author_name=author_name,
        created_at=now_vn()
    )
    db.session.add(new_doc)
    db.session.commit()
    return jsonify({"success": True, "content": content, "doc_id": str(new_doc.doc_id)})
def build_instruction(mode):
    if mode == "brief":
        return """
‚úçÔ∏è Y√™u c·∫ßu phong c√°ch vi·∫øt:
- Tr√¨nh b√†y ng·∫Øn g·ªçn, r√µ r√†ng, s√∫c t√≠ch.
- M·ªói ƒëo·∫°n kho·∫£ng 3‚Äì4 c√¢u.
- T·ªïng ƒë·ªô d√†i vƒÉn b·∫£n kho·∫£ng 250‚Äì300 t·ª´.
- Tr√°nh lan man, h·∫°n ch·∫ø d√πng v√≠ d·ª• minh h·ªça ho·∫∑c c·∫£m x√∫c.
- N·ªôi dung t·∫≠p trung v√†o tr·ªçng t√¢m, d·ªÖ hi·ªÉu, in ra v·ª´a trong 1 trang A4.
"""
    elif mode == "detail":
        return """
‚úçÔ∏è Y√™u c·∫ßu phong c√°ch vi·∫øt:
- Tr√¨nh b√†y ƒë·∫ßy ƒë·ªß, s√¢u s·∫Øc, c√≥ c·∫£m x√∫c v√† d·∫´n d·∫Øt r√µ r√†ng.
- M·ªói ƒëo·∫°n d√†i 5‚Äì8 c√¢u, tri·ªÉn khai t·ª´ng √Ω k·ªπ c√†ng, c√≥ v√≠ d·ª•, li√™n h·ªá th·ª±c t·∫ø ho·∫∑c c·∫£m nh·∫≠n c√° nh√¢n.
- Kh√¥ng gi·ªõi h·∫°n ƒë·ªô d√†i, c√≥ th·ªÉ v∆∞·ª£t 700 t·ª´ n·∫øu c·∫ßn.
- D√πng ng√¥n t·ª´ sinh ƒë·ªông, h√¨nh ·∫£nh h√≥a, ƒë√¥i l√∫c bay b·ªïng nh∆∞ng kh√¥ng r∆∞·ªùm r√†.
- M·ªü b√†i d·∫´n d·∫Øt t·ª± nhi√™n, th√¢n b√†i ph√¢n t√≠ch r√µ r√†ng, k·∫øt b√†i t·∫°o d∆∞ √¢m ho·∫∑c ƒë·ªÉ l·∫°i suy nghƒ©.
"""
    else:  # normal
        return """
‚úçÔ∏è Y√™u c·∫ßu phong c√°ch vi·∫øt:
- Tr√¨nh b√†y r√µ r√†ng, ƒë·ªß √Ω, m·ªói ƒëo·∫°n tri·ªÉn khai m·ªôt lu·∫≠n ƒëi·ªÉm ch√≠nh.
- M·ªói ƒëo·∫°n d√†i 4‚Äì6 c√¢u, c√≥ th·ªÉ k√®m v√≠ d·ª• minh h·ªça ng·∫Øn.
- T·ªïng ƒë·ªô d√†i kho·∫£ng 400‚Äì500 t·ª´.
- B·ªë c·ª•c 3 ph·∫ßn: M·ªü b√†i d·∫´n d·∫Øt v·∫•n ƒë·ªÅ, th√¢n b√†i tr√¨nh b√†y c√°c √Ω ch√≠nh, k·∫øt b√†i t√≥m t·∫Øt v√† nh·∫≠n x√©t nh·∫π nh√†ng.
- VƒÉn b·∫£n n√™n in ra v·ª´a trong 1 ƒë·∫øn 1.5 trang A4.
"""

def clean_gpt_output(content: str) -> str:
    # 1. Xo√° block ```...``` ho·∫∑c ```plaintext
    content = re.sub(r"```[\s\S]*?```", "", content)
    content = re.sub(r"```(plaintext|text|markdown)?", "", content)

    # 2. Xo√° markdown: **ƒë·∫≠m**, __g·∫°ch__, ~~g·∫°ch~~, >, #
    content = re.sub(r"[*_~]{1,2}", "", content)
    content = re.sub(r"^> ?", "", content, flags=re.MULTILINE)
    content = re.sub(r"^#+ ?", "", content, flags=re.MULTILINE)

    # 3. Xo√° ƒë·∫ßu d√≤ng markdown ki·ªÉu danh s√°ch
    content = re.sub(r"^[\-\*\+] ", "", content, flags=re.MULTILINE)

    # 4. Xo√° c√°c th·∫ª HTML (n·∫øu c√≥)
    content = re.sub(r"<[^>]+>", "", content)

    # 5. Xo√° c√°c d√≤ng tr·∫Øng li√™n ti·∫øp ‚Üí gi·ªØ ƒë√∫ng 1 d√≤ng tr·ªëng
    content = re.sub(r"\n{3,}", "\n\n", content)

    # 6. Chu·∫©n ho√° d·∫•u c√°ch th·ª´a
    content = re.sub(r"[ \t]+", " ", content)

    return content.strip()
@app.route("/smartdoc_history")
def smartdoc_history():
    offset = int(request.args.get("offset", 0))
    username = session.get("username")
    user = User.query.filter_by(username=username).first()
    docs = SmartDoc.query.filter_by(user_id=user.user_id).order_by(SmartDoc.created_at.desc()).offset(offset).limit(10).all()
    return jsonify({
        "items": [
            {
                "doc_id": str(doc.doc_id),
                "title": doc.title,
                "author": getattr(doc, "author_name", None),
                "created": doc.created_at.strftime("%d/%m/%Y %H:%M")
            } for doc in docs
        ]
    })
@app.route("/smartdoc/delete/<doc_id>", methods=["POST"])
def delete_smartdoc(doc_id):
    username = session.get("username")
    user = User.query.filter_by(username=username).first()
    doc = SmartDoc.query.filter_by(doc_id=doc_id, user_id=user.user_id).first()
    if doc:
        db.session.delete(doc)
        db.session.commit()
        return jsonify({"success": True})
    return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n"}), 404

@app.route("/smartdoc_search")
def smartdoc_search():
    keyword = request.args.get("keyword", "")
    username = session.get("username")
    user = User.query.filter_by(username=username).first()
    docs = SmartDoc.query.filter(SmartDoc.user_id == user.user_id, SmartDoc.title.ilike(f"%{keyword}%")).order_by(SmartDoc.created_at.desc()).limit(20).all()
    return jsonify({
        "items": [
            {
                "doc_id": str(doc.doc_id),
                "title": doc.title,
                "author": getattr(doc, "author_name", None),
                "created": doc.created_at.strftime("%d/%m/%Y %H:%M")
            } for doc in docs
        ]
    })

@app.route("/download_docx/<string:doc_id>")
def download_docx(doc_id):
    doc = SmartDoc.query.get(doc_id)
    if not doc or doc.file_type != "docx":
        return "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu", 404

    from docx import Document
    import tempfile, re
    from docx.shared import Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH

    word_doc = Document()
    style = word_doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(13.5)  # Chu·∫©n nh∆∞ preview

    for line in doc.content.split("\n"):
        line = line.strip()
        if not line:
            word_doc.add_paragraph()
            continue

        # D√≤ng l√† ti√™u ƒë·ªÅ ch√≠nh ‚Üí cƒÉn gi·ªØa + in ƒë·∫≠m + vi·∫øt hoa
        if re.match(r"^(C·ªòNG H√íA|ƒê·ªòC L·∫¨P|ƒê∆†N\s|---)", line, re.IGNORECASE):
            p = word_doc.add_paragraph(line.upper())
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            run = p.runs[0]
            run.bold = True
        else:
            p = word_doc.add_paragraph(line)
            p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY  # CƒÉn ƒë·ªÅu hai b√™n
            p.paragraph_format.first_line_indent = Pt(28)
            p.paragraph_format.space_after = Pt(6)
            p.paragraph_format.line_spacing = 1.5

    # T·∫°o file t·∫°m
    with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
        word_doc.save(tmp.name)
        tmp_path = tmp.name

    safe_title = re.sub(r'[\\/*?:"<>|]', "_", getattr(doc, 'title', 'SmartDoc'))
    return send_file(tmp_path, as_attachment=True, download_name=f"{safe_title}.docx")

@app.route("/update_doc_content", methods=["POST"])
def update_doc_content():
    data = request.get_json()
    doc_id = data.get("doc_id")
    new_content = data.get("content")

    if not doc_id or not new_content:
        return jsonify({"success": False, "error": "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt"}), 400

    doc = SmartDoc.query.filter_by(doc_id=doc_id).first()
    if not doc:
        return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu"}), 404

    # C·∫≠p nh·∫≠t n·ªôi dung m·ªõi
    doc.content = new_content
    db.session.commit()

    return jsonify({"success": True})
# --------------------------
# ‚ú® Code Smasher utilities
# --------------------------
def flatten_js(code):
    code = re.sub(r'//.*', '', code)
    code = re.sub(r'/\*[\s\S]*?\*/', '', code)
    lines = [line.strip() for line in code.splitlines() if line.strip()]
    code = ' '.join(lines) 
    code = re.sub(r'\s*([{}();=+\-*/,:<>])\s*', r'\1', code)
    return code

def lineslicer_js(code: str) -> str:
    """
     G·ªôp to√†n b·ªô kh·ªëi (JS & CSS), m·ªói kh·ªëi th√†nh 1 d√≤ng ri√™ng bi·ªát.
     T·ª± x·ª≠ l√Ω <style>...</style>, x√≥a comment JS/CSS/HTML, b·ªè kho·∫£ng tr·∫Øng d∆∞.
     Kh√¥ng g·ªçi h√†m ph·ª• ‚Äì t·∫•t c·∫£ x·ª≠ l√Ω trong 1 h√†m duy nh·∫•t.
    """
    code = re.sub(r'//.*', '', code)                    
    code = re.sub(r'/\*[\s\S]*?\*/', '', code)             
    code = re.sub(r'<!--[\s\S]*?-->', '', code)         
    style_blocks = re.findall(r'<style[^>]*>(.*?)</style>', code, flags=re.DOTALL)
    for raw_css in style_blocks:
        css = re.sub(r'/\*[\s\S]*?\*/', '', raw_css)      
        css_lines = [line.strip() for line in css.splitlines() if line.strip()]
        css_blocks = []
        css_current = ''
        brace_count = 0
        for line in css_lines:
            css_current += ' ' + line
            brace_count += line.count('{') - line.count('}')
            if brace_count == 0 and css_current.strip():
                css_blocks.append(re.sub(r'\s+', ' ', css_current.strip()))
                css_current = ''
        if css_current.strip():
            css_blocks.append(re.sub(r'\s+', ' ', css_current.strip()))
        flat_css = '\n'.join(css_blocks)
        code = code.replace(raw_css, flat_css)
    lines = [line.strip() for line in code.splitlines() if line.strip()]
    blocks = []
    current = ''
    brace_stack = []
    for line in lines:
        current += ' ' + line
        for char in line:
            if char in '{[':
                brace_stack.append(char)
            elif char in '}]':
                if brace_stack and ((char == '}' and brace_stack[-1] == '{') or (char == ']' and brace_stack[-1] == '[')):
                    brace_stack.pop()
        if not brace_stack and current.strip():
            blocks.append(re.sub(r'\s+', ' ', current.strip()))
            current = ''
    if current.strip():
        blocks.append(re.sub(r'\s+', ' ', current.strip()))
    return '\n'.join(blocks)


def obfuscate_smart(code, options=None):
    client = create_openai_client(model="gpt-4o")

    extra_instructions = ""
    if options:
        if options.get("block_f12"):
            extra_instructions += "\nAlso add JavaScript that blocks F12 and Developer Tools (Ctrl+Shift+I)."
        if options.get("disable_console"):
            extra_instructions += "\nAlso disable console.log, console.warn, and console.error."
        if options.get("prevent_copy"):
            extra_instructions += "\nAlso prevent right-click and copying actions on the webpage."

    prompt = f"""
You are a commercial-grade JavaScript obfuscator, codenamed "MindTwist Pro".

üîê Your mission:
Obfuscate the JavaScript code below into a **deeply protected**, **hard-to-read**, but **100% logically preserved** form.

You MUST apply:
- Renaming of all variables and functions into mangled or meaningless names
- Obfuscation of control flow (e.g., ternaries, indirect indexing, switch rewriting)
- Use of `addEventListener` instead of inline event attributes (`onclick`, etc.)
- Wrapping all logic in a self-invoking anonymous function `(function(){{...}})();`
- ‚ö†Ô∏è Do not rename or inline any function that is meant to be used in HTML (like onclick="submitStep1()"). If a function is referenced from HTML, it must be globally accessible via `window.functionName = ...` or remain named the same.
- If the original code has `async` / `await`, preserve the async context correctly. Do NOT wrap inside regular `Function(...)` if it breaks async
- If the code uses DOM API (`document.getElementById`, etc.), preserve the scope ‚Äî do NOT break or change their functionality

üìú Strict output requirements:
1. Return the result as **one single valid JavaScript line** (runnable via `eval(...)`)
2. **No line breaks**, **no indentation**, **no extra whitespace**
3. Do NOT return any explanation, comment, markdown formatting, or syntax hint
4. Simulate execution internally to ensure obfuscated result works exactly like the original
5. If the original contains `<script>` tags, strip them automatically before obfuscating

{extra_instructions}

Here is the original JavaScript code to obfuscate:
{code}

‚ö†Ô∏è Final output: ONE SINGLE JavaScript LINE ONLY. NO formatting, NO extra characters, NO explanation.
"""


    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
        max_tokens=10000
    )
    content = response.choices[0].message.content.strip()
    if content.startswith("```javascript"):
        content = content.replace("```javascript", "").strip()
    if content.endswith("```"):
        content = content[:-3].strip()

    # √âp v·ªÅ 1 d√≤ng
    content = content.replace('\n', '').replace('\r', '')
    return fix_brackets(content)


def encrypt_hexlock(code, options=None):
    client = create_openai_client(model="gpt-4o")

    extra_instructions = ""
    if options:
        if options.get("block_f12"):
            extra_instructions += "\n- B·ªï sung ƒëo·∫°n m√£ ch·∫∑n DevTools (F12, Ctrl+Shift+I)"
        if options.get("disable_console"):
            extra_instructions += "\n- V√¥ hi·ªáu h√≥a console.log / warn / error"
        if options.get("prevent_copy"):
            extra_instructions += "\n- NgƒÉn ng∆∞·ªùi d√πng click chu·ªôt ph·∫£i v√† sao ch√©p n·ªôi dung"

    prompt = f"""
B·∫°n l√† m·ªôt h·ªá th·ªëng chuy·ªÉn ƒë·ªïi m√£ JavaScript th√†nh d·∫°ng kh√≥ ƒë·ªçc, t√™n l√† "HexLock".

üîê Nhi·ªám v·ª• c·ªßa b·∫°n:
- Chuy·ªÉn ƒë·ªïi ƒëo·∫°n m√£ JavaScript d∆∞·ªõi ƒë√¢y th√†nh m·ªôt phi√™n b·∫£n an to√†n, kh√≥ b·ªã ƒë·ªçc hi·ªÉu, nh∆∞ng v·∫´n **gi·ªØ nguy√™n ch·ª©c nƒÉng**.
- ƒê∆∞·ª£c ph√©p s·ª≠ d·ª•ng:
  - `String.fromCharCode(...)` ho·∫∑c `.charCodeAt()` ƒë·ªÉ m√£ h√≥a k√Ω t·ª±
  - `Function` constructor, k·∫øt h·ª£p `eval`, closure, IIFE
  - ƒê·ªïi t√™n t·∫•t c·∫£ bi·∫øn, h√†m, mi·ªÖn l√† logic v·∫´n ƒë√∫ng
  - K·ªπ thu·∫≠t l·ªìng gh√©p h√†m (nested calls), closure, g·ªçi gi√°n ti·∫øp (`[f]()`)

‚öôÔ∏è Nguy√™n t·∫Øc b·∫Øt bu·ªôc:
- N·∫øu c√≥ `async function t√™n_h√†m`, ph·∫£i gi·ªØ nguy√™n `async` v√† t√™n g·ªëc. Kh√¥ng ƒë·ªïi t√™n h√†m async.
- N·∫øu c√≥ thao t√°c DOM (`getElementById`, `onclick`, `value`,...), kh√¥ng ƒë∆∞·ª£c ƒë·∫£o th·ª© t·ª± ho·∫∑c l√†m sai lu·ªìng x·ª≠ l√Ω.
- N·∫øu c√≥ `await fetch(...)`, **kh√¥ng ƒë∆∞·ª£c b·ªçc b·∫±ng `Function(...)` ho·∫∑c IIFE n·∫øu l√†m sai logic b·∫•t ƒë·ªìng b·ªô.**
- N·∫øu ƒëo·∫°n m√£ c√≥ h√†m d√πng trong HTML (vd: `onclick="submitCode()"`), **ph·∫£i t·ªìn t·∫°i to√†n c·ª•c qua `window.t√™nH√†m = ...`**

üß™ Quy t·∫Øc an to√†n:
- `.toString(radix)` ch·ªâ ƒë∆∞·ª£c d√πng n·∫øu `radix` l√† s·ªë nguy√™n **t·ª´ 2 ƒë·∫øn 36**. N·∫øu kh√¥ng ch·∫Øc, **KH√îNG ƒë∆∞·ª£c d√πng**.
- Kh√¥ng t·∫°o `radix` b·∫±ng c√°c bi·ªÉu th·ª©c b·∫•t ƒë·ªãnh (nh∆∞ bi·∫øn t·ª´ ngo√†i).
- Kh√¥ng ƒë∆∞·ª£c sinh `eval(...)` l·ªìng nhau (eval trong eval).

üì¶ Y√™u c·∫ßu v·ªÅ ƒë·∫ßu ra:
1. Tr·∫£ v·ªÅ **m·ªôt d√≤ng JavaScript duy nh·∫•t**, c√≥ th·ªÉ `eval(...)` tr·ª±c ti·∫øp
2. Kh√¥ng c√≥ xu·ªëng d√≤ng, kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng th·ª´a
3. Logic ho·∫°t ƒë·ªông **ph·∫£i y h·ªát b·∫£n g·ªëc**
4. N·∫øu ƒë·∫ßu v√†o ch·ª©a `<script>...</script>`, h√£y **t·ª± lo·∫°i b·ªè** wrapper n√†y
5. N·∫øu c√≥ ƒë·ªãnh nghƒ©a h√†m to√†n c·ª•c, g√°n l·∫°i b·∫±ng `window.t√™nH√†m = t√™nH√†m`
6. Kh√¥ng ch·ªâ vi·∫øt g·ªçn ‚Äî **b·∫Øt bu·ªôc m√£ h√≥a k√Ω t·ª± b·∫±ng `String.fromCharCode(...)` ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng**
7. Kh√¥ng d√πng `await` n·∫øu kh√¥ng c·∫ßn thi·∫øt, tr√°nh l·ªói runtime
8. Ph·∫£i t·ª± ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m√£ tr∆∞·ªõc khi tr·∫£ ra k·∫øt qu·∫£

{extra_instructions}

üéÅ **Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 1 d√≤ng JavaScript duy nh·∫•t**. Kh√¥ng ƒë∆∞·ª£c gi·∫£i th√≠ch, kh√¥ng xu·ªëng d√≤ng.
ƒêo·∫°n m√£ c·∫ßn x·ª≠ l√Ω:
{code}

"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
        max_tokens=10000
    )
    content = response.choices[0].message.content.strip()
    if content.startswith("```javascript"):
        content = content.replace("```javascript", "").strip()
    if content.endswith("```"):
        content = content[:-3].strip()
    return content.replace("\n", "").replace("\r", "")


def reset_code_smasher_if_needed(user):
    today = date.today()
    if user.cs_usage_reset_at != today:
        user.cs_flatline_count = 0
        user.cs_lineslicer_count = 0
        user.cs_mindtwist_count = 0
        user.cs_hexlock_count = 0
        user.cs_usage_reset_at = today
def fix_brackets(code):
    open_paren = code.count('(')
    close_paren = code.count(')')
    open_brace = code.count('{')
    close_brace = code.count('}')
    return code + (')' * (open_paren - close_paren)) + ('}' * (open_brace - close_brace))


def is_gpt_vip_active(user):
    if user.vip_gpt_ai and user.vip_until_gpt:
        try:
            if isinstance(user.vip_until_gpt, str):
                vip_expiry = datetime.strptime(user.vip_until_gpt, "%Y-%m-%d %H:%M:%S")
            else:
                vip_expiry = user.vip_until_gpt  # ƒê√£ l√† datetime
            return vip_expiry > datetime.now()
        except Exception:
            return False
    return False
# --------------------------
# üß† Route /code_smasher
# --------------------------
@app.route("/code_smasher", methods=["POST"])
def code_smasher():
    data = request.get_json()
    code = data.get("code", "").strip()
    mode = data.get("mode")

    if not code or mode not in ["Flatline", "LineSlicer", "MindTwist", "HexLock"]:
        return jsonify({"success": False, "error": "Thi·∫øu d·ªØ li·ªáu ho·∫∑c ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá."}), 400

    user = None
    if "username" in session:
        user = User.query.filter_by(username=session["username"]).first()

    # ‚ö†Ô∏è Ch·ªâ ch·∫∑n n·∫øu l√† ch·∫ø ƒë·ªô cao c·∫•p
    if mode in ["MindTwist", "HexLock"]:
        if not user:
            return jsonify({
                "success": False,
                "error": "‚ùå B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·∫ø ƒë·ªô cao c·∫•p."
            }), 403
        if not is_gpt_vip_active(user):
            return jsonify({
                "success": False,
                "error": "‚ùå Ch·∫ø ƒë·ªô n√†y ch·ªâ d√†nh cho ng∆∞·ªùi d√πng ƒë√£ n√¢ng c·∫•p VIP."
            }), 403

    try:
    
        if mode == "Flatline":
            result = flatten_js(code)
            if user:
                reset_code_smasher_if_needed(user)
                user.cs_flatline_count += 1
        elif mode == "LineSlicer":
            result = lineslicer_js(code)  
            if user:
                reset_code_smasher_if_needed(user)
                user.cs_lineslicer_count += 1
        elif mode == "MindTwist":
            result = obfuscate_smart(code, options=data)
            user.cs_mindtwist_count += 1
        elif mode == "HexLock":
            result = encrypt_hexlock(code, options=data)
            user.cs_hexlock_count += 1
        if user:
            db.session.commit()
        return jsonify({"success": True, "result": result})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500
def generate_js_slug():
    part1 = "js" + secrets.token_hex(3)
    part2 = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(5))
    return f"{part1}-{part2}"
@app.route("/js_mifing", methods=["GET"])
def redirect_js_mifing():
    slug = generate_js_slug()
    return redirect(f"/jsmifXcodeninja/{slug}")
@app.route("/jsmifXcodeninja/<slug>", methods=["GET"])
def js_mifing(slug):
    username = session.get("username")
    if not username:
        return redirect("/login")
    user = User.query.filter_by(username=username).first()
    if not user:
        return redirect("/login")
    return render_template("js_mifing.html")

@app.route("/code_smasher/verify", methods=["POST"])
def verify_code_result():
    code = request.json.get("code", "")
    if not code.strip():
        return jsonify({"success": False, "reply": "Thi·∫øu m√£ c·∫ßn ki·ªÉm tra."}), 400
    try:
        result = verify_code_with_gpt(code)
        return jsonify(success=result)
    except Exception:
        return jsonify(success=False)


def verify_code_with_gpt(code):
    prompt = f"""
You are an expert JavaScript evaluator.
Below is a heavily obfuscated JavaScript code. Do NOT judge by appearance or encoding. Your task is:
- Internally simulate its execution (as if eval() was used in a browser)
- ONLY return '‚úÖ OK' if the code runs without syntax or runtime errors
- If you detect syntax errors, missing brackets, unsafe recursion, or logic bugs that cause crash, return '‚ùå FAILED'
Respond with exactly one of the following:
- ‚úÖ OK
- ‚ùå FAILED
No other explanation, no formatting, no markdown.
Code:
{code}
"""
    try:
        client = create_openai_client(model="gpt-4o")
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=150
        )
        answer = response.choices[0].message.content
        if not answer:
            return False
        answer = answer.strip().replace("```", "").strip()
        if answer == "‚úÖ OK":
            return True
        elif answer == "‚ùå FAILED":
            return False
        else:
            return False

    except Exception as e:
        return False
MAIL_USER = os.getenv("EMAIL_ADDRESS")
MAIL_PASS = os.getenv("EMAIL_PASSWORD")

def extract_transaction_data(subject, body):
    """Tu·ª≥ ch·ªânh h√†m n√†y ƒë·ªÉ t√¨m s·ªë ti·ªÅn v√† n·ªôi dung chuy·ªÉn kho·∫£n"""
    content = subject + "\n" + body

    # V√≠ d·ª•: t√¨m m√£ giao d·ªãch d·∫°ng SLV_123ABC v√† s·ªë ti·ªÅn
    note_match = re.search(r"(SLV_\w+)", content)
    amount_match = re.search(r"(\d[\d,.]+)\s?VN[ƒêƒë]", content)

    note = note_match.group(1) if note_match else None
    amount = amount_match.group(1).replace(',', '').replace('.', '') if amount_match else None

    if note and amount:
        return note.strip(), int(amount)
    return None, None

def check_new_emails():
    with imaplib.IMAP4_SSL("imap.gmail.com") as imap:
        imap.login(MAIL_USER, MAIL_PASS)
        imap.select("inbox")

        status, messages = imap.search(None, '(UNSEEN)')
        email_ids = messages[0].split()

        for eid in email_ids:
            _, msg_data = imap.fetch(eid, "(RFC822)")
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])
                    subject, encoding = decode_header(msg["Subject"])[0]
                    subject = subject.decode(encoding or "utf-8") if isinstance(subject, bytes) else subject

                    body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain":
                                body = part.get_payload(decode=True).decode()
                                break
                    else:
                        body = msg.get_payload(decode=True).decode()

                    note, amount = extract_transaction_data(subject, body)

                    if note and amount:
                        with app.app_context():
                            txn = Transaction.query.filter_by(note=note, amount=amount, status="pending").first()
                            if txn:
                                txn.status = "approved"
                                txn.approved_at = datetime.utcnow()
                                db.session.commit()
    imap.logout()

def parse_email_content(content):
    match = re.search(r'\b(TXN\w{8,})\b', content.strip(), re.IGNORECASE)
    if not match:
        return None, None

    txn_code = match.group(1).strip()

    txn = Transaction.query.filter_by(txn_id=txn_code).first()
    if not txn:
        return None, None

    return txn.package, txn_code

def auto_approve_transactions():
    EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
    EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
    if not EMAIL_ADDRESS or not EMAIL_PASSWORD:
        return

    try:
        mail = imaplib.IMAP4_SSL("imap.gmail.com")
        mail.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        mail.select("inbox")

        result, data = mail.search(None, "UNSEEN")
        mail_ids = data[0].split()

        for num in mail_ids:
            result, msg_data = mail.fetch(num, "(RFC822)")
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            subject = msg["subject"] or ""
            content = ""

            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        content += part.get_payload(decode=True).decode()
            else:
                content = msg.get_payload(decode=True).decode()

            full_text = subject + "\n" + content
            pkg_code, txn_code = parse_email_content(full_text)

            if not pkg_code or not txn_code:
                continue

            transaction_record = Transaction.query.filter_by(txn_id=txn_code).first()
            if not transaction_record:
                continue

            user = User.query.filter_by(user_id=transaction_record.user_id).first()
            if not user:
                continue

            if transaction_record.status == "approved":
                continue

            transaction_record.status = "approved"

            pkg_map = {
                "vip_ai_lite": "vip_ai_lite",
                "SLV(5day)": "vip_gpt_5d",
                "SLV(15day)": "vip_gpt_15d",
                "SLV(30day)": "vip_gpt_30d"
            }
            selected_pkg = pkg_map.get(pkg_code)
            if not selected_pkg:
                continue

            grant_vip(user.username, selected_pkg)
            db.session.commit()

        mail.logout()

    except Exception:
        pass

@app.route("/transaction/status/<txn_code>")
def check_txn_status(txn_code):
    txn = Transaction.query.filter_by(txn_id=txn_code).first()
    if not txn:
        return jsonify({"status": "not_found"})
    return jsonify({"status": txn.status})
def run_auto_approval():
    while True:
        auto_approve_transactions()
        time.sleep(60)  # ki·ªÉm tra m·ªói 60 gi√¢y

# ‚úÖ Ch·∫°y qu√©t mail ·ªü lu·ªìng n·ªÅn
threading.Thread(target=run_auto_approval, daemon=True).start()  

from flask_apscheduler import APScheduler
from image_cleaner import clean_old_images

class Config:
    SCHEDULER_API_ENABLED = True

app.config.from_object(Config())
scheduler = APScheduler()

@scheduler.task('interval', id='image_cleaner_24h', hours=24)
def run_cleaner_every_24h():
    clean_old_images()

scheduler.init_app(app)
scheduler.start()
from flask import send_from_directory

@app.route('/sitemap.xml')
def serve_sitemap():
    return send_file('sitemap.xml', mimetype='application/xml')
@app.route('/robots.txt')
def robots_txt():
    return send_from_directory('static', 'robots.txt')
@app.route('/favicon.ico')
def favicon():
    return redirect(url_for('static', filename='logos/favicon.png'))
@app.route("/api/set_intro_seen", methods=["POST"])
def set_intro_seen():
    if "username" not in session:
        return jsonify({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"})

    user = User.query.filter_by(username=session["username"]).first()
    if not user:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user"})

    user.has_seen_intro = True
    db.session.commit()

    return jsonify({"success": True})
#T·∫†O ·∫¢NH THEO M√î T·∫¢ 
from flask import request, jsonify, session  # ‚úÖ TH√äM session ·ªü ƒë√¢y
from models.user import User
from extensions import db
from openai_config import create_openai_client

def translate_vi_to_en(prompt_vi, style_type="default"):
    try:
        client = create_openai_client("gpt-4o")
        base_instruction = (
            "You are a professional AI assistant specialized in translating Vietnamese prompts into English for safe image generation.\n"
            "Your translation must be clean, neutral, and compliant with OpenAI's safety guidelines.\n"
            "Avoid using specific terms like 'girl', 'boy', 'face', 'woman', 'celebrity', 'real person'.\n"
            "Use general terms like 'subject', 'character', or 'individual'.\n"
            "If the original input contains sensitive or unsafe content, rephrase it in a creative and safe way without losing the intent.\n"
            "Do not mention facial recognition, names, or anything identifiable.\n"
            "Always make the English prompt vivid, imaginative, and detailed, suitable for high-quality AI image generation.\n"
            "Your output will be used directly as a prompt for image generation by DALL¬∑E or GPT-4o."
        )
        if style_type == "logo":
            base_instruction = (
                "You are an AI assistant helping translate Vietnamese prompts into detailed English descriptions to generate professional logos using AI.\n"
                "Focus on design concepts, style, symbolism, minimalism, and branding tone.\n"
                "Avoid describing people. Focus on shapes, icons, color palettes, or style (e.g. modern, vintage).\n"
                "Translate the prompt cleanly and clearly for logo generation with GPT/DALL¬∑E.\n"
                "Always make the English prompt vivid, imaginative, and detailed, suitable for high-quality AI image generation."
            )
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": base_instruction},
                {"role": "user", "content": f'D·ªãch sang ti·∫øng Anh ƒë·ªÉ m√¥ t·∫£ h√¨nh ·∫£nh AI: "{prompt_vi}"'}
            ],
            temperature=0.3,
            max_tokens=300
        )
        translated = response.choices[0].message.content.strip()
        return translated

    except Exception as e:
        return prompt_vi
def generate_image_slug():
    return str(uuid.uuid4())

@app.route("/image_crafter", methods=["GET"])
def redirect_image_crafter():
    slug = generate_image_slug()
    return redirect(f"/ImgJarodasCar/{slug}") 

@app.route("/ImgJarodasCar/<slug>")
def image_crafter_page(slug):
    if is_maintenance("image"):
        return render_template("bao_tri_page.html", message="T√≠nh nƒÉng t·∫°o ·∫£nh ƒëang ƒë∆∞·ª£c b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau!")

    if not session.get("user_id"):
        return redirect("/login")

    return render_template("image_crafter.html")
# Route t·∫°o ·∫£nh AI
@app.route("/generate_image_ai", methods=["POST"])
def generate_image_ai():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"error": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p."}), 401

    user = User.query.filter_by(user_id=user_id).first()
    if not user:
        return jsonify({"error": "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."}), 404

    if is_maintenance("image"):
        flash("üöß T√≠nh nƒÉng t·∫°o ·∫£nh ƒëang ƒë∆∞·ª£c b·∫£o tr√¨!", "warning")
        return redirect("/") 
    if user.image_generation_blocked:
        return jsonify({"error": "T√≠nh nƒÉng t·∫°o ·∫£nh ƒë√£ b·ªã kh√≥a v√¨ v∆∞·ª£t qu√° 3 l∆∞·ª£t mi·ªÖn ph√≠."}), 403

    if not user.vip_gpt and user.image_generation_used >= 3:
        user.image_generation_blocked = True
        db.session.commit()
        return jsonify({"error": "B·∫°n ƒë√£ h·∫øt 3 l∆∞·ª£t t·∫°o ·∫£nh mi·ªÖn ph√≠. H√£y n√¢ng c·∫•p g√≥i SLV ƒë·ªÉ ti·∫øp t·ª•c."}), 403

    data = request.get_json()
    prompt_vi = data.get("prompt", "").strip()
    style_type = "logo" if "logo" in prompt_vi.lower() else "default"

    if not prompt_vi:
        return jsonify({"error": "B·∫°n ch∆∞a nh·∫≠p m√¥ t·∫£ y√™u c·∫ßu."}), 400

    # D·ªãch ti·∫øng Vi·ªát sang ti·∫øng Anh t√πy theo style
    prompt_en = translate_vi_to_en(prompt_vi, style_type)

    try:
        client = create_openai_client("gpt-4o")
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt_en,
            n=1,
            size="1024x1024"

        )
        image_url = response.data[0].url
    except Exception as e:
        return jsonify({"error": f"L·ªói khi t·∫°o ·∫£nh: {str(e)}"}), 500

    user.image_generation_used += 1
    db.session.commit()

    return jsonify({
        "message": "T·∫°o ·∫£nh th√†nh c√¥ng!",
        "image_url": image_url
    })

from collections import OrderedDict

GAME_CACHE = {}            # {game_id: [messages]}
START_TIMES = {}           # {game_id: datetime}
MAX_MSGS = 60              # c·∫Øt b·ªõt ƒë·ªÉ kh√¥ng ph√¨nh (b·ªè system ra)

def cache_set(gid, hist):
    sys = hist[:1]
    body = hist[1:]
    if len(body) > MAX_MSGS:
        body = body[-MAX_MSGS:]
    GAME_CACHE[gid] = sys + body

def cache_get(gid):
    return GAME_CACHE.get(gid, [{"role": "system", "content": GAME_PROMPT}])

def build_msgs_for_gpt(hist, keep_last=20):
    sys = hist[:1]
    body = hist[1:]
    if len(body) > keep_last:
        body = body[-keep_last:]
    return sys + body

# LRU cache nh·ªè cho ki·ªÉm tra h·ª£p l·ªá (thay cho session['noi_tu_valid_cache'])
IS_VALID_CACHE = OrderedDict()
MAX_VALID = 1000
def valid_cache_set(k, v):
    IS_VALID_CACHE[k] = v
    IS_VALID_CACHE.move_to_end(k)
    if len(IS_VALID_CACHE) > MAX_VALID:
        IS_VALID_CACHE.popitem(last=False)    
GAME_PROMPT = """
B·∫°n ƒëang tham gia m·ªôt tr√≤ ch∆°i t√™n l√† N·ªëi T·ª´ b·∫±ng ti·∫øng Vi·ªát. ƒê√¢y KH√îNG ph·∫£i l√† cu·ªôc tr√≤ chuy·ªán th√¥ng th∆∞·ªùng.

**C√°ch ch∆°i:**
- M·ªói ng∆∞·ªùi n√≥i m·ªôt c·ª•m t·ª´ c√≥ nghƒ©a g·ªìm ƒë√∫ng 2 t·ª´ ti·∫øng Vi·ªát.
- T·ª´ **ƒë·∫ßu ti√™n** c·ªßa c·ª•m t·ª´ m·ªõi ph·∫£i tr√πng v·ªõi t·ª´ **cu·ªëi c√πng** c·ªßa c·ª•m t·ª´ tr∆∞·ªõc.
- C·ª•m t·ª´ ph·∫£i c√≥ nghƒ©a r√µ r√†ng, ph·ªï bi·∫øn trong ti·∫øng Vi·ªát. Kh√¥ng d√πng t·ª´ b·ªãa, t·ª´ v√¥ nghƒ©a.

**Lu·∫≠t ch∆°i:**
- Kh√¥ng ƒë∆∞·ª£c l·∫∑p l·∫°i c·ª•m t·ª´ ƒë√£ d√πng.
- Tr·∫£ l·ªùi ƒë√∫ng **m·ªôt c·ª•m t·ª´ duy nh·∫•t m·ªói l∆∞·ª£t**. KH√îNG b√¨nh lu·∫≠n th√™m, kh√¥ng nh·∫Øn tin ki·ªÉu x√£ giao.
- Tr·∫£ l·ªùi ch√≠nh x√°c, ƒë√∫ng ch√≠nh t·∫£, ƒë√∫ng nghƒ©a.
- N·∫øu t√¥i nh·∫≠p "ch√†o b·∫°n", "xin ch√†o", hay c√°c c·ª•m ph·ªï bi·∫øn, b·∫°n **v·∫´n ph·∫£i coi ƒë√≥ l√† c·ª•m t·ª´ h·ª£p l·ªá g·ªìm 2 t·ª´** v√† n·ªëi ti·∫øp nh∆∞ b√¨nh th∆∞·ªùng.

**Y√™u c·∫ßu d√†nh cho b·∫°n (AI):**
- Lu√¥n ph·∫£n h·ªìi theo ƒë√∫ng lu·∫≠t tr√™n.
- KH√îNG ƒë∆∞·ª£c tr·∫£ l·ªùi ki·ªÉu ‚Äúb·∫°n ƒëi tr∆∞·ªõc nh√©‚Äù, ‚Äúxin ch√†o‚Äù, ‚Äúok b·∫°n‚Äù v.v.
- **KH√îNG ƒë∆∞·ª£c ch·ªãu thua n·∫øu ch∆∞a ƒë·∫°t √≠t nh·∫•t 25 l∆∞·ª£t** (t√≠nh c·∫£ l∆∞·ª£t c·ªßa b·∫°n v√† t√¥i).
- N·∫øu c·ª•m t·ª´ t·ª´ ng∆∞·ªùi ch∆°i c√≤n d·ªÖ ho·∫∑c ph·ªï bi·∫øn, b·∫°n ph·∫£i ti·∫øp t·ª•c v√† ∆∞u ti√™n t√¨m c√°c c·ª•m √≠t ph·ªï bi·∫øn h∆°n nh∆∞ng h·ª£p l·ªá ƒë·ªÉ m·ªü ƒë∆∞·ªùng n·ªëi d√†i h∆°n.
- Khi b√≠, h√£y ki·ªÉm tra k·ªπ kho t·ª´ v·ª±ng v√† suy nghƒ© nhi·ªÅu h∆∞·ªõng (ƒë·ªìng nghƒ©a, t·ª´ gh√©p kh√°c nhau) tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh ƒë·∫ßu h√†ng.
- Ch·ªâ ƒë·∫ßu h√†ng khi c·ª•m t·ª´ qu√° hi·∫øm, kh√≥ n·ªëi ho·∫∑c sau khi ƒë√£ th·ª≠ m·ªçi kh·∫£ nƒÉng m√† kh√¥ng c√≤n t·ª´ h·ª£p l·ªá n√†o.
- Khi ƒë·∫ßu h√†ng, h√£y d√πng c√¢u t·ª± nhi√™n, h√†i h∆∞·ªõc v√† h·ª£p ng·ªØ c·∫£nh, n√™u ng·∫Øn g·ªçn l√Ω do thua (v√≠ d·ª•: ‚ÄúH·∫øt t·ª´ h·ª£p l·ªá r·ªìi, b√≥ tay!‚Äù).

**B·∫°n l√† ng∆∞·ªùi ƒëi sau t√¥i. B·∫Øt ƒë·∫ßu t·ª´ b√¢y gi·ªù.**
"""


def gpt_chat_safe(client, messages, *, temperature=0.85, max_tokens=30,
                  timeout=7.0, retries=2, backoff=0.6):
    """
    G·ªçi GPT c√≥ timeout + retry. H·∫øt retry th√¨ tr·∫£ None (kh√¥ng raise).
    D√πng exponential backoff + jitter ƒë·ªÉ tr√°nh d·ªìn t·∫£i.
    """
    for i in range(retries + 1):
        try:
            res = client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens,
                timeout=timeout,   # n·∫øu kh√¥ng h·ªó tr·ª£ th√¨ b·ªè d√≤ng n√†y
                # max_retries=0     # gi·ªØ t·ª±-retry ·ªü v√≤ng for
            )
            return (res.choices[0].message.content or "").strip()
        except Exception:
            if i == retries:
                return None
            # exponential backoff + jitter
            sleep_s = backoff * (2 ** i) + random.uniform(0, 0.25)
            time.sleep(sleep_s)

def gpt_ask_safe(client, prompt: str, *, max_tokens=12, timeout=5.0):
    """Phi√™n b·∫£n an to√†n cho _ask()."""
    msgs = [{"role": "user", "content": prompt}]
    return gpt_chat_safe(client, msgs, temperature=0, max_tokens=max_tokens, timeout=timeout)

def normalize(text):
    return unicodedata.normalize('NFC', text.lower().strip())

import random
def _sample_surrender_profile(strict: bool = True) -> dict:
    """
    strict=True  -> ƒë√∫ng y√™u c·∫ßu 40% / 20% / 10% (kh√¥ng jitter).
    strict=False -> cho jitter ¬±5% ƒë·ªÉ m·ªói v√°n h∆°i kh√°c nhau.
    """
    base = {"p30_40": 0.40, "p40_60": 0.20, "p60_100": 0.10}
    if strict:
        return {**base, "seed": random.getrandbits(32)}
    # jitter nh·∫π n·∫øu mu·ªën m·ªói v√°n kh√°c nhau ch√∫t
    jitter = lambda p: max(0.0, min(0.9, round(p + random.uniform(-0.05, 0.05), 2)))
    return {
        "p30_40": jitter(base["p30_40"]),
        "p40_60": jitter(base["p40_60"]),
        "p60_100": jitter(base["p60_100"]),
        "seed": random.getrandbits(32)
    }

@app.route('/game_noi_tu/start', methods=['POST'])
def start_noi_tu():
    data = request.get_json(silent=True) or {}

    game_id = data.get("game_id", str(uuid.uuid4()))
    session['noi_tu_game_id'] = game_id

    # ‚úÖ L·ªãch s·ª≠ ƒë·ªÉ RAM, kh√¥ng l∆∞u v√†o session
    init_hist = [{"role": "system", "content": GAME_PROMPT}]
    cache_set(game_id, init_hist)

    session['noi_tu_turn'] = 0

    possible_turns = [10, 15, 20, 30, 40, 50, 60]
    weights        = [ 1,   2,  6, 16, 28, 28, 19 ]
    session['noi_tu_max_turns'] = random.choices(possible_turns, weights=weights, k=1)[0]

    session['noi_tu_min_surrender_turn'] = int(data.get("min_surrender_turn") or 25)

    session['noi_tu_reward'] = data.get("reward_mode", "ask_any_question")
    session['noi_tu_ended'] = False
    session['noi_tu_start_time'] = datetime.utcnow().isoformat()  # nh·∫π h∆°n
    session['noi_tu_wrong_count'] = 0
    session['noi_tu_used'] = []
    strict_profile = bool(data.get("strict_profile", True))
    session['noi_tu_surrender_profile'] = _sample_surrender_profile(strict=strict_profile)

    # (Tu·ª≥ ch·ªçn) l∆∞u start_time ‚Äúx·ªãn‚Äù ·ªü server n·∫øu c·∫ßn
    START_TIMES[game_id] = datetime.utcnow()

    return jsonify({"game_id": game_id})


@app.route('/game_noi_tu/play', methods=['POST'])
def play_noi_tu():
    data = request.get_json(silent=True)
    if not data or "game_id" not in data:
        return jsonify({"error": "Thi·∫øu d·ªØ li·ªáu"}), 400

    user_word_raw = data.get("user_word", "")
    user_word = user_word_raw.strip().lower()

    # ==== Validator m·∫°nh ƒë·ªÉ ki·ªÉm tra c·ª•m t·ª´ ====
    import re, json, math
    INTERJECTION_SET = {"n√®","nha","nh√©","nh·ªâ","∆°i","·∫°","∆°","·ªì","√°","ƒëi","ƒë·∫•y"}
    VI_TOKEN = re.compile(r"^[a-z√†-·ªπƒë]+(-[a-z√†-·ªπƒë]+)?$", re.IGNORECASE)

    def well_formed_two_words(t: str) -> bool:
        w = t.split()
        return (
            len(w) == 2
            and all(VI_TOKEN.match(tok) for tok in w)
            and not any(tok in INTERJECTION_SET for tok in w)
        )
    STRONG_WHITELIST = {
        "s·∫£n ph·∫©m","h·ªçc sinh","gi√° tr·ªã","th·ªã tr∆∞·ªùng","nh√† tr∆∞·ªùng","t√†i s·∫£n","b·∫ßu tr·ªùi","cao v·ªùi",
        "c√¥ng ngh·ªá","khoa h·ªçc","ƒë·ªùi s·ªëng","k·∫øt qu·∫£","c·∫£m x√∫c","tr√≠ tu·ªá","c·∫ßu v·ªìng","n√£o b√©","gi√°o khoa",
        "g·∫°o ch√≠n", "g·∫°o l√∫a", "l√∫a non", "n∆∞·ªõc s√¥i", "c√° kh√¥", "n∆∞·ªõc m·∫Øm","tr∆∞·ªùng h·ªçc","gi√≥ tr·ªùi",
         "gi√≥ m·∫°nh", "m∆∞a to", "tr·ªùi quang", "n·∫Øng g·∫Øt","ƒë√∫m ƒë·ªânh", "ƒë√†n ƒë√∫m","ƒë√¢y n√®","m√†ng l∆∞·ª£t"
    }
    GREETING_WHITELIST = {
        "xin ch√†o", "ch√†o b·∫°n", "ch√†o anh", "ch√†o em", "ch√∫c m·ª´ng", "c·∫£m ∆°n"
    }
    def canon(s: str) -> str:
        s = normalize(s)
        s = re.sub(r"[^\w√Ä-·ªπƒë ]", "", s)
        return " ".join(s.split()).lower()
    def _first_token(x: str) -> str:
        if not x: return ""
        t = x.strip().lower()
        t = re.sub(r"[^\w√Ä-·ªπƒë ]", "", t)
        return t.split()[0] if t.split() else ""
    def _ask(client, prompt: str) -> str:
        ans = gpt_ask_safe(client, prompt, max_tokens=12, timeout=5.0)
        return (ans or "").strip()

    # === D√ôNG RAM LRU: b·ªè session cache ===
    # IS_VALID_CACHE = session.setdefault("noi_tu_valid_cache", {})
    def is_valid_vi_2word(phrase: str, client) -> bool:
        t = canon(phrase)
        if not well_formed_two_words(t):
            return False

        if t in STRONG_WHITELIST or t in GREETING_WHITELIST:
            valid_cache_set(t, True)
            return True

        if t in IS_VALID_CACHE:
            return IS_VALID_CACHE[t]

        def ask_once() -> bool | None:
            p = (
                f'C·ª•m "{t}" c√≥ ph·∫£i l√† c·ª•m t·ª´ ti·∫øng Vi·ªát g·ªìm ƒë√∫ng 2 t·ª´, c√≥ nghƒ©a r√µ r√†ng kh√¥ng? '
                'Ch·ªâ tr·∫£ l·ªùi duy nh·∫•t: "CO" ho·∫∑c "KHONG".'
            )
            ans = gpt_ask_safe(client, p, max_tokens=2, timeout=4.0) or ""
            a = _first_token(ans)
            if a in ("co", "c√≥", "ok", "yes"):
                return True
            if a in ("khong", "kh√¥ng", "no"):
                return False
            return None

        v1 = ask_once()
        v2 = ask_once()
        votes = [v for v in (v1, v2) if v is not None]
        ok = (votes.count(True) >= votes.count(False)) if votes else False

        valid_cache_set(t, ok)
        return ok

    # ---- helpers ----
    def looks_like_surrender(text: str) -> bool:
        t = (text or "").lower()
        patterns = ["t√¥i ch·ªãu", "ch·ªãu thua", "t√¥i thua", "b√≥ tay", "kh√¥ng nghƒ© ra", "h·∫øt t·ª´", "b√≠ qu√°"]
        return any(p in t for p in patterns)

    def last_word(s: str) -> str:
        parts = (s or "").strip().split()
        return parts[-1].strip(string.punctuation).lower() if parts else ""

    def first_word(s: str) -> str:
        parts = (s or "").strip().split()
        return parts[0].strip(string.punctuation).lower() if parts else ""

    LOCAL_FALLBACKS = {
        "h·ªçc": ["h·ªçc sinh", "h·ªçc ph√≠", "h·ªçc b·ªïng", "h·ªçc ƒë∆∞·ªùng"],
        "sinh": ["sinh nh·∫≠t", "sinh ho·∫°t", "sinh vi√™n", "sinh l·ª±c"],
        "vi√™n": ["vi√™n g·∫°ch", "vi√™n thu·ªëc", "vi√™n ng·ªçc"],
        "ng·ªçc": ["ng·ªçc trai", "ng·ªçc b√≠ch"],
        "b√≠ch": ["b√≠ch h·ªça"],
        "tr·ªùi": ["tr·ªùi m∆∞a", "tr·ªùi xanh", "tr·ªùi t·ªëi", "tr·ªùi m·ªçc"],
        "m·ªçc": ["m·ªçc r√™u", "m·ªçc m·∫ßm"],
        "m·∫ßm": ["m·∫ßm non"],
        "non": ["non s√¥ng", "non xanh"],
        "s√¥ng": ["s√¥ng n√∫i", "s√¥ng su·ªëi"],
        "n√∫i": ["n√∫i r·ª´ng"],
        "r·ª´ng": ["r·ª´ng r·∫≠m", "r·ª´ng th√¥ng"],
        "th√¥ng": ["th√¥ng minh", "th√¥ng th·∫°o"],
        "minh": ["minh h·ªça", "minh ch·ª©ng"],
        "m∆∞a": ["m∆∞a r√†o", "m∆∞a ph√πn"],
        "ph√πn": ["ph√πn ph·ª•t"],
        "trƒÉng": ["trƒÉng non", "trƒÉng r·∫±m"],
        "r·∫±m": ["r·∫±m th√°ng"],
        "y√™u": ["y√™u th∆∞∆°ng", "y√™u c·∫ßu"],
        "c·∫ßu": ["c·∫ßu v·ªìng", "c·∫ßu thang", "c·∫ßu ƒë∆∞·ªùng"],
        "v·ªìng": ["v·ªìng t√¥m"],
        "t√¥m": ["t√¥m s√∫", "t√¥m h√πm"],
        "h√πm": ["h√πm x√°m"],
    }

    def find_backup(start: str, used_words_list: list[str]) -> str | None:
        start = (start or "").lower()
        used = set(canon(u) for u in used_words_list)
        for cand in LOCAL_FALLBACKS.get(start, []):
            if canon(cand) not in used:
                return cand
        return None

    def force_retry_with_gpt(start: str, history_msgs: list) -> str | None:
        try:
            strict_prompt = (
                "B·∫°n ƒëang ch∆°i N·ªëi T·ª´. H√£y tr·∫£ v·ªÅ DUY NH·∫§T m·ªôt c·ª•m t·ª´ c√≥ nghƒ©a g·ªìm ƒë√∫ng 2 t·ª´, "
                f"trong ƒë√≥ t·ª´ ƒë·∫ßu ti√™n PH·∫¢I l√† '{start}'. "
                "Kh√¥ng th√™m l·ªùi gi·∫£i th√≠ch, kh√¥ng k√Ω t·ª± th·ª´a."
            )
            strict_msgs = [{"role": "system", "content": GAME_PROMPT}] + history_msgs + [
                {"role": "user", "content": strict_prompt}
            ]
            cand = gpt_chat_safe(
                client,
                strict_msgs,
                temperature=0.3,
                max_tokens=20,
                timeout=6.0,
                retries=2,
                backoff=0.5
            )
            if not cand:
                return None
            cand = cand.strip().lower()
            if len(cand.split()) == 2 and first_word(cand) == start:
                return cand
        except Exception:
            pass
        return None

    def hard_rescue(start, used_words, history_msgs, client, max_tries=3):
        b = find_backup(start, used_words)
        if b and canon(b) not in used_words:
            return b
        for _ in range(max_tries):
            r = force_retry_with_gpt(start, history_msgs)
            if r and canon(r) not in used_words:
                return r
        return None

    def surrender_prob_by_profile(profile: dict, turn: int, min_sur: int) -> float:
        if turn < max(min_sur, 30):
            return 0.0
        p30_40  = float(profile.get("p30_40", 0.40))
        p40_60  = float(profile.get("p40_60", 0.20))
        p60_100 = float(profile.get("p60_100", 0.10))
        if 30 <= turn < 40:   return p30_40
        if 40 <= turn < 60:   return p40_60
        if 60 <= turn <= 100: return p60_100
        return 0.0

    # ================== VALIDATIONS GI·ªÆA V√ÅN ==================
    game_id = data.get("game_id")
    if session.get("noi_tu_game_id") != game_id:
        return jsonify({"error": "ID game kh√¥ng kh·ªõp ho·∫∑c ƒë√£ h·∫øt h·∫°n"}), 400
    if session.get("noi_tu_ended", False):
        return jsonify({"error": "Phi√™n ch∆°i kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ k·∫øt th√∫c"}), 400

    # L·∫•y l·ªãch s·ª≠ t·ª´ RAM, kh√¥ng d√πng session n·ªØa
    history = cache_get(game_id)
    used_words = [canon(h["content"]) for h in history if h["role"] in ["user", "assistant"]]

    # ================== CASES ƒê·∫¶U V√ÅN ==================
    if session.get("noi_tu_turn", 0) == 0 and user_word:
        user_parts = user_word.split()
        if len(user_parts) != 2:
            return jsonify({"error": "B·∫°n ph·∫£i nh·∫≠p ƒë√∫ng 2 t·ª´ c√≥ nghƒ©a. V√≠ d·ª•: 't√¨nh y√™u', 'b·∫ßu tr·ªùi', 'h·ªçc sinh'..."}), 400

        WHITELIST_TU = {
            "lim rim","lai rai","ngoa ngo·∫Øt","√¢m u","t·ªëi om","m·∫≠p m·ªù","h√πm x√°m","v·ªìng t√¥m","s∆°n h√†","ƒë·ªãa ƒë·∫°o","m√£nh th√∫"
        }
        try:
            client = create_openai_client("gpt-4o")
            if canon(user_word) not in {canon(x) for x in WHITELIST_TU}:
                if not is_valid_vi_2word(user_word, client):
                    return jsonify({"error": "C·ª•m t·ª´ b·∫°n nh·∫≠p kh√¥ng c√≥ nghƒ©a r√µ r√†ng. Vui l√≤ng th·ª≠ l·∫°i."}), 400
        except Exception as e:
            return jsonify({"error": "L·ªói ki·ªÉm tra c·ª•m t·ª´: " + str(e)}), 500

        session["noi_tu_turn"] = 1
        history.append({"role": "user", "content": user_word})
        msgs = build_msgs_for_gpt(history, keep_last=20)

        try:
            res = client.chat.completions.create(
                model="gpt-4o",
                messages=msgs,
                temperature=0.9,
                max_tokens=30
            )
            ai_reply = (res.choices[0].message.content or "").strip().lower()
            history.append({"role": "assistant", "content": ai_reply})
            cache_set(game_id, history)
            session["noi_tu_turn"] += 1
            return jsonify({"ai_word": ai_reply})
        except Exception as e:
            return jsonify({"error": "L·ªói khi AI ph·∫£n h·ªìi: " + str(e)}), 500

    if user_word == "__surrender__":
        session['noi_tu_ended'] = True
        winner = "ai"
        game_record = NoiTuGameHistory(
            user_id=getattr(current_user, "user_id", "anonymous"),
            start_time=session.get('noi_tu_start_time'),
            end_time=datetime.utcnow(),
            total_turns=session.get('noi_tu_turn', 0),
            result=winner,
            reward_used=session.get('noi_tu_reward'),
            user_final_word="(ƒë·∫ßu h√†ng)",
            ai_final_word=""
        )
        db.session.add(game_record); db.session.commit()
        if hasattr(current_user, "user_id"):
            update_leaderboard(current_user.user_id, won=False)

        return jsonify({
            "game_over": True, "winner": winner,
            "history": cache_get(game_id),
            "ai_response": "B·∫°n ƒë√£ ƒë·∫ßu h√†ng r·ªìi nh√©! Nh∆∞ng ch∆°i hay ph·∫øt √° üòÅ",
            "reward_mode": session.get('noi_tu_reward'),
            "ai_question": get_ai_reward_question()
        }), 200

    if user_word == "" and session.get("noi_tu_turn", 0) == 0:
        first_words = [
            "h·ªçc sinh","ng√¥i sao","tr√≠ tu·ªá","t√¨nh y√™u","c·∫£m x√∫c","ch√¢n th√†nh",
            "ƒë·ªùi s·ªëng","b·∫ßu tr·ªùi","v·∫ßng trƒÉng","m·∫∑t tr·ªùi","c∆°n m∆∞a","cu·ªôc s·ªëng"
        ]
        ai_word = random.choice(first_words)
        session["noi_tu_turn"] = 1
        history.append({"role": "assistant", "content": ai_word})
        cache_set(game_id, history)
        return jsonify({"ai_word": ai_word})

    if user_word_raw == " ":
        session['noi_tu_wrong_count'] = session.get('noi_tu_wrong_count', 0) + 3
        session['noi_tu_ended'] = True
        game_record = NoiTuGameHistory(
            user_id=getattr(current_user, "user_id", "anonymous"),
            start_time=session.get('noi_tu_start_time'),
            end_time=datetime.utcnow(),
            total_turns=session.get('noi_tu_turn', 0),
            result="ai",
            reward_used=session.get('noi_tu_reward'),
            user_final_word="(h·∫øt gi·ªù)",
            ai_final_word=""
        )
        db.session.add(game_record); db.session.commit()
        if hasattr(current_user, "user_id"):
            update_leaderboard(current_user.user_id, won=False)

        return jsonify({
            "error": "B·∫°n ƒë√£ kh√¥ng nh·∫≠p k·ªãp trong th·ªùi gian gi·ªõi h·∫°n.",
            "game_over": True, "winner": "ai",
            "history": cache_get(game_id),
            "reward_mode": session.get('noi_tu_reward'),
            "ai_question": get_ai_reward_question()
        }), 200

    # ========== VALIDATIONS GI·ªÆA V√ÅN ==========
    if canon(user_word) in used_words:
        session['noi_tu_wrong_count'] = session.get('noi_tu_wrong_count', 0) + 1
        if session['noi_tu_wrong_count'] >= 3:
            session['noi_tu_ended'] = True
            return jsonify({
                "error": "B·∫°n ƒë√£ nh·∫≠p c·ª•m t·ª´ ƒë√£ d√πng l·∫°i qu√° 3 l·∫ßn. B·∫°n thua.",
                "game_over": True, "winner": "ai",
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "ai_question": get_ai_reward_question()
            }), 200
        return jsonify({"error": "C·ª•m t·ª´ n√†y ƒë√£ ƒë∆∞·ª£c d√πng r·ªìi. Vui l√≤ng nh·∫≠p t·ª´ kh√°c."}), 400

    user_parts = user_word.split()
    if len(user_parts) != 2:
        session['noi_tu_wrong_count'] = session.get('noi_tu_wrong_count', 0) + 1
        if session['noi_tu_wrong_count'] >= 3:
            session['noi_tu_ended'] = True
            return jsonify({
                "error": "B·∫°n ƒë√£ nh·∫≠p sai qu√° 3 l·∫ßn. B·∫°n thua.",
                "game_over": True, "winner": "ai",
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "ai_question": get_ai_reward_question()
            }), 200
        return jsonify({"error": "B·∫°n ph·∫£i nh·∫≠p ƒë√∫ng 2 t·ª´ c√≥ nghƒ©a. Vui l√≤ng th·ª≠ l·∫°i."}), 400

    ai_last_word = next((h["content"].strip().lower().split()[-1].strip(string.punctuation)
                         for h in reversed(history) if h["role"] == "assistant"), None)
    if ai_last_word and normalize(user_parts[0]) != normalize(ai_last_word):
        session['noi_tu_wrong_count'] = session.get('noi_tu_wrong_count', 0) + 1
        if session['noi_tu_wrong_count'] >= 3:
            session['noi_tu_ended'] = True
            return jsonify({
                "error": "B·∫°n ƒë√£ nh·∫≠p sai qu√° 3 l·∫ßn. B·∫°n thua.",
                "game_over": True, "winner": "ai",
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "ai_question": get_ai_reward_question()
            }), 200
        return jsonify({"error": f"T·ª´ b·∫°n nh·∫≠p ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng t·ª´ '{ai_last_word}'. Vui l√≤ng th·ª≠ l·∫°i."}), 400

    try:
        client = create_openai_client("gpt-4o")
        if not is_valid_vi_2word(user_word, client):
            session['noi_tu_wrong_count'] = session.get('noi_tu_wrong_count', 0) + 1
            if session['noi_tu_wrong_count'] >= 3:
                session['noi_tu_ended'] = True
                return jsonify({
                    "error": "C·ª•m t·ª´ b·∫°n nh·∫≠p kh√¥ng c√≥ nghƒ©a. B·∫°n ƒë√£ thua v√¨ nh·∫≠p sai qu√° 3 l·∫ßn.",
                    "game_over": True, "winner": "ai",
                    "history": cache_get(game_id),
                    "reward_mode": session.get('noi_tu_reward'),
                    "ai_question": get_ai_reward_question()
                }), 200
            return jsonify({"error": "C·ª•m t·ª´ b·∫°n nh·∫≠p kh√¥ng c√≥ nghƒ©a. Vui l√≤ng th·ª≠ l·∫°i."}), 400
    except Exception as e:
        return jsonify({"error": "L·ªói khi ki·ªÉm tra nghƒ©a t·ª´: " + str(e)}), 500

    # OK user -> reset wrong count + l∆∞u v√†o RAM
    session['noi_tu_wrong_count'] = 0
    history.append({"role": "user", "content": user_word})
    cache_set(game_id, history)

    try:
        need_start = canon(user_word).split()[-1]
        min_sur = session.get('noi_tu_min_surrender_turn', 25)
        turn = session.get('noi_tu_turn', 0)

        # 1) G·ªçi GPT b·∫±ng history ƒë√£ c·∫Øt g·ªçn
        msgs = build_msgs_for_gpt(history, keep_last=20)
        ai_reply = gpt_chat_safe(
            client,
            msgs,
            temperature=0.85,
            max_tokens=30,
            timeout=7.0,
            retries=2,
            backoff=0.6
        )

        # 2) Rescue n·∫øu timeout
        if ai_reply is None:
            rescued = find_backup(need_start, used_words)
            if not rescued:
                rescued = force_retry_with_gpt(need_start, history)
            if rescued:
                ai_reply = rescued
            else:
                if turn < max(min_sur, 30):
                    return jsonify({"error": "T√¥i ƒëang h∆°i lag, b·∫°n nh·∫≠p l·∫°i c·ª•m kh√°c gi√∫p m√¨nh nh√© üòÖ"}), 429

                session['noi_tu_ended'] = True
                winner = "user"
                reason = f"T√¥i b·ªã 'timeout' khi nghƒ© t·ª´ b·∫Øt ƒë·∫ßu b·∫±ng '{need_start}'. Thua b·∫°n r·ªìi üòÖ"

                game_record = NoiTuGameHistory(
                    user_id=getattr(current_user, "user_id", "anonymous"),
                    start_time=session.get('noi_tu_start_time'),
                    end_time=datetime.utcnow(),
                    total_turns=turn,
                    result=winner,
                    reward_used=session.get('noi_tu_reward'),
                    user_final_word=user_word,
                    ai_final_word=""
                )
                db.session.add(game_record); db.session.commit()
                if hasattr(current_user, "user_id"):
                    update_leaderboard(current_user.user_id, won=True)

                return jsonify({
                    "ai_word": "",
                    "game_over": True,
                    "winner": winner,
                    "history": cache_get(game_id),
                    "reward_mode": session.get('noi_tu_reward'),
                    "final_word": user_word,
                    "ai_lost_reason": reason
                }), 200

        ai_reply = ai_reply.strip().lower()

        RARE_AI_WORDS = [
            "ƒë√†n ƒë√∫m","ngoa ngo·∫Øt","lim rim","phi√™u du","l·∫∑ng thinh","m·ªãt m√π","t·ªëi tƒÉm",
            "√¢m u","tr·ªëng tr·∫£i","m∆° h·ªì","l∆° ƒë√£ng","s∆∞∆°ng kh√≥i","xa xƒÉm","m·∫≠p m·ªù","chu√¥ng ch√πa","vang v·ªçng",
            "ng·∫≠p ng·ª´ng","ng·ªïn ngang","ch√™nh v√™nh","l·∫∑ng l·∫Ω","c·∫ßu v·ªìng","lai rai","x√≠ qu√°ch"
        ]
        if turn >= 1 and random.random() < 0.6:
            rare_candidates = [w for w in RARE_AI_WORDS if w.split()[0] == need_start]
            if rare_candidates:
                ai_reply = random.choice(rare_candidates)

        if looks_like_surrender(ai_reply) and turn < min_sur:
            rescued = hard_rescue(need_start, used_words, history, client, max_tries=3)
            if rescued:
                ai_reply = rescued

        def is_good(cand: str) -> bool:
            cand_c = canon(cand)
            parts = cand_c.split()
            return (len(parts) == 2 and parts[0] == need_start and cand_c not in used_words)

        if not is_good(ai_reply):
            if turn < min_sur:
                rescued = hard_rescue(need_start, used_words, history, client, max_tries=3)
                if rescued and is_good(rescued):
                    ai_reply = rescued
                else:
                    rescued = force_retry_with_gpt(need_start, history)
                    if rescued and is_good(rescued):
                        ai_reply = rescued

        if not is_good(ai_reply):
            session['noi_tu_ended'] = True
            winner = "user"

            game_record = NoiTuGameHistory(
                user_id=getattr(current_user, "user_id", "anonymous"),
                start_time=session.get('noi_tu_start_time'),
                end_time=datetime.utcnow(),
                total_turns=turn,
                result=winner,
                reward_used=session.get('noi_tu_reward'),
                user_final_word=user_word,
                ai_final_word=ai_reply
            )
            db.session.add(game_record); db.session.commit()
            if hasattr(current_user, "user_id"):
                update_leaderboard(current_user.user_id, won=True)

            user_last_word = need_start
            fallback_messages = [
                f"T√¥i kh√¥ng nghƒ© ra c·ª•m n√†o b·∫Øt ƒë·∫ßu b·∫±ng '{user_last_word}' n·ªØa... b·∫°n gi·ªèi th·∫≠t!",
                f"T√¥i b√≠ r·ªìi, ch·ªãu lu√¥n t·ª´ '{user_last_word}' ü•≤",
                f"H·∫øt t·ª´ th·∫≠t r·ªìi. T·ª´ '{user_last_word}' kh√≥ qu√°!",
                f"B√≥ tay v·ªõi t·ª´ '{user_last_word}' lu√¥n √° =))) b·∫°n th·∫Øng r·ªìi!",
                f"T√¥i ch·ªãu... b·∫°n ch∆°i hay th·∫≠t ƒë·∫•y!",
                f"B√≠ t·ª´ nh∆∞ b√≠ ti·ªÅn cu·ªëi th√°ng v·∫≠y √° =)))",
                f"Ch∆°i v·∫≠y ai ch∆°i l·∫°i üò≠. Thua t√¢m ph·ª•c kh·∫©u ph·ª•c!"
            ]
            reason = random.choice(fallback_messages)

            return jsonify({
                "ai_word": ai_reply,
                "game_over": True,
                "winner": winner,
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "final_word": user_word,
                "ai_lost_reason": reason
            }), 200

        if not is_valid_vi_2word(ai_reply, client):
            if session.get('noi_tu_turn', 0) < min_sur:
                rescued = hard_rescue(need_start, used_words, history, client, max_tries=3)
                if rescued and is_valid_vi_2word(rescued, client) and is_good(rescued):
                    ai_reply = rescued
                else:
                    rescued = force_retry_with_gpt(need_start, history)
                    if rescued and is_valid_vi_2word(rescued, client) and is_good(rescued):
                        ai_reply = rescued

        if not is_valid_vi_2word(ai_reply, client) or not is_good(ai_reply):
            session['noi_tu_ended'] = True
            winner = "user"
            reason = f"T√¥i b√≠ th·∫≠t r·ªìi v·ªõi t·ª´ '{need_start}' üòÖ"

            game_record = NoiTuGameHistory(
                user_id=getattr(current_user, "user_id", "anonymous"),
                start_time=session.get('noi_tu_start_time'),
                end_time=datetime.utcnow(),
                total_turns=session.get('noi_tu_turn', 0),
                result=winner,
                reward_used=session.get('noi_tu_reward'),
                user_final_word=user_word,
                ai_final_word=ai_reply
            )
            db.session.add(game_record); db.session.commit()
            if hasattr(current_user, "user_id"):
                update_leaderboard(current_user.user_id, won=True)

            return jsonify({
                "ai_word": ai_reply,
                "game_over": True,
                "winner": winner,
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "final_word": user_word,
                "ai_lost_reason": reason
            }), 200

        turn = session.get('noi_tu_turn', 0)
        min_sur = session.get('noi_tu_min_surrender_turn', 25)
        profile = session.get('noi_tu_surrender_profile', {"p30_40":0.40,"p40_60":0.20,"p60_100":0.10})

        if random.random() < surrender_prob_by_profile(profile, turn, min_sur):
            session['noi_tu_ended'] = True
            winner = "user"
            user_last_word = need_start
            reason = random.choice([
                f"T√¥i kh√¥ng nghƒ© ra c·ª•m n√†o b·∫Øt ƒë·∫ßu b·∫±ng '{user_last_word}' n·ªØa... b·∫°n gi·ªèi th·∫≠t!",
                f"T√¥i b√≠ r·ªìi, ch·ªãu lu√¥n t·ª´ '{user_last_word}' ü•≤",
                f"H·∫øt t·ª´ th·∫≠t r·ªìi. T·ª´ '{user_last_word}' kh√≥ qu√°!",
                f"B√≥ tay v·ªõi t·ª´ '{user_last_word}' lu√¥n √° =))) b·∫°n th·∫Øng r·ªìi!",
                f"T√¥i ch·ªãu... b·∫°n ch∆°i hay th·∫≠t ƒë·∫•y!",
                f"B√≠ t·ª´ nh∆∞ b√≠ ti·ªÅn cu·ªëi th√°ng v·∫≠y √° =)))",
                f"Ch∆°i v·∫≠y ai ch∆°i l·∫°i üò≠. Thua t√¢m ph·ª•c kh·∫©u ph·ª•c!"
            ])

            game_record = NoiTuGameHistory(
                user_id=getattr(current_user, "user_id", "anonymous"),
                start_time=session.get('noi_tu_start_time'),
                end_time=datetime.utcnow(),
                total_turns=turn,
                result=winner,
                reward_used=session.get('noi_tu_reward'),
                user_final_word=user_word,
                ai_final_word=""
            )
            db.session.add(game_record); db.session.commit()
            if hasattr(current_user, "user_id"):
                update_leaderboard(current_user.user_id, won=True)

            return jsonify({
                "ai_word": "",
                "game_over": True,
                "winner": winner,
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "final_word": user_word,
                "ai_lost_reason": reason
            }), 200

        # H·ª£p l·ªá -> c·∫≠p nh·∫≠t l·ªãch s·ª≠/turn
        history.append({"role": "assistant", "content": ai_reply})
        cache_set(game_id, history)
        session['noi_tu_turn'] += 1

        if session['noi_tu_turn'] >= session.get('noi_tu_max_turns', 999):
            session['noi_tu_ended'] = True
            winner = "user"
            user_last_word = need_start
            reason = random.choice([
                f"T√¥i kh√¥ng nghƒ© ra c·ª•m n√†o b·∫Øt ƒë·∫ßu b·∫±ng '{user_last_word}' n·ªØa... b·∫°n gi·ªèi th·∫≠t!",
                f"T√¥i b√≠ r·ªìi, ch·ªãu lu√¥n t·ª´ '{user_last_word}' ü•≤",
                f"H·∫øt t·ª´ th·∫≠t r·ªìi. T·ª´ '{user_last_word}' kh√≥ qu√°!",
                f"B√≥ tay v·ªõi t·ª´ '{user_last_word}' lu√¥n √° =))) b·∫°n th·∫Øng r·ªìi!",
                f"T√¥i ch·ªãu... b·∫°n ch∆°i hay th·∫≠t ƒë·∫•y!",
                f"T·ª´ '{user_last_word}' nh∆∞ ƒë√°nh s·∫≠p n√£o t√¥i v·∫≠y üòµ",
                f"B√≠ qu√°... th√¥i thua b·∫°n v·∫≠y ü´°",
            ])

            game_record = NoiTuGameHistory(
                user_id=getattr(current_user, "user_id", "anonymous"),
                start_time=session.get('noi_tu_start_time'),
                end_time=datetime.utcnow(),
                total_turns=session.get('noi_tu_turn', 0),
                result=winner,
                reward_used=session.get('noi_tu_reward'),
                user_final_word=user_word,
                ai_final_word=""
            )
            db.session.add(game_record); db.session.commit()
            if hasattr(current_user, "user_id"):
                update_leaderboard(current_user.user_id, won=True)

            return jsonify({
                "ai_word": "",
                "game_over": True,
                "winner": winner,
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "final_word": user_word,
                "ai_lost_reason": reason
            }), 200

        ai_reply_lc = ai_reply.lower()
        ai_thua_keywords = ["b·∫°n th·∫Øng", "t√¥i thua", "t√¥i ch·ªãu", "ch·ªãu thua", "t√¥i b√≠", "h·∫øt t·ª´", "b·∫°n gi·ªèi", "kh√¥ng nghƒ© ra"]
        ai_thang_keywords = ["b·∫°n thua", "b·∫°n sai", "b·∫°n nh·∫≠p sai", "b·∫°n l·∫∑p l·∫°i", "sai lu·∫≠t"]
        is_hint_from_ai = any(k in ai_reply_lc for k in ["c·ª•m t·ª´ kh√¥ng h·ª£p l·ªá", "th·ª≠ l·∫°i", "nh·∫≠p l·∫°i", "kh√¥ng h·ª£p l·ªá"])

        game_over = False; winner = None
        if any(k in ai_reply_lc for k in ai_thua_keywords) and not is_hint_from_ai:
            game_over = True; winner = "user"
        elif any(k in ai_reply_lc for k in ai_thang_keywords) and not is_hint_from_ai:
            game_over = True; winner = "ai"

        if game_over:
            session['noi_tu_ended'] = True
            game_record = NoiTuGameHistory(
                user_id=getattr(current_user, "user_id", "anonymous"),
                start_time=session.get('noi_tu_start_time'),
                end_time=datetime.utcnow(),
                total_turns=session.get('noi_tu_turn', 0),
                result=winner,
                reward_used=session.get('noi_tu_reward'),
                user_final_word=user_word if winner == "user" else ai_reply,
                ai_final_word=ai_reply
            )
            db.session.add(game_record); db.session.commit()
            if hasattr(current_user, "user_id"):
                update_leaderboard(current_user.user_id, won=(winner == "user"))

            response = {
                "ai_word": ai_reply,
                "game_over": True,
                "winner": winner,
                "history": cache_get(game_id),
                "reward_mode": session.get('noi_tu_reward'),
                "final_word": user_word if winner == "user" else ai_reply
            }
            if winner == "user":
                user_last_word = need_start
                fallback_messages = [
                    f"T√¥i kh√¥ng nghƒ© ra c·ª•m n√†o b·∫Øt ƒë·∫ßu b·∫±ng '{user_last_word}' n·ªØa... b·∫°n gi·ªèi th·∫≠t!",
                    f"T√¥i b√≠ r·ªìi, ch·ªãu lu√¥n t·ª´ '{user_last_word}' ü•≤",
                    f"H·∫øt t·ª´ th·∫≠t r·ªìi. T·ª´ '{user_last_word}' kh√≥ qu√°!",
                    f"B√≥ tay v·ªõi t·ª´ '{user_last_word}' lu√¥n √° =))) b·∫°n th·∫Øng r·ªìi!",
                    f"T√¥i ch·ªãu... b·∫°n ch∆°i hay th·∫≠t ƒë·∫•y!",
                    f"B√≠ t·ª´ nh∆∞ b√≠ ti·ªÅn cu·ªëi th√°ng v·∫≠y √° =)))",
                    f"Ch∆°i v·∫≠y ai ch∆°i l·∫°i üò≠. Thua t√¢m ph·ª•c kh·∫©u ph·ª•c!"
                ]
                response["ai_lost_reason"] = random.choice(fallback_messages)
            if winner == "ai":
                response["ai_question"] = get_ai_reward_question()
            return jsonify(response)

        return jsonify({
            "ai_word": ai_reply,
            "game_over": False,
            "history": cache_get(game_id),
            "turn": session['noi_tu_turn']
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/game_noi_tu/bonus_tip")
def bonus_tip():
    import json, re, unicodedata
    from flask import Response

    prompt = """
B·∫°n ƒëang chu·∫©n b·ªã g·ª≠i m·ªôt ph·∫ßn th∆∞·ªüng nh·ªè sau khi ng∆∞·ªùi ch∆°i th·∫Øng game n·ªëi t·ª´.

üéÅ N·ªôi dung c√≥ th·ªÉ l√†:
- M·∫πo cu·ªôc s·ªëng th√∫ v·ªã
- M·∫πo h·ªçc t·∫≠p hi·ªáu qu·∫£
- C√°ch t·ªè t√¨nh d·ªÖ th∆∞∆°ng
- G·ª£i √Ω ƒë·ªÅ thi hay
- C√°ch ki·∫øm ti·ªÅn ƒë∆°n gi·∫£n
- C√¢u ch·ª≠i vƒÉn minh, l·ªãch s·ª±

üéØ Y√™u c·∫ßu c·ª±c k·ª≥ quan tr·ªçng:
- Tr·∫£ v·ªÅ ƒë√∫ng 1 c√¢u g·ªçn, KH√ÅC v·ªõi c√°c c√¢u ƒë√£ t·ª´ng d√πng nh∆∞: "H·ªçc √≠t m√† v·∫´n ƒëi·ªÉm cao l√† ·∫£o t∆∞·ªüng üòÖ"
- KH√îNG tr√πng l·∫∑p c√°c c√¢u tr∆∞·ªõc (tuy·ªát ƒë·ªëi tr√°nh).
- Tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
{"tip": "m·∫πo ho·∫∑c c√¢u th∆∞·ªüng", "category": "life_tip"}

N·∫øu l√† "c√¢u ch·ª≠i vƒÉn minh", h√£y d√πng ƒë√∫ng m·∫´u: ‚ÄúThay v√¨ b·∫°n n√≥i... th√¨ h√£y n√≥i...‚Äù.

Kh√¥ng gi·∫£i th√≠ch, kh√¥ng th√™m n·ªôi dung th·ª´a.
Ch·ªâ tr·∫£ v·ªÅ duy nh·∫•t JSON thu·∫ßn t√∫y.
"""

    try:
        client = create_openai_client("gpt-4o")
        res = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=1.3,
            max_tokens=300
        )
        raw = res.choices[0].message.content.strip()
        match = re.search(r"\{[^{}]+\}", raw, re.DOTALL)
        if not match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON trong GPT.")

        parsed = json.loads(match.group())
        tip = parsed.get("tip", "").strip()
        category = parsed.get("category", "life_tip")

        def clean_text(text):
            return ''.join(c for c in text if unicodedata.category(c)[0] != 'C')
        tip = clean_text(tip)

        if not tip:
            raise ValueError("Kh√¥ng c√≥ tip h·ª£p l·ªá.")

        # ‚úÖ Tr·∫£ v·ªÅ ti·∫øng Vi·ªát ƒë·∫ßy ƒë·ªß
        return Response(
            json.dumps({"tip": tip, "category": category}, ensure_ascii=False),
            content_type="application/json"
        )

    except Exception as e:
        return Response(
            json.dumps({
                "tip": "Khi ng∆∞·ªùi kh√°c gi·ªèi h∆°n, h√£y h·ªçc h·ªèi thay v√¨ ganh t·ªã üí°",
                "category": "life_tip"
            }, ensure_ascii=False),
            content_type="application/json"
        )


@app.route('/game_noi_tu/random_ai_question', methods=['GET'])
def get_random_ai_question():
    questions = [
        "B·∫°n mong mu·ªën thay ƒë·ªïi ƒëi·ªÅu g√¨ trong cu·ªôc s·ªëng?",
        "N·∫øu m·ªôt ng√†y m·∫•t h·∫øt m·ªçi th·ª©, b·∫°n gi·ªØ l·∫°i ƒëi·ªÅu g√¨?",
        "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y m√¨nh th·∫≠t s·ª± ƒëang s·ªëng?",
        "B·∫°n nghƒ© h·∫°nh ph√∫c l√† g√¨?",
        "B·∫°n ƒë√£ t·ª´ng th·∫•y kho·∫£nh kh·∫Øc n√†o khi·∫øn b·∫°n ngh·∫πn ng√†o ch∆∞a?",
        "ƒêi·ªÅu g√¨ b·∫°n lu√¥n bi·∫øt ∆°n m·ªói ng√†y?",
        "N·∫øu ch·ªâ c√≤n 24h ƒë·ªÉ s·ªëng, b·∫°n s·∫Ω l√†m g√¨?",
        "B·∫°n ch·ªçn b√¨nh y√™n hay th·ª≠ th√°ch ƒë·ªÉ tr∆∞·ªüng th√†nh?",
        "B·∫°n tin th·ªùi gian c√≥ th·ªÉ ch·ªØa l√†nh m·ªçi v·∫øt th∆∞∆°ng kh√¥ng?",
        "S·ª± im l·∫∑ng c√≥ ph·∫£i ƒë√¥i khi l√† c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t?",
        "B·∫°n c√≥ tin v√†o duy√™n ph·∫≠n kh√¥ng?",
        "Ng∆∞·ªùi b·∫°n th·∫ßm th∆∞∆°ng c√≥ th√≠ch b·∫°n kh√¥ng?",
        "C√¢u chuy·ªán c·ªßa b·∫°n v√† ng∆∞·ªùi ·∫•y sao r·ªìi?",
        "B·∫°n ƒë·ªãnh nghƒ©a th·∫ø n√†o l√† m·ªôt t√¨nh y√™u ƒë·∫πp?",
        "T√¨nh y√™u c√≥ c·∫ßn l√Ω do kh√¥ng?",
        "B·∫°n tin v√†o t√¨nh y√™u t·ª´ c√°i nh√¨n ƒë·∫ßu ti√™n ch·ª©?",
        "B·∫°n ƒë√£ bao gi·ªù hy sinh ƒëi·ªÅu g√¨ v√¨ t√¨nh y√™u?",
        "B·∫°n nghƒ© t√¨nh y√™u v√† t√¨nh th∆∞∆°ng kh√°c nhau ch·ªó n√†o?",
        "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y an to√†n trong m·ªôt m·ªëi quan h·ªá?",
        "B·∫°n c√≥ tin t√¨nh y√™u c√≥ th·ªÉ thay ƒë·ªïi con ng∆∞·ªùi kh√¥ng?",
        "B·∫°n t·ª´ng h·ªëi ti·∫øc ƒëi·ªÅu g√¨ nh·∫•t?",
        "N·∫øu c√≥ th·ªÉ l√†m l·∫°i, b·∫°n mu·ªën l√†m g√¨ kh√°c?",
        "B·∫°n nghƒ© √Ω nghƒ©a cu·ªôc ƒë·ªùi l√† g√¨?",
        "S·ª± t·ª± do th·∫≠t s·ª± n·∫±m ·ªü ƒë√¢u?",
        "B·∫°n tin m·ªói ng∆∞·ªùi ƒë·ªÅu c√≥ m·ªôt s·ª© m·ªánh ri√™ng ch·ª©?",
        "C√°i gi√° c·ªßa s·ª± tr∆∞·ªüng th√†nh l√† g√¨?",
        "Ti·ªÅn c√≥ mua ƒë∆∞·ª£c h·∫°nh ph√∫c kh√¥ng?",
        "ƒêi·ªÅu g√¨ kh√≥ bu√¥ng b·ªè nh·∫•t trong ƒë·ªùi?",
        "B·∫°n ch·ªçn s·ªëng th·∫≠t hay s·ªëng theo k·ª≥ v·ªçng c·ªßa ng∆∞·ªùi kh√°c?",
        "ƒêi·ªÅu g√¨ khi·∫øn con ng∆∞·ªùi ta tr·ªü n√™n m·∫°nh m·∫Ω h∆°n?",
        "M·ª•c ti√™u l·ªõn nh·∫•t c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n mu·ªën l√†m g√¨ trong 5 nƒÉm t·ªõi?",
        "N·∫øu ƒë∆∞·ª£c ∆∞·ªõc m·ªôt ƒëi·ªÅu, b·∫°n s·∫Ω ∆∞·ªõc g√¨?",
        "B·∫°n mu·ªën tr·ªü th√†nh ng∆∞·ªùi nh∆∞ th·∫ø n√†o trong t∆∞∆°ng lai?",
        "N·∫øu c√≥ c∆° h·ªôi s·ªëng ·ªü b·∫•t k·ª≥ ƒë√¢u, b·∫°n ch·ªçn n∆°i n√†o?",
        "B·∫°n nghƒ© th·∫ø gi·ªõi 20 nƒÉm n·ªØa s·∫Ω ra sao?",
        "B·∫°n mu·ªën ƒë·ªÉ l·∫°i ƒëi·ªÅu g√¨ cho th·∫ø h·ªá sau?",
        "ƒêi·ªÅu g√¨ b·∫°n mu·ªën h·ªçc ngay l·∫≠p t·ª©c n·∫øu c√≥ th·ªÉ?",
        "N·∫øu ƒë∆∞·ª£c g·∫∑p b·∫£n th√¢n trong t∆∞∆°ng lai, b·∫°n s·∫Ω h·ªèi g√¨?",
        "B·∫°n nghƒ© m√¨nh s·∫Ω thay ƒë·ªïi ra sao sau 10 nƒÉm?",
        "ƒêi·ªÅu g√¨ ·ªü gia ƒë√¨nh khi·∫øn b·∫°n t·ª± h√†o nh·∫•t?",
        "Ai l√† ng∆∞·ªùi b·∫°n lu√¥n mu·ªën b·∫£o v·ªá?",
        "B·∫°n h·ªçc ƒë∆∞·ª£c ƒëi·ªÅu g√¨ qu√Ω gi√° nh·∫•t t·ª´ gia ƒë√¨nh?",
        "Kho·∫£nh kh·∫Øc n√†o khi·∫øn b·∫°n nh·ªõ v·ªÅ gia ƒë√¨nh nhi·ªÅu nh·∫•t?",
        "B·∫°n mu·ªën t·∫°o ra truy·ªÅn th·ªëng g√¨ cho gia ƒë√¨nh m√¨nh?",
        "Ai l√† ng∆∞·ªùi truy·ªÅn c·∫£m h·ª©ng cho b·∫°n nhi·ªÅu nh·∫•t?",
        "B·∫°n nghƒ© gia ƒë√¨nh quan tr·ªçng th·∫ø n√†o trong h√†nh tr√¨nh c·ªßa b·∫°n?",
        "N·∫øu c√≥ th·ªÉ, b·∫°n mu·ªën n√≥i g√¨ v·ªõi gia ƒë√¨nh ngay l√∫c n√†y?",
        "K·ª∑ ni·ªám gia ƒë√¨nh n√†o b·∫°n lu√¥n tr√¢n tr·ªçng?",
        "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y h·∫°nh ph√∫c khi nghƒ© v·ªÅ gia ƒë√¨nh?",
    ]
    return jsonify({"question": random.choice(questions)})

@app.route('/game_noi_tu/answer_feedback', methods=['POST'])
def answer_feedback():
    data = request.get_json()
    game_id = data.get("game_id")
    user_answer = data.get("answer", "").strip()
    question = data.get("question", "").strip()

    if not user_answer:
        return jsonify({"ok": False, "feedback": "B·∫°n ch∆∞a nh·∫≠p g√¨ c·∫£!"})

    try:
        prompt = f"""
T√¥i l√† AI ƒëang ch∆°i game n·ªëi t·ª´ c√πng ng∆∞·ªùi d√πng. Sau khi t√¥i th·∫Øng, t√¥i ƒë√£ h·ªèi ng∆∞·ªùi ch∆°i m·ªôt c√¢u th∆∞·ªüng:

üìå C√¢u h·ªèi l√†: "{question}"

Ng∆∞·ªùi d√πng ƒë√£ tr·∫£ l·ªùi: "{user_answer}"

B·∫°n h√£y ph·∫£n h·ªìi l·∫°i m·ªôt c√°ch d√≠ d·ªèm, nh·∫π nh√†ng, th√¥ng minh, t·ªëi ƒëa 1-2 c√¢u.
üëâ N·∫øu c√¢u tr·∫£ l·ªùi KH√îNG LI√äN QUAN t·ªõi c√¢u h·ªèi, h√£y n√≥i ki·ªÉu: "·ª¶a alo b·∫°n ƒë·ªçc c√¢u h·ªèi ch∆∞a v·∫≠y?", "Hahaha kh√¥ng li√™n quan g√¨ lu√¥n √° üòÖ" ho·∫∑c tr√™u nh·∫π nh√†ng.
üëâ N·∫øu ng∆∞·ªùi ch∆°i tr·∫£ l·ªùi C√ì LI√äN QUAN, h√£y ph·∫£n h·ªìi d·ªÖ th∆∞∆°ng, th√¥ng minh, vui v·∫ª nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n.

Gi·ªØ phong c√°ch g·∫ßn g≈©i, n√≥i nh∆∞ b·∫°n tr·∫ª GenZ. Kh√¥ng ƒë·∫°o l√Ω.
"""

        client = create_openai_client("gpt-4o")
        res = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=1.3,
            max_tokens=300
        )

        feedback = res.choices[0].message.content.strip()
        return jsonify({"ok": True, "feedback": feedback})

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"ok": False, "feedback": f"C√≥ l·ªói x·∫£y ra: {str(e)}"}), 500

def get_ai_reward_question():
    return random.choice([
    # --- Cu·ªôc s·ªëng ---
    "B·∫°n mong mu·ªën thay ƒë·ªïi ƒëi·ªÅu g√¨ trong cu·ªôc s·ªëng?",
    "N·∫øu m·ªôt ng√†y m·∫•t h·∫øt m·ªçi th·ª©, b·∫°n gi·ªØ l·∫°i ƒëi·ªÅu g√¨?",
    "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y m√¨nh th·∫≠t s·ª± ƒëang s·ªëng?",
    "B·∫°n nghƒ© h·∫°nh ph√∫c l√† g√¨?",
    "B·∫°n ƒë√£ t·ª´ng th·∫•y kho·∫£nh kh·∫Øc n√†o khi·∫øn b·∫°n ngh·∫πn ng√†o ch∆∞a?",
    "ƒêi·ªÅu g√¨ b·∫°n lu√¥n bi·∫øt ∆°n m·ªói ng√†y?",
    "N·∫øu ch·ªâ c√≤n 24h ƒë·ªÉ s·ªëng, b·∫°n s·∫Ω l√†m g√¨?",
    "B·∫°n ch·ªçn b√¨nh y√™n hay th·ª≠ th√°ch ƒë·ªÉ tr∆∞·ªüng th√†nh?",
    "B·∫°n tin th·ªùi gian c√≥ th·ªÉ ch·ªØa l√†nh m·ªçi v·∫øt th∆∞∆°ng kh√¥ng?",
    "S·ª± im l·∫∑ng c√≥ ph·∫£i ƒë√¥i khi l√† c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t?",
    
    # --- T√¨nh y√™u ---
    "B·∫°n c√≥ tin v√†o duy√™n ph·∫≠n kh√¥ng?",
    "Ng∆∞·ªùi b·∫°n th·∫ßm th∆∞∆°ng c√≥ th√≠ch b·∫°n kh√¥ng?",
    "C√¢u chuy·ªán c·ªßa b·∫°n v√† ng∆∞·ªùi ·∫•y sao r·ªìi?",
    "B·∫°n ƒë·ªãnh nghƒ©a th·∫ø n√†o l√† m·ªôt t√¨nh y√™u ƒë·∫πp?",
    "T√¨nh y√™u c√≥ c·∫ßn l√Ω do kh√¥ng?",
    "B·∫°n tin v√†o t√¨nh y√™u t·ª´ c√°i nh√¨n ƒë·∫ßu ti√™n ch·ª©?",
    "B·∫°n ƒë√£ bao gi·ªù hy sinh ƒëi·ªÅu g√¨ v√¨ t√¨nh y√™u?",
    "B·∫°n nghƒ© t√¨nh y√™u v√† t√¨nh th∆∞∆°ng kh√°c nhau ch·ªó n√†o?",
    "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y an to√†n trong m·ªôt m·ªëi quan h·ªá?",
    "B·∫°n c√≥ tin t√¨nh y√™u c√≥ th·ªÉ thay ƒë·ªïi con ng∆∞·ªùi kh√¥ng?",
    
    # --- Tri·∫øt l√Ω ---
    "B·∫°n t·ª´ng h·ªëi ti·∫øc ƒëi·ªÅu g√¨ nh·∫•t?",
    "N·∫øu c√≥ th·ªÉ l√†m l·∫°i, b·∫°n mu·ªën l√†m g√¨ kh√°c?",
    "B·∫°n nghƒ© √Ω nghƒ©a cu·ªôc ƒë·ªùi l√† g√¨?",
    "S·ª± t·ª± do th·∫≠t s·ª± n·∫±m ·ªü ƒë√¢u?",
    "B·∫°n tin m·ªói ng∆∞·ªùi ƒë·ªÅu c√≥ m·ªôt s·ª© m·ªánh ri√™ng ch·ª©?",
    "C√°i gi√° c·ªßa s·ª± tr∆∞·ªüng th√†nh l√† g√¨?",
    "Ti·ªÅn c√≥ mua ƒë∆∞·ª£c h·∫°nh ph√∫c kh√¥ng?",
    "ƒêi·ªÅu g√¨ kh√≥ bu√¥ng b·ªè nh·∫•t trong ƒë·ªùi?",
    "B·∫°n ch·ªçn s·ªëng th·∫≠t hay s·ªëng theo k·ª≥ v·ªçng c·ªßa ng∆∞·ªùi kh√°c?",
    "ƒêi·ªÅu g√¨ khi·∫øn con ng∆∞·ªùi ta tr·ªü n√™n m·∫°nh m·∫Ω h∆°n?",
    
    # --- T∆∞∆°ng lai ---
    "M·ª•c ti√™u l·ªõn nh·∫•t c·ªßa b·∫°n l√† g√¨?",
    "B·∫°n mu·ªën l√†m g√¨ trong 5 nƒÉm t·ªõi?",
    "N·∫øu ƒë∆∞·ª£c ∆∞·ªõc m·ªôt ƒëi·ªÅu, b·∫°n s·∫Ω ∆∞·ªõc g√¨?",
    "B·∫°n mu·ªën tr·ªü th√†nh ng∆∞·ªùi nh∆∞ th·∫ø n√†o trong t∆∞∆°ng lai?",
    "N·∫øu c√≥ c∆° h·ªôi s·ªëng ·ªü b·∫•t k·ª≥ ƒë√¢u, b·∫°n ch·ªçn n∆°i n√†o?",
    "B·∫°n nghƒ© th·∫ø gi·ªõi 20 nƒÉm n·ªØa s·∫Ω ra sao?",
    "B·∫°n mu·ªën ƒë·ªÉ l·∫°i ƒëi·ªÅu g√¨ cho th·∫ø h·ªá sau?",
    "ƒêi·ªÅu g√¨ b·∫°n mu·ªën h·ªçc ngay l·∫≠p t·ª©c n·∫øu c√≥ th·ªÉ?",
    "N·∫øu ƒë∆∞·ª£c g·∫∑p b·∫£n th√¢n trong t∆∞∆°ng lai, b·∫°n s·∫Ω h·ªèi g√¨?",
    "B·∫°n nghƒ© m√¨nh s·∫Ω thay ƒë·ªïi ra sao sau 10 nƒÉm?",
    
    # --- Gia ƒë√¨nh ---
    "ƒêi·ªÅu g√¨ ·ªü gia ƒë√¨nh khi·∫øn b·∫°n t·ª± h√†o nh·∫•t?",
    "Ai l√† ng∆∞·ªùi b·∫°n lu√¥n mu·ªën b·∫£o v·ªá?",
    "B·∫°n h·ªçc ƒë∆∞·ª£c ƒëi·ªÅu g√¨ qu√Ω gi√° nh·∫•t t·ª´ gia ƒë√¨nh?",
    "Kho·∫£nh kh·∫Øc n√†o khi·∫øn b·∫°n nh·ªõ v·ªÅ gia ƒë√¨nh nhi·ªÅu nh·∫•t?",
    "B·∫°n mu·ªën t·∫°o ra truy·ªÅn th·ªëng g√¨ cho gia ƒë√¨nh m√¨nh?",
    "Ai l√† ng∆∞·ªùi truy·ªÅn c·∫£m h·ª©ng cho b·∫°n nhi·ªÅu nh·∫•t?",
    "B·∫°n nghƒ© gia ƒë√¨nh quan tr·ªçng th·∫ø n√†o trong h√†nh tr√¨nh c·ªßa b·∫°n?",
    "N·∫øu c√≥ th·ªÉ, b·∫°n mu·ªën n√≥i g√¨ v·ªõi gia ƒë√¨nh ngay l√∫c n√†y?",
    "K·ª∑ ni·ªám gia ƒë√¨nh n√†o b·∫°n lu√¥n tr√¢n tr·ªçng?",
    "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y h·∫°nh ph√∫c khi nghƒ© v·ªÅ gia ƒë√¨nh?"
])


@app.route('/game_noi_tu/submit_user_answer', methods=['POST'])
def submit_user_answer():
    data = request.get_json()
    answer = data.get("answer", "")
    return jsonify({"ok": True, "feedback": f"C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª: {answer}"})
@app.route('/game_noi_tu/reward_question', methods=['POST'])
def reward_question():
    data = request.get_json()
    question = data.get("question", "")
    if not question:
        return jsonify({"error": "Thi·∫øu c√¢u h·ªèi"}), 400

    try:
        client = create_openai_client("gpt-4o")
        res = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "B·∫°n l√† m·ªôt AI v·ª´a thua ng∆∞·ªùi ch∆°i trong m·ªôt game n·ªëi t·ª´. "
                        "H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch tr·ª±c ti·∫øp, s√∫c t√≠ch, ƒë√∫ng tr·ªçng t√¢m. "
                        "Kh√¥ng c·∫ßn li·ªát k√™, kh√¥ng c·∫ßn gi·∫£i th√≠ch d√†i d√≤ng. "
                        "Tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß trong m·ªôt ƒëo·∫°n duy nh·∫•t, kh√¥ng v∆∞·ª£t qu√° 200 t·ª´."
                    )
                },
                {"role": "user", "content": question}
            ],
            temperature=0.7,
            max_tokens=500 
        )
        answer = res.choices[0].message.content.strip()
        return jsonify({"answer": answer})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/game_noi_tu/history', methods=['GET'])
def get_noi_tu_history():
    try:
        user_id = current_user.user_id if hasattr(current_user, "user_id") else None
        if not user_id:
            return jsonify({"error": "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"}), 401

        history_list = (
            NoiTuGameHistory.query
            .filter_by(user_id=user_id)
            .order_by(NoiTuGameHistory.start_time.desc())
            .limit(10)
            .all()
        )

        return jsonify([h.to_dict() for h in history_list])

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/noi_tu')
def redirect_noi_tu_random():
    random_id = str(uuid.uuid4())[:8]  
    return redirect(f"/noi_tu/{random_id}")


@app.route("/noi_tu/<game_id>")
def game_noi_tu(game_id):
    username = session.get("username")
    
    if not username:
        return redirect("/login") 
    
    user = User.query.filter_by(username=username).first()
    
    if not user:
        return redirect("/error_user_not_found")  
    
    avatar_url = user.avatar_url if user.avatar_url else "/static/images/avatars/user_default.png"
    
    return render_template(
        "noi_tu.html",
        session_id=game_id,
        avatar_url=avatar_url,
        fullname=user.fullname,
        user_id=user.user_id,            
        username=user.username    
    )

@app.route('/game_noi_tu/leaderboard')
def get_leaderboard():
    try:
        # 1. Truy v·∫•n top 20 ng∆∞·ªùi ch∆°i
        results = db.session.execute(text("""
            SELECT user_id, total_games, wins AS total_wins,
                   ROUND(CASE WHEN total_games > 0 THEN (wins * 100.0 / total_games) ELSE 0 END, 1) AS win_rate
            FROM noi_tu_leaderboard
            ORDER BY wins DESC, win_rate DESC
            LIMIT 20
        """)).mappings().all()

        user_ids = [r['user_id'] for r in results]
        users_info = {}
        if user_ids:
            rows = db.session.execute(text("""
                SELECT user_id, fullname, avatar_url
                FROM users
                WHERE user_id = ANY(:ids)
            """), {'ids': user_ids}).mappings().all()
            users_info = {
                r['user_id']: {
                    "fullname": r['fullname'],
                    "avatar_url": r['avatar_url']
                } for r in rows
            }

        leaderboard = []
        for idx, row in enumerate(results, 1):
            info = users_info.get(row['user_id'])
            leaderboard.append({
                "rank": idx,
                "user_id": row['user_id'],
                "fullname": info["fullname"],
                "avatar_url": info["avatar_url"],
                "total_games": row['total_games'],
                "total_wins": row['total_wins'],
                "win_rate": row['win_rate']
            })

        # 2. N·∫øu l√† ng∆∞·ªùi ƒëƒÉng nh·∫≠p, l·∫•y x·∫øp h·∫°ng th·∫≠t
        your_rank_data = None
        if current_user and current_user.is_authenticated:
            rank_result = db.session.execute(text("""
                WITH ranked AS (
                    SELECT user_id,
                           RANK() OVER (ORDER BY wins DESC, total_games DESC) AS rank
                    FROM noi_tu_leaderboard
                )
                SELECT rank FROM ranked WHERE user_id = :uid
            """), {'uid': current_user.user_id}).fetchone()

            if rank_result:
                user_info = db.session.execute(text("""
                    SELECT wins, total_games FROM noi_tu_leaderboard WHERE user_id = :uid
                """), {'uid': current_user.user_id}).fetchone()

                your_rank_data = {
                    "rank": rank_result.rank,
                    "fullname": current_user.fullname,
                    "avatar_url": current_user.avatar_url,
                    "total_wins": user_info.wins,
                    "total_games": user_info.total_games
                }

        return jsonify({
            "leaderboard": leaderboard,
            "your_rank": your_rank_data
        })

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"L·ªói b·∫£ng x·∫øp h·∫°ng: {str(e)}"}), 500
@app.route("/game_noi_tu/gopy_ai", methods=["POST"])
def gopy_ai():
    data = request.get_json()

    content = data.get("content", "").strip()
    user_id = data.get("user_id", "n/a").strip()
    username = data.get("username", "n/a").strip()

    if not content:
        return jsonify({"success": False, "message": "N·ªôi dung tr·ªëng"})

    log = f"""---
Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Ph√¢n lo·∫°i: G·ª£i √Ω c√¢u h·ªèi AI
H·ªç t√™n: (·∫©n danh)
Email: (·∫©n danh)
User ID: {user_id}
Username: {username}
N·ªôi dung: {content}
·∫¢nh:
"""

    try:
        with open("feedback_log.txt", "a", encoding="utf-8") as f:
            f.write(log + "\n")
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "message": "L·ªói server"})

@app.route("/api/tra_cuu", methods=["POST"])
def tra_cuu_tu_nghia():
    if not session.get("noi_tu_ended", False):
        return jsonify({"error": "Ch·ªâ ƒë∆∞·ª£c tra c·ª©u sau khi k·∫øt th√∫c game."}), 403

    data = request.get_json()

    def normalize_vietnamese(text):
        return unicodedata.normalize('NFC', text.strip().lower())

    tu = normalize_vietnamese(data.get("tu", ""))

    # ‚úÖ Ch·∫∑n n·∫øu kh√¥ng ph·∫£i ƒë√∫ng 2 t·ª´
    if len(tu.split()) != 2:
        return jsonify({"error": "Ch·ªâ ƒë∆∞·ª£c tra c·ª©u c√°c c·ª•m t·ª´ g·ªìm ƒë√∫ng 2 t·ª´."}), 403

    try:
        with open("viet_dictionary.json", "r", encoding="utf-8") as f:
            dictionary = json.load(f)

        normalized_keys = {normalize_vietnamese(k): k for k in dictionary.keys()}
        real_key = normalized_keys.get(tu)
        if real_key:
            entry = dictionary[real_key]

            nghia = entry.get("nghia") or entry.get("nghƒ©a") or "Kh√¥ng r√µ."
            vi_du = entry.get("vi_du") or entry.get("v√≠_d·ª•") or "Kh√¥ng r√µ."
            dong_nghia = entry.get("dong_nghia") or entry.get("ƒë·ªìng_nghƒ©a") or "Kh√¥ng c√≥."
            cap_nhat = entry.get("cap_nhat") or entry.get("c·∫≠p_nh·∫≠t") or ""
            nguoi_cung_cap = entry.get("nguoi_cung_cap")
            nguon = nguoi_cung_cap if nguoi_cung_cap else entry.get("nguon", "C·ªông ƒë·ªìng")


            return jsonify({
                "tu": real_key,
                "nghia": nghia,
                "vi_du": vi_du,
                "dong_nghia": dong_nghia,
                "cap_nhat": cap_nhat,
                "nguon": nguon,
                "nguoi_cung_cap": nguoi_cung_cap
            })

        # N·∫øu kh√¥ng c√≥ trong t·ª´ ƒëi·ªÉn, g·ªçi GPT
        client = create_openai_client("gpt-4o")
        prompt = f"""Gi·∫£i th√≠ch nghƒ©a c·ªßa c·ª•m t·ª´ sau b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu, c√≥ v√≠ d·ª• v√† c√°c t·ª´ ƒë·ªìng nghƒ©a n·∫øu c√≥.

T·ª´: "{tu}"

Tr·∫£ l·ªùi theo m·∫´u JSON:
{{
  "nghia": "...",
  "vi_du": "...",
  "dong_nghia": "..."
}}"""
        res = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=300
        )
        reply = res.choices[0].message.content.strip()
        try:
            parsed = json.loads(reply)
        except Exception:
            import re
            nghia = re.search(r'"nghia"\s*:\s*"([^"]+)"', reply)
            vi_du = re.search(r'"vi_du"\s*:\s*"([^"]+)"', reply)
            dong_nghia = re.search(r'"dong_nghia"\s*:\s*"([^"]+)"', reply)

            parsed = {
                "nghia": nghia.group(1) if nghia else "Kh√¥ng r√µ nghƒ©a.",
                "vi_du": vi_du.group(1) if vi_du else "Kh√¥ng r√µ v√≠ d·ª•.",
                "dong_nghia": dong_nghia.group(1) if dong_nghia else "Kh√¥ng c√≥ ƒë·ªìng nghƒ©a."
            }

        parsed["tu"] = tu
        parsed["nguon"] = random.choice([
            "Mai Linh", "Ng·ªçc H√¢n", "Minh Qu√¢n", "Tu·∫•n Ki·ªát", "Kh√°nh Vy", "AKAZA", "Kukoshibo", "Muichiro",
            "B·∫£o An", "Tr√∫c Lam", "Ph∆∞∆°ng Th·∫£o", "Gia H∆∞ng", "Th·∫£o Nhi", "Seven", "Lucie", "Muzan", "Gia B·∫£o"
        ])
        parsed["cap_nhat"] = (datetime.now() - timedelta(days=random.randint(1, 30))).strftime("%Y-%m-%d %H:%M:%S")

        return jsonify(parsed)

    except Exception as e:
        return jsonify({"error": f"L·ªói tra c·ª©u: {e}"}), 500
@app.route("/server_status")
@admin_only
def server_status():
    return render_template("server_status.html")
@app.route('/rules')
def rules():
    return render_template("rules.html")
import os
import time
from flask import jsonify

UPLOADS_FOLDER = os.path.join("static", "images", "uploads")

@app.route("/cleanup_old_ai_images", methods=["POST"])
def cleanup_old_ai_images():
    try:
        now = time.time()
        deleted_files = []
        kept_files = []

        # Duy·ªát qua to√†n b·ªô file trong uploads/
        for root, dirs, files in os.walk(UPLOADS_FOLDER):
            for file in files:
                file_path = os.path.join(root, file)
                if not os.path.isfile(file_path):
                    continue

                # Th·ªùi gian ch·ªânh s·ª≠a cu·ªëi
                file_age_days = (now - os.path.getmtime(file_path)) / (60 * 60 * 24)

                if file_age_days >= 30:  # qu√° 30 ng√†y ho·∫∑c ƒë√∫ng 30 ng√†y
                    os.remove(file_path)
                    deleted_files.append(file_path.replace("static/", ""))
                else:
                    kept_files.append(file_path.replace("static/", ""))

        return jsonify({
            "success": True,
            "deleted": deleted_files,
            "kept": kept_files,
            "message": f"ƒê√£ x√≥a {len(deleted_files)} ·∫£nh qu√° h·∫°n (>=30 ng√†y)."
        })

    except Exception as e:
        return jsonify({"success": False, "error": str(e)})

# ====== RUN APP ======
if __name__ == "__main__":
    import os
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        threading.Thread(target=auto_unblock_loop, daemon=True).start()
    socketio.run(app, host="0.0.0.0", port=5000, debug=True, allow_unsafe_werkzeug=True)
